// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
var Module = Module || {};
Module["postRun"] = Module["postRun"] || [];
Module["postRun"].push((function(){
	window["objects"] = {
		"contexts": []
	};
	window["input"] = {
		"onkeydown": _onkeydown,
		"onkeyup": _onkeyup,
		"onmousemove": _onmousemove,
		"onmousedown": _onmousedown,
		"onmouseup": _onmouseup,
		"onwheel": _onwheel,
		"onblur": _onblur,
		"onfocus": _onfocus,
		"touchstart": _touchstart,
		"touchend": _touchend,
		"touchmove": _touchmove
	};
	window["size"] = {
		"orientationchange": _orientationchange,
		"onresize": _onresize
	};
}));

window.onresize = function(e){
	if(!window["size"] || !e) return;

	window["size"]["onresize"]();
};

function orientationchange(e){
	if(!window["size"] || !e) return;

	window["size"]["orientationchange"]();
}

document.onkeydown = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onkeydown"](e.keyCode);
	
	if(e.keyCode == 32) e.preventDefault();
};

document.onkeyup = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onkeyup"](e.keyCode);

	if(e.keyCode == 32) e.preventDefault(); //Disables spacebar scrolling
};

document.onmousemove = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onmousemove"](e.clientX, e.clientY);
};

document.onmousedown = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onmousedown"](e.clientX, e.clientY, e.which);
};

document.onmouseup = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onmouseup"](e.clientX, e.clientY, e.which);
};

document.onwheel = function(e){
	if(!window["input"] || !e) return;

	window["input"]["onwheel"](e.deltaY);

	event.preventDefault();
};

window.onblur = function(){
	if(!window["input"]) return;
	window["input"]["onblur"]();
};

window.onfocus = function(){
	if(!window["input"]) return;
	window["input"]["onfocus"]();
};

function touchStart(e){
	e.preventDefault();
	for(var i = 0; i < e.changedTouches.length; i++){
		var touch = e.changedTouches[i];
		if(!window["input"] || !e) continue;
		window["input"]["touchstart"](touch.identifier, touch.clientX, touch.clientY);
	}
}

function touchEnd(e){
	e.preventDefault();
	for(var i = 0; i < e.changedTouches.length; i++){
		var touch = e.changedTouches[i];
		if(!window["input"] || !e) continue;
		window["input"]["touchend"](touch.identifier);
	}
}

function touchMove(e){
	e.preventDefault();
	for(var i = 0; i < e.changedTouches.length; i++){
		var touch = e.changedTouches[i];
		if(!window["input"] || !e) continue;
		window["input"]["touchmove"](touch.identifier, touch.clientX, touch.clientY);
	}
}

window.addEventListener('orientationchange', orientationchange);
window.addEventListener("touchstart", touchStart, {passive: false});
window.addEventListener("touchend", touchEnd, {passive: false});
window.addEventListener("touchcancel", touchEnd, {passive: false});
window.addEventListener("touchmove", touchMove, {passive: false});


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1) { var ctx = document.getElementById(UTF8ToString($1)).getContext("2d"); contexts[$0] = ctx; },
 function($0) { var ctx = contexts[$0]; var canvas = ctx.canvas; canvas.width = window.innerWidth * window.devicePixelRatio; canvas.height = window.innerHeight * window.devicePixelRatio; canvas.style.width = canvas.width / window.devicePixelRatio + "px"; canvas.style.height = canvas.height / window.devicePixelRatio + "px"; },
 function($0, $1, $2) { var ctx = contexts[$0]; var canvas = ctx.canvas; ctx.clearRect(0, 0, $1, $2); },
 function($0, $1, $2) { contexts[$0].scale($1, $2); },
 function($0) { contexts[$0].beginPath(); },
 function($0, $1, $2) { contexts[$0].moveTo($1, $2); },
 function($0, $1, $2) { contexts[$0].lineTo($1, $2); },
 function($0) { contexts[$0].stroke(); },
 function($0, $1, $2, $3, $4, $5) { contexts[$0].arc($1, $2, $3, $4, $5); },
 function($0) { contexts[$0].fill(); },
 function($0, $1) { contexts[$0].lineWidth = $1; },
 function($0, $1, $2, $3, $4) { contexts[$0].fillRect($1, $2, $3, $4); },
 function($0, $1, $2, $3) { contexts[$0].strokeStyle = "rgb(" + $1 + ", " + $2 + ", " + $3 + ")"; },
 function($0, $1, $2, $3) { contexts[$0].fillStyle = "rgb(" + $1 + ", " + $2 + ", " + $3 + ")"; },
 function($0, $1) { contexts[$0].globalAlpha = $1; },
 function($0, $1) { contexts[$0].textBaseline = UTF8ToString($1); },
 function($0, $1) { contexts[$0].font = $1 + "px 'Arial', sans-serif"; },
 function($0, $1, $2, $3) { contexts[$0].fillText(UTF8ToString($1), $2, $3); },
 function() { return window.innerWidth; },
 function() { return window.innerHeight; },
 function() { return window.devicePixelRatio; },
 function() { return isMobile.any; },
 function() { return Date.now(); },
 function() { contexts = {}; renderArea = {}; }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iiiiidd(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iid(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iidd(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_d(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24560;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_main_cpp() } }, { func: function() { __GLOBAL__sub_I_Controls_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_double=true;

  var _emscripten_asm_const_int=true;

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__isLeapYear": __isLeapYear, "_abort": _abort, "_emscripten_asm_const_d": _emscripten_asm_const_d, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iid": _emscripten_asm_const_iid, "_emscripten_asm_const_iidd": _emscripten_asm_const_iidd, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_asm_const_iiiiidd": _emscripten_asm_const_iiiiidd, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_getenv": _getenv, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "_time": _time, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _emscripten_asm_const_d=env._emscripten_asm_const_d;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iid=env._emscripten_asm_const_iid;
  var _emscripten_asm_const_iidd=env._emscripten_asm_const_iidd;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiii=env._emscripten_asm_const_iiiii;
  var _emscripten_asm_const_iiiiidd=env._emscripten_asm_const_iiiiidd;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _getenv=env._getenv;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var _time=env._time;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN6Canvas10initializeENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 $7 = _emscripten_asm_const_iii(0,($0|0),($6|0))|0;
 $8 = _emscripten_asm_const_ii(1,($0|0))|0;
 return;
}
function __ZN6Canvas11fitToWindowENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_ii(1,($0|0))|0;
 return;
}
function __ZN6Canvas5clearENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(48)>>2]|0;
 $2 = HEAP32[(52)>>2]|0;
 $3 = _emscripten_asm_const_iiii(2,($0|0),($1|0),($2|0))|0;
 return;
}
function __ZN6Canvas17updateAspectRatioEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[2]|0;
 $3 = (+($2|0));
 $4 = HEAP32[(12)>>2]|0;
 $5 = (+($4|0));
 $6 = $3 / $5;
 HEAPF64[(16)>>3] = $6;
 $7 = (+($0|0));
 $8 = (+($1|0));
 $9 = $7 / $8;
 HEAPF64[(24)>>3] = $9;
 return;
}
function __ZN6Canvas11updateScaleEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre6 = 0.0, $$pre7 = 0.0, $$sink1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($0|0));
 $3 = HEAP32[2]|0;
 $4 = (+($3|0));
 $5 = $2 / $4;
 HEAPF64[(32)>>3] = $5;
 $6 = (+($1|0));
 $7 = HEAP32[(12)>>2]|0;
 $8 = (+($7|0));
 $9 = $6 / $8;
 HEAPF64[(40)>>3] = $9;
 $10 = +HEAPF64[(24)>>3];
 $11 = +HEAPF64[(16)>>3];
 $12 = $10 > $11;
 if ($12) {
  $$sink1 = (40);$14 = $5;
  label = 3;
 } else {
  $13 = $10 < $11;
  if ($13) {
   $$sink1 = (32);$14 = $9;
   label = 3;
  } else {
   $16 = $5;$20 = $9;
  }
 }
 if ((label|0) == 3) {
  HEAPF64[$$sink1>>3] = $14;
  $$pre6 = +HEAPF64[(32)>>3];
  $$pre7 = +HEAPF64[(40)>>3];
  $16 = $$pre6;$20 = $$pre7;
 }
 $15 = $2 / $16;
 $17 = (+_llvm_round_f64((+$15)));
 $18 = (~~(($17)));
 HEAP32[(48)>>2] = $18;
 $19 = $6 / $20;
 $21 = (+_llvm_round_f64((+$19)));
 $22 = (~~(($21)));
 HEAP32[(52)>>2] = $22;
 return;
}
function __ZN6Canvas10applyScaleENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[2355];
 $2 = _emscripten_asm_const_iidd(3,($0|0),(+$1),(+$1))|0;
 $3 = +HEAPF64[(32)>>3];
 $4 = +HEAPF64[(40)>>3];
 $5 = _emscripten_asm_const_iidd(3,($0|0),(+$3),(+$4))|0;
 return;
}
function __ZN6Canvas8drawLineENS_5LayerEiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = _emscripten_asm_const_ii(4,($0|0))|0;
 $6 = (+($1|0));
 $7 = (+($2|0));
 $8 = _emscripten_asm_const_iidd(5,($0|0),(+$6),(+$7))|0;
 $9 = (+($3|0));
 $10 = (+($4|0));
 $11 = _emscripten_asm_const_iidd(6,($0|0),(+$9),(+$10))|0;
 $12 = _emscripten_asm_const_ii(7,($0|0))|0;
 return;
}
function __ZN6Canvas9beginPathENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_ii(4,($0|0))|0;
 return;
}
function __ZN6Canvas6strokeENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_ii(7,($0|0))|0;
 return;
}
function __ZN6Canvas3arcENS_5LayerEiiidd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3|0)<(1);
 if ($6) {
  return;
 }
 $7 = _emscripten_asm_const_iiiiidd(8,($0|0),($1|0),($2|0),($3|0),(+$4),(+$5))|0;
 return;
}
function __ZN6Canvas4fillENS_5LayerE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_ii(9,($0|0))|0;
 return;
}
function __ZN6Canvas12setLineWidthENS_5LayerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _emscripten_asm_const_iii(10,($0|0),($1|0))|0;
 return;
}
function __ZN6Canvas8fillRectENS_5LayerEiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = _emscripten_asm_const_iiiiii(11,($0|0),($1|0),($2|0),($3|0),($4|0))|0;
 return;
}
function __ZN6Canvas14setStrokeStyleENS_5LayerEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = _emscripten_asm_const_iiiii(12,($0|0),($1|0),($2|0),($3|0))|0;
 return;
}
function __ZN6Canvas12setFillStyleENS_5LayerEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = _emscripten_asm_const_iiiii(13,($0|0),($1|0),($2|0),($3|0))|0;
 return;
}
function __ZN6Canvas14setGlobalAlphaENS_5LayerEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 < 0.0;
 $$0 = $2 ? 0.0 : $1;
 $3 = _emscripten_asm_const_iid(14,($0|0),(+$$0))|0;
 return;
}
function __ZN6Canvas15setTextBaselineENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 $7 = _emscripten_asm_const_iii(15,($0|0),($6|0))|0;
 return;
}
function __ZN6Canvas11setFontSizeENS_5LayerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _emscripten_asm_const_iii(16,($0|0),($1|0))|0;
 return;
}
function __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = $7;
 } else {
  $8 = $1;
 }
 $9 = _emscripten_asm_const_iiiii(17,($0|0),($8|0),($2|0),($3|0))|0;
 return;
}
function __ZN13TouchControls6updateEv($0) {
 $0 = $0|0;
 var $$07$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(18127)>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 40|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $4 = HEAP32[(18132)>>2]|0;
 $5 = HEAP32[(18128)>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 } else {
  $$07$i = 0;$7 = $5;
 }
 while(1) {
  $8 = $7;
  $9 = (($8) + (($$07$i*20)|0)|0);
  __ZN13TouchControls17processTouchPointEPN8Controls10TouchPointE($0,$9);
  $10 = (($$07$i) + 1)|0;
  $11 = HEAP32[(18132)>>2]|0;
  $12 = HEAP32[(18128)>>2]|0;
  $13 = (($11) - ($12))|0;
  $14 = (($13|0) / 20)&-1;
  $15 = ($10>>>0)<($14>>>0);
  if ($15) {
   $$07$i = $10;$7 = $12;
  } else {
   break;
  }
 }
 return;
}
function __ZN13TouchControls4drawEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(18127)>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 __ZN13TouchControls17drawStickBackingsEv($0);
 __ZN13TouchControls13drawLeftStickEv($0);
 __ZN13TouchControls14drawRightStickEv($0);
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(1,1.0);
 return;
}
function __ZN13TouchControls17drawStickBackingsEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(48)>>2]|0;
 $2 = (($1|0) / 6)&-1;
 $3 = HEAP32[(52)>>2]|0;
 $4 = (($3|0) / 6)&-1;
 $5 = ($4*5)|0;
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(1,0.40000000000000002);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(1,96,96,96);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas12setLineWidthENS_5LayerEi(1,15);
 __ZN6Canvas9beginPathENS_5LayerE(1);
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(1,$2,$5,$7,0.0,6.2831853071795862);
 __ZN6Canvas6strokeENS_5LayerE(1);
 __ZN6Canvas4fillENS_5LayerE(1);
 $8 = HEAP32[(48)>>2]|0;
 $9 = (($8|0) / 6)&-1;
 $10 = ($9*5)|0;
 $11 = HEAP32[(52)>>2]|0;
 $12 = (($11|0) / 6)&-1;
 $13 = ($12*5)|0;
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(1,0.40000000000000002);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(1,96,96,96);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas12setLineWidthENS_5LayerEi(1,15);
 __ZN6Canvas9beginPathENS_5LayerE(1);
 $14 = HEAP32[$6>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(1,$10,$13,$14,0.0,6.2831853071795862);
 __ZN6Canvas6strokeENS_5LayerE(1);
 __ZN6Canvas4fillENS_5LayerE(1);
 return;
}
function __ZN13TouchControls13drawLeftStickEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $2 == 0.0;
 if ($3) {
  return;
 }
 $4 = HEAP32[(48)>>2]|0;
 $5 = (($4|0) / 6)&-1;
 $6 = HEAP32[(52)>>2]|0;
 $7 = (($6|0) / 6)&-1;
 $8 = ($7*5)|0;
 $9 = (+($5|0));
 $10 = (+Math_cos((+$2)));
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12|0));
 $14 = $10 * $13;
 $15 = $14 + $9;
 $16 = (~~(($15)));
 $17 = (+($8|0));
 $18 = (+Math_sin((+$2)));
 $19 = $18 * $13;
 $20 = $19 + $17;
 $21 = (~~(($20)));
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(1,0.69999999999999996);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas12setLineWidthENS_5LayerEi(1,15);
 __ZN6Canvas9beginPathENS_5LayerE(1);
 $22 = ((($0)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(1,$16,$21,$23,0.0,6.2831853071795862);
 __ZN6Canvas4fillENS_5LayerE(1);
 return;
}
function __ZN13TouchControls14drawRightStickEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $2 == 0.0;
 if ($3) {
  return;
 }
 $4 = HEAP32[(48)>>2]|0;
 $5 = (($4|0) / 6)&-1;
 $6 = ($5*5)|0;
 $7 = HEAP32[(52)>>2]|0;
 $8 = (($7|0) / 6)&-1;
 $9 = ($8*5)|0;
 $10 = (+($6|0));
 $11 = (+Math_cos((+$2)));
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $11 * $14;
 $16 = $15 + $10;
 $17 = (~~(($16)));
 $18 = (+($9|0));
 $19 = (+Math_sin((+$2)));
 $20 = $19 * $14;
 $21 = $20 + $18;
 $22 = (~~(($21)));
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(1,0.69999999999999996);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(1,0,0,0);
 __ZN6Canvas12setLineWidthENS_5LayerEi(1,15);
 __ZN6Canvas9beginPathENS_5LayerE(1);
 $23 = ((($0)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(1,$17,$22,$24,0.0,6.2831853071795862);
 __ZN6Canvas4fillENS_5LayerE(1);
 return;
}
function __ZN13TouchControls17processTouchPointEPN8Controls10TouchPointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $pow2$i$i = 0.0, $pow29$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = HEAP32[(48)>>2]|0;
 $6 = (+($5|0));
 $7 = +HEAPF64[(32)>>3];
 $8 = $7 * $6;
 $9 = $8 * 0.5;
 $10 = !($9 >= $4);
 if (!($10)) {
  __ZN13TouchControls15updateLeftStickEPN8Controls10TouchPointE($0,$1);
  return;
 }
 $11 = $9 < $4;
 if (!($11)) {
  return;
 }
 $12 = (($5|0) / 6)&-1;
 $13 = ($12*5)|0;
 $14 = HEAP32[(52)>>2]|0;
 $15 = (($14|0) / 6)&-1;
 $16 = ($15*5)|0;
 $17 = ((($1)) + 12|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($13|0));
 $25 = (+($20|0));
 $26 = $25 / $7;
 $27 = $24 - $26;
 $28 = (~~(($27)));
 $29 = (+($16|0));
 $30 = (+($23|0));
 $31 = +HEAPF64[(40)>>3];
 $32 = $30 / $31;
 $33 = $29 - $32;
 $34 = (~~(($33)));
 $35 = (+($34|0));
 $36 = (+($28|0));
 $37 = (+Math_atan2((+$35),(+$36)));
 $38 = $37 + 3.1415926535897931;
 $39 = ((($0)) + 48|0);
 HEAPF64[$39>>3] = $38;
 $40 = $17;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (+($42|0));
 $47 = $46 / $7;
 $48 = $24 - $47;
 $49 = (~~(($48)));
 $50 = (+($45|0));
 $51 = $50 / $31;
 $52 = $29 - $51;
 $53 = (~~(($52)));
 $54 = (+($49|0));
 $pow2$i$i = $54 * $54;
 $55 = (+($53|0));
 $pow29$i$i = $55 * $55;
 $56 = $pow2$i$i + $pow29$i$i;
 $57 = (+Math_sqrt((+$56)));
 $58 = (~~(($57)));
 $59 = ((($0)) + 24|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)<($58|0);
 $$$i$i = $61 ? $60 : $58;
 $62 = ((($0)) + 36|0);
 HEAP32[$62>>2] = $$$i$i;
 HEAPF64[(18144)>>3] = $38;
 return;
}
function __ZN13TouchControls15updateLeftStickEPN8Controls10TouchPointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$sink$i = 0, $$sink$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0;
 var $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $pow2$i = 0.0, $pow29$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(48)>>2]|0;
 $3 = (($2|0) / 6)&-1;
 $4 = HEAP32[(52)>>2]|0;
 $5 = (($4|0) / 6)&-1;
 $6 = ($5*5)|0;
 $7 = ((($1)) + 12|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($3|0));
 $15 = (+($10|0));
 $16 = +HEAPF64[(32)>>3];
 $17 = $15 / $16;
 $18 = $14 - $17;
 $19 = (~~(($18)));
 $20 = (+($6|0));
 $21 = (+($13|0));
 $22 = +HEAPF64[(40)>>3];
 $23 = $21 / $22;
 $24 = $20 - $23;
 $25 = (~~(($24)));
 $26 = (+($25|0));
 $27 = (+($19|0));
 $28 = (+Math_atan2((+$26),(+$27)));
 $29 = $28 + 3.1415926535897931;
 $30 = ((($0)) + 40|0);
 HEAPF64[$30>>3] = $29;
 $31 = $7;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($33|0));
 $38 = $37 / $16;
 $39 = $14 - $38;
 $40 = (~~(($39)));
 $41 = (+($36|0));
 $42 = $41 / $22;
 $43 = $20 - $42;
 $44 = (~~(($43)));
 $45 = (+($40|0));
 $pow2$i = $45 * $45;
 $46 = (+($44|0));
 $pow29$i = $46 * $46;
 $47 = $pow2$i + $pow29$i;
 $48 = (+Math_sqrt((+$47)));
 $49 = (~~(($48)));
 $50 = ((($0)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)<($49|0);
 $$$i = $52 ? $51 : $49;
 $53 = ((($0)) + 32|0);
 HEAP32[$53>>2] = $$$i;
 $54 = (+($$$i|0));
 $55 = (+($51|0));
 $56 = $55 * 0.40000000000000002;
 $57 = $56 > $54;
 $58 = $55 * 0.80000000000000004;
 $59 = $58 > $54;
 $$sink$i = $59 ? 1 : 2;
 $$sink$sink$i = $57 ? 0 : $$sink$i;
 HEAP32[(18152)>>2] = $$sink$sink$i;
 __ZN8Controls19resetMovementInputsEv();
 $60 = +HEAPF64[$30>>3];
 $61 = $60 >= 5.8899999999999997;
 $62 = $60 < 0.39300000000000002;
 $or$cond$i = $61 | $62;
 if ($or$cond$i) {
  HEAP8[(18113)>>0] = 1;
  return;
 }
 $63 = $60 >= 0.39300000000000002;
 $64 = $60 < 1.1779999999999999;
 $or$cond1$i = $63 & $64;
 if ($or$cond1$i) {
  HEAP8[(18113)>>0] = 1;
  HEAP8[(18115)>>0] = 1;
  return;
 }
 $65 = $60 >= 1.1779999999999999;
 $66 = $60 < 1.9630000000000001;
 $or$cond2$i = $65 & $66;
 if ($or$cond2$i) {
  HEAP8[(18115)>>0] = 1;
  return;
 }
 $67 = $60 >= 1.9630000000000001;
 $68 = $60 < 2.7490000000000001;
 $or$cond3$i = $67 & $68;
 if ($or$cond3$i) {
  HEAP8[(18115)>>0] = 1;
  HEAP8[18112] = 1;
  return;
 }
 $69 = $60 >= 2.7490000000000001;
 $70 = $60 < 3.5339999999999998;
 $or$cond4$i = $69 & $70;
 if ($or$cond4$i) {
  HEAP8[18112] = 1;
  return;
 }
 $71 = $60 >= 3.5339999999999998;
 $72 = $60 < 4.3200000000000003;
 $or$cond5$i = $71 & $72;
 if ($or$cond5$i) {
  HEAP8[(18114)>>0] = 1;
  HEAP8[18112] = 1;
  return;
 }
 $73 = $60 >= 4.3200000000000003;
 $74 = $60 < 5.1050000000000004;
 $or$cond6$i = $73 & $74;
 if ($or$cond6$i) {
  HEAP8[(18114)>>0] = 1;
  return;
 }
 $75 = $60 >= 5.1050000000000004;
 $76 = $60 < 5.8899999999999997;
 $or$cond7$i = $75 & $76;
 if (!($or$cond7$i)) {
  return;
 }
 HEAP8[(18114)>>0] = 1;
 HEAP8[(18113)>>0] = 1;
 return;
}
function __ZN13TouchControlsC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 2;
 HEAP32[$0>>2] = (1592);
 $6 = ((($0)) + 24|0);
 HEAP32[$6>>2] = 100;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 50;
 $8 = ((($0)) + 32|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;
 return;
}
function __ZN11RenderTimerC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5TimerC2Ev($0);
 return;
}
function __ZN11RenderTimer5startEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Timer5startEv($0);
 return;
}
function __ZN11RenderTimer4stopEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Timer4stopEv($0);
 return;
}
function __ZN11RenderTimer5printEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)<(60);
 if ($6) {
  return;
 }
 __ZN5Timer5printEv($0);
 __ZN5Timer5resetEv($0);
 return;
}
function __ZN4GameC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZN12ActivePlayerC2Ev($1);
 $2 = ((($0)) + 96|0);
 __ZN3HudC2Ev($2);
 $3 = ((($0)) + 108|0);
 __ZN6CameraC2Ev($3);
 $4 = ((($0)) + 136|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 140|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 144|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZN4Game10initializeEv($0) {
 $0 = $0|0;
 var $$03$i = 0, $$pre$i$i$i$i = 0, $$pre$phi9$i$i$i$iZ2D = 0, $$pre8$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $1 = sp + 164|0;
 $2 = sp + 64|0;
 $3 = sp + 152|0;
 $4 = sp + 192|0;
 $5 = sp;
 __ZN7Browser10initializeEv();
 $6 = HEAP8[18848]|0;
 $7 = ($6<<24>>24)!=(0);
 __ZN8Controls10initializeEb($7);
 $8 = ((($0)) + 140|0);
 $9 = ((($0)) + 144|0);
 $10 = ((($0)) + 136|0);
 $$03$i = 0;
 while(1) {
  __ZN6PlayerC2Ev($5);
  $11 = HEAP32[$8>>2]|0;
  $12 = HEAP32[$9>>2]|0;
  $13 = ($11|0)==($12|0);
  if ($13) {
   __ZNSt3__26vectorI6PlayerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($10,$5);
  } else {
   dest=$11; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $14 = HEAP32[$8>>2]|0;
   $15 = ((($14)) + 64|0);
   HEAP32[$8>>2] = $15;
  }
  $16 = (($$03$i) + 1)|0;
  $exitcond$i = ($16|0)==(64);
  if ($exitcond$i) {
   break;
  } else {
   $$03$i = $16;
  }
 }
 __ZN3HudC2Ev($3);
 $17 = ((($0)) + 96|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 $$pre$i$i$i$i = ((($0)) + 100|0);
 if ($19) {
  $$pre8$i$i$i$i = ((($0)) + 104|0);
  $$pre$phi9$i$i$i$iZ2D = $$pre8$i$i$i$i;
 } else {
  $20 = HEAP32[$$pre$i$i$i$i>>2]|0;
  $21 = ($20|0)==($18|0);
  if (!($21)) {
   $scevgep$i$i$i$i$i$i$i$i = ((($20)) + -4|0);
   $22 = $scevgep$i$i$i$i$i$i$i$i;
   $23 = $18;
   $24 = (($22) - ($23))|0;
   $25 = $24 >>> 2;
   $26 = $25 ^ -1;
   $scevgep4$i$i$i$i$i$i$i$i = (($20) + ($26<<2)|0);
   HEAP32[$$pre$i$i$i$i>>2] = $scevgep4$i$i$i$i$i$i$i$i;
  }
  __ZdlPv($18);
  $27 = ((($0)) + 104|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$$pre$i$i$i$i>>2] = 0;
  HEAP32[$17>>2] = 0;
  $$pre$phi9$i$i$i$iZ2D = $27;
 }
 $28 = HEAP32[$3>>2]|0;
 HEAP32[$17>>2] = $28;
 $29 = ((($3)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$$pre$i$i$i$i>>2] = $30;
 $31 = ((($3)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$$pre$phi9$i$i$i$iZ2D>>2] = $32;
 __ZN12ActivePlayerC2Ev($2);
 $33 = ((($0)) + 8|0);
 dest=$33; src=$2; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN6CameraC2Ev($1);
 $34 = ((($0)) + 108|0);
 ;HEAP32[$34>>2]=HEAP32[$1>>2]|0;HEAP32[$34+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$34+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$34+20>>2]=HEAP32[$1+20>>2]|0;HEAP32[$34+24>>2]=HEAP32[$1+24>>2]|0;
 $35 = ((($0)) + 116|0);
 HEAP32[$35>>2] = $33;
 $36 = ((($0)) + 88|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI6PlayerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 6;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(67108863);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 6;
 $13 = ($12>>>0)<(33554431);
 $14 = $11 >> 5;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 67108863;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $22 = 0;$30 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(67108863);
   if ($17) {
    $18 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($18,11706);
    HEAP32[$18>>2] = (9316);
    ___cxa_throw(($18|0),(1520|0),(335|0));
    // unreachable;
   } else {
    $19 = $$sroa$speculated$$i << 6;
    $20 = (__Znwj($19)|0);
    $22 = $20;$30 = $20;
    break;
   }
  }
 } while(0);
 $21 = (($22) + ($6<<6)|0);
 $23 = (($22) + ($$sroa$speculated$$i<<6)|0);
 $24 = $23;
 dest=$21; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $25 = ((($21)) + 64|0);
 $26 = $25;
 $27 = $22;
 $28 = ($5|0)>(0);
 if ($28) {
  $29 = $4;
  _memcpy(($30|0),($29|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $27;
 HEAP32[$2>>2] = $26;
 HEAP32[$9>>2] = $24;
 $31 = ($4|0)==(0);
 if ($31) {
  return;
 }
 $32 = $4;
 __ZdlPv($32);
 return;
}
function __ZN4Game5clearEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7Browser11clearScreenEv();
 return;
}
function __ZN4Game6updateEv($0) {
 $0 = $0|0;
 var $$sroa$08$012$i$i = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 __ZN3Hud6updateEv($1);
 $2 = ((($0)) + 8|0);
 __ZN12ActivePlayer6updateEv($2);
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 140|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if (!($7)) {
  $$sroa$08$012$i$i = $4;
  while(1) {
   __ZN6Player6updateEv($$sroa$08$012$i$i);
   $8 = ((($$sroa$08$012$i$i)) + 64|0);
   $9 = ($8|0)==($6|0);
   if ($9) {
    break;
   } else {
    $$sroa$08$012$i$i = $8;
   }
  }
 }
 $10 = ((($0)) + 108|0);
 __ZN6Camera6updateEv($10);
 __ZN7Browser6updateEv();
 return;
}
function __ZN4Game4drawEv($0) {
 $0 = $0|0;
 var $$sroa$08$012$i$i = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 __ZN3Map4drawER6Camera($0,$1);
 $2 = ((($0)) + 8|0);
 __ZN12ActivePlayer4drawER6Camera($2,$1);
 $3 = ((($0)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 140|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $10 = ((($0)) + 96|0);
  __ZN3Hud4drawEv($10);
  return;
 } else {
  $$sroa$08$012$i$i = $4;
 }
 while(1) {
  __ZN6Player4drawER6Camera($$sroa$08$012$i$i,$1);
  $8 = ((($$sroa$08$012$i$i)) + 64|0);
  $9 = ($8|0)==($6|0);
  if ($9) {
   break;
  } else {
   $$sroa$08$012$i$i = $8;
  }
 }
 $10 = ((($0)) + 96|0);
 __ZN3Hud4drawEv($10);
 return;
}
function __ZN7Browser10initializeEv() {
 var $$0$i$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 12|0;
 $1 = sp;
 $2 = _emscripten_asm_const_i(18)|0;
 HEAP32[4706] = $2;
 $3 = _emscripten_asm_const_i(19)|0;
 HEAP32[4708] = $3;
 $4 = +_emscripten_asm_const_d(20);
 $5 = $4 < 1.0;
 $$0$i$i = $5 ? 1.0 : $4;
 HEAPF64[2355] = $$0$i$i;
 $6 = _emscripten_asm_const_i(21)|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 HEAP8[18848] = $8;
 $9 = ((($0)) + 11|0);
 HEAP8[$9>>0] = 10;
 dest=$0; src=11413; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $10 = ((($0)) + 10|0);
 HEAP8[$10>>0] = 0;
 __ZN6Canvas10initializeENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(0,$0);
 $11 = HEAP8[$9>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  __ZdlPv($13);
 }
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $14 = ((($1)) + 11|0);
 HEAP8[$14>>0] = 9;
 dest=$1; src=11424; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $15 = ((($1)) + 9|0);
 HEAP8[$15>>0] = 0;
 __ZN6Canvas10initializeENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(1,$1);
 $16 = HEAP8[$14>>0]|0;
 $17 = ($16<<24>>24)<(0);
 if ($17) {
  $18 = HEAP32[$1>>2]|0;
  __ZdlPv($18);
 }
 $19 = _emscripten_asm_const_i(18)|0;
 HEAP32[4706] = $19;
 $20 = _emscripten_asm_const_i(19)|0;
 HEAP32[4708] = $20;
 __ZN6Canvas11fitToWindowENS_5LayerE(0);
 __ZN6Canvas11fitToWindowENS_5LayerE(1);
 $21 = HEAP32[4706]|0;
 $22 = HEAP32[4708]|0;
 __ZN6Canvas17updateAspectRatioEii($21,$22);
 $23 = HEAP32[4706]|0;
 $24 = HEAP32[4708]|0;
 __ZN6Canvas11updateScaleEii($23,$24);
 __ZN6Canvas10applyScaleENS_5LayerE(0);
 __ZN6Canvas10applyScaleENS_5LayerE(1);
 STACKTOP = sp;return;
}
function __ZN7Browser6updateEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4714]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = (($0) + -1)|0;
 HEAP32[4714] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  return;
 }
 __ZN7Browser6resizeEv();
 return;
}
function __ZN7Browser6resizeEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_i(18)|0;
 $1 = ($0|0)<(0);
 if ($1) {
  return;
 }
 $2 = _emscripten_asm_const_i(19)|0;
 $3 = ($2|0)<(0);
 if ($3) {
  return;
 }
 $4 = _emscripten_asm_const_i(18)|0;
 HEAP32[4706] = $4;
 $5 = _emscripten_asm_const_i(19)|0;
 HEAP32[4708] = $5;
 __ZN6Canvas11fitToWindowENS_5LayerE(0);
 __ZN6Canvas11fitToWindowENS_5LayerE(1);
 $6 = HEAP32[4706]|0;
 $7 = HEAP32[4708]|0;
 __ZN6Canvas17updateAspectRatioEii($6,$7);
 $8 = HEAP32[4706]|0;
 $9 = HEAP32[4708]|0;
 __ZN6Canvas11updateScaleEii($8,$9);
 __ZN6Canvas10applyScaleENS_5LayerE(0);
 __ZN6Canvas10applyScaleENS_5LayerE(1);
 return;
}
function __ZN7Browser11clearScreenEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6Canvas5clearENS_5LayerE(0);
 __ZN6Canvas5clearENS_5LayerE(1);
 return;
}
function _orientationchange() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4714] = 120;
 __ZN7Browser6resizeEv();
 return;
}
function _onresize() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4714] = 120;
 __ZN7Browser6resizeEv();
 return;
}
function __ZN5TimerC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 return;
}
function __ZN5Timer5startEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_i(22)|0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN5Timer4stopEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = _emscripten_asm_const_i(22)|0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) - ($5))|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1);
  STACKTOP = sp;return;
 } else {
  HEAP32[$8>>2] = $6;
  $12 = ((($8)) + 4|0);
  HEAP32[$7>>2] = $12;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $22 = 0;$31 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if ($17) {
    $18 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($18,11706);
    HEAP32[$18>>2] = (9316);
    ___cxa_throw(($18|0),(1520|0),(335|0));
    // unreachable;
   } else {
    $19 = $$sroa$speculated$$i << 2;
    $20 = (__Znwj($19)|0);
    $22 = $20;$31 = $20;
    break;
   }
  }
 } while(0);
 $21 = (($22) + ($6<<2)|0);
 $23 = (($22) + ($$sroa$speculated$$i<<2)|0);
 $24 = $23;
 $25 = HEAP32[$1>>2]|0;
 HEAP32[$21>>2] = $25;
 $26 = ((($21)) + 4|0);
 $27 = $26;
 $28 = $22;
 $29 = ($5|0)>(0);
 if ($29) {
  $30 = $4;
  _memcpy(($31|0),($30|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $28;
 HEAP32[$2>>2] = $27;
 HEAP32[$9>>2] = $24;
 $32 = ($4|0)==(0);
 if ($32) {
  return;
 }
 $33 = $4;
 __ZdlPv($33);
 return;
}
function __ZN5Timer5printEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Timer20printAverageIntervalEv($0);
 return;
}
function __ZN5Timer20printAverageIntervalEv($0) {
 $0 = $0|0;
 var $$0$lcssa$i = 0.0, $$01$i = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = $6;
 $9 = $4;
 if ($7) {
  $$0$lcssa$i = 0.0;
 } else {
  $$01$i = 0.0;$11 = $4;
  while(1) {
   $10 = HEAP32[$11>>2]|0;
   $12 = (+($10|0));
   $13 = $$01$i + $12;
   $14 = ((($11)) + 4|0);
   $15 = ($14|0)==($6|0);
   if ($15) {
    $$0$lcssa$i = $13;
    break;
   } else {
    $$01$i = $13;$11 = $14;
   }
  }
 }
 $16 = (($8) - ($9))|0;
 $17 = $16 >> 2;
 $18 = (+($17>>>0));
 $19 = $$0$lcssa$i / $18;
 $20 = (~~(($19)));
 $21 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(19684,11457,18)|0);
 __ZNSt3__29to_stringEi($3,$20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($2,$3,0,5,$3);
 $22 = ((($2)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($2)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $23&255;
 $29 = $24 ? $25 : $2;
 $30 = $24 ? $27 : $28;
 $31 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($21,$29,$30)|0);
 $32 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($31,11476,2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + -12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($32) + ($35)|0);
 __ZNKSt3__28ios_base6getlocEv($1,$36);
 $37 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,20556)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iii[$40 & 511]($37,10)|0);
 __ZNSt3__26localeD2Ev($1);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($32,$41)|0);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($32)|0);
 $42 = HEAP8[$22>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if ($43) {
  $44 = HEAP32[$2>>2]|0;
  __ZdlPv($44);
 }
 $45 = ((($3)) + 11|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)<(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$3>>2]|0;
 __ZdlPv($48);
 STACKTOP = sp;return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($4,$0);
 $6 = HEAP8[$4>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
  STACKTOP = sp;return ($0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + -12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($0) + ($10)|0);
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$5>>2] = $13;
 $14 = HEAP32[$9>>2]|0;
 $15 = (($0) + ($14)|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($1) + ($2)|0);
 $19 = ((($15)) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(-1);
 if ($21) {
  __ZNKSt3__28ios_base6getlocEv($3,$15);
  $22 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,20556)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iii[$25 & 511]($22,32)|0);
  __ZNSt3__26localeD2Ev($3);
  $27 = $26 << 24 >> 24;
  HEAP32[$19>>2] = $27;
  $29 = $27;
 } else {
  $29 = $20;
 }
 $28 = $29&255;
 $30 = $17 & 176;
 $31 = ($30|0)==(32);
 $32 = $31 ? $18 : $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
 $33 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$1,$32,$18,$15,$28)|0);
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
  STACKTOP = sp;return ($0|0);
 }
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($35)) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($0) + ($37)|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 | 5;
 __ZNSt3__28ios_base5clearEj($38,$41);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$016$i$i = 0, $$pre$phi47Z2D = 0, $$pre$phi49Z2D = 0, $$pre46 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;return ($$sroa$0$2|0);
 }
 $9 = $3;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = ((($4)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>($11|0);
 $15 = (($13) - ($11))|0;
 $$0 = $14 ? $15 : 0;
 $16 = $2;
 $17 = (($16) - ($10))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 511]($7,$1,$17)|0);
  $23 = ($22|0)==($17|0);
  if (!($23)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 $24 = ($$0|0)>(0);
 do {
  if ($24) {
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   $25 = ($$0>>>0)<(11);
   if ($25) {
    $32 = $$0&255;
    $33 = ((($6)) + 11|0);
    HEAP8[$33>>0] = $32;
    $$016$i$i = $6;$$pre$phi47Z2D = $33;$$pre$phi49Z2D = $6;
   } else {
    $26 = (($$0) + 16)|0;
    $27 = $26 & -16;
    $28 = (__Znwj($27)|0);
    HEAP32[$6>>2] = $28;
    $29 = $27 | -2147483648;
    $30 = ((($6)) + 8|0);
    HEAP32[$30>>2] = $29;
    $31 = ((($6)) + 4|0);
    HEAP32[$31>>2] = $$0;
    $$pre46 = ((($6)) + 11|0);
    $$016$i$i = $28;$$pre$phi47Z2D = $$pre46;$$pre$phi49Z2D = $6;
   }
   _memset(($$016$i$i|0),($5|0),($$0|0))|0;
   $34 = (($$016$i$i) + ($$0)|0);
   HEAP8[$34>>0] = 0;
   $35 = HEAP8[$$pre$phi47Z2D>>0]|0;
   $36 = ($35<<24>>24)<(0);
   $37 = HEAP32[$$pre$phi49Z2D>>2]|0;
   $38 = $36 ? $37 : $6;
   $39 = HEAP32[$7>>2]|0;
   $40 = ((($39)) + 48|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 511]($7,$38,$$0)|0);
   $43 = ($42|0)==($$0|0);
   if ($43) {
    $47 = HEAP8[$$pre$phi47Z2D>>0]|0;
    $48 = ($47<<24>>24)<(0);
    if ($48) {
     $49 = HEAP32[$$pre$phi49Z2D>>2]|0;
     __ZdlPv($49);
    }
    break;
   }
   HEAP32[$0>>2] = 0;
   $44 = HEAP8[$$pre$phi47Z2D>>0]|0;
   $45 = ($44<<24>>24)<(0);
   if ($45) {
    $46 = HEAP32[$$pre$phi49Z2D>>2]|0;
    __ZdlPv($46);
   }
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 } while(0);
 $50 = (($9) - ($16))|0;
 $51 = ($50|0)>(0);
 if ($51) {
  $52 = HEAP32[$7>>2]|0;
  $53 = ((($52)) + 48|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_iiii[$54 & 511]($7,$2,$50)|0);
  $56 = ($55|0)==($50|0);
  if (!($56)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 HEAP32[$12>>2] = 0;
 $$sroa$0$2 = $7;
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN5Timer5resetEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  return;
 }
 $scevgep$i$i$i = ((($5)) + -4|0);
 $7 = $scevgep$i$i$i;
 $8 = $3;
 $9 = (($7) - ($8))|0;
 $10 = $9 >>> 2;
 $11 = $10 ^ -1;
 $scevgep4$i$i$i = (($5) + ($11<<2)|0);
 HEAP32[$4>>2] = $scevgep4$i$i$i;
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4GameC2Ev(17960);
 __ZN11RenderTimerC2Ev(18864);
 return;
}
function __Z8gameLoopv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11RenderTimer5startEv(18864);
 __ZN4Game5clearEv(17960);
 __ZN4Game6updateEv(17960);
 __ZN4Game4drawEv(17960);
 __ZN11RenderTimer4stopEv(18864);
 __ZN11RenderTimer5printEv(18864);
 return;
}
function _main() {
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $0 = sp;
 $1 = (_time((0|0))|0);
 _srand($1);
 $2 = _emscripten_asm_const_i(23)|0;
 __ZN4GameC2Ev($0);
 dest=17960; src=$0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[(18056)>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[(18060)>>2]|0;
  $7 = ($6|0)==($4|0);
  if (!($7)) {
   $scevgep$i$i$i$i$i$i$i$i = ((($6)) + -4|0);
   $8 = $scevgep$i$i$i$i$i$i$i$i;
   $9 = $4;
   $10 = (($8) - ($9))|0;
   $11 = $10 >>> 2;
   $12 = $11 ^ -1;
   $scevgep4$i$i$i$i$i$i$i$i = (($6) + ($12<<2)|0);
   HEAP32[(18060)>>2] = $scevgep4$i$i$i$i$i$i$i$i;
  }
  __ZdlPv($4);
  HEAP32[(18064)>>2] = 0;
  HEAP32[(18060)>>2] = 0;
  HEAP32[(18056)>>2] = 0;
 }
 $13 = HEAP32[$3>>2]|0;
 HEAP32[(18056)>>2] = $13;
 $14 = ((($0)) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[(18060)>>2] = $15;
 $16 = ((($0)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[(18064)>>2] = $17;
 HEAP32[$16>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$3>>2] = 0;
 $18 = ((($0)) + 108|0);
 ;HEAP32[(18068)>>2]=HEAP32[$18>>2]|0;HEAP32[(18068)+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[(18068)+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[(18068)+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[(18068)+16>>2]=HEAP32[$18+16>>2]|0;HEAP32[(18068)+20>>2]=HEAP32[$18+20>>2]|0;HEAP32[(18068)+24>>2]=HEAP32[$18+24>>2]|0;
 $19 = ((($0)) + 136|0);
 $20 = HEAP32[(18096)>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = HEAP32[(18100)>>2]|0;
  $23 = ($22|0)==($20|0);
  if (!($23)) {
   $scevgep$i$i$i$i$i$i$i = ((($22)) + -64|0);
   $24 = $scevgep$i$i$i$i$i$i$i;
   $25 = $20;
   $26 = (($24) - ($25))|0;
   $27 = $26 >>> 6;
   $28 = $27 ^ -1;
   $scevgep4$i$i$i$i$i$i$i = (($22) + ($28<<6)|0);
   HEAP32[(18100)>>2] = $scevgep4$i$i$i$i$i$i$i;
  }
  __ZdlPv($20);
  HEAP32[(18104)>>2] = 0;
  HEAP32[(18100)>>2] = 0;
  HEAP32[(18096)>>2] = 0;
 }
 $29 = HEAP32[$19>>2]|0;
 HEAP32[(18096)>>2] = $29;
 $30 = ((($0)) + 140|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[(18100)>>2] = $31;
 $32 = ((($0)) + 144|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[(18104)>>2] = $33;
 HEAP32[$32>>2] = 0;
 HEAP32[$30>>2] = 0;
 HEAP32[$19>>2] = 0;
 $$phi$trans$insert = ((($0)) + 96|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $34 = ($$pre|0)==(0|0);
 if ($34) {
  __ZN4Game10initializeEv(17960);
  _emscripten_set_main_loop((343|0),0,1);
  STACKTOP = sp;return 0;
 }
 $35 = HEAP32[$14>>2]|0;
 $36 = ($35|0)==($$pre|0);
 if (!($36)) {
  $scevgep$i$i$i$i$i = ((($35)) + -4|0);
  $37 = $scevgep$i$i$i$i$i;
  $38 = $$pre;
  $39 = (($37) - ($38))|0;
  $40 = $39 >>> 2;
  $41 = $40 ^ -1;
  $scevgep4$i$i$i$i$i = (($35) + ($41<<2)|0);
  HEAP32[$14>>2] = $scevgep4$i$i$i$i$i;
 }
 __ZdlPv($$pre);
 __ZN4Game10initializeEv(17960);
 _emscripten_set_main_loop((343|0),0,1);
 STACKTOP = sp;return 0;
}
function __ZN3MapC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3Map6updateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3Map4drawER6Camera($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3Map13drawGridLinesER6Camera($0,$1);
 __ZN3Map14drawBackgroundER6Camera($0,$1);
 return;
}
function __ZN3Map13drawGridLinesER6Camera($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01215 = 0, $$01423 = 0, $$byval_copy = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 __ZN6Canvas12setLineWidthENS_5LayerEi(0,1);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(0,199,199,198);
 HEAP32[$2>>2] = 0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 __ZN6Camera19getLocationOnScreenE8Location($3,$1,$$byval_copy);
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1000)|0;
 $9 = (($5) + -2000)|0;
 $$01215 = $9;$18 = $7;$19 = $8;
 while(1) {
  $17 = (($18) + 3000)|0;
  __ZN6Canvas8drawLineENS_5LayerEiiii(0,$$01215,$19,$$01215,$17);
  $20 = (($$01215) + 20)|0;
  $11 = HEAP32[$3>>2]|0;
  $21 = (($11) + 3980)|0;
  $22 = ($$01215|0)<($21|0);
  $23 = HEAP32[$6>>2]|0;
  $13 = (($23) + -1000)|0;
  if ($22) {
   $$01215 = $20;$18 = $23;$19 = $13;
  } else {
   break;
  }
 }
 $10 = (($11) + -2000)|0;
 $12 = (($11) + 4000)|0;
 __ZN6Canvas8drawLineENS_5LayerEiiii(0,$10,$13,$12,$13);
 $14 = HEAP32[$6>>2]|0;
 $15 = (($14) + 2980)|0;
 $16 = ($13|0)<($15|0);
 if ($16) {
  $$01423 = $13;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $24 = (($$01423) + 20)|0;
  $$pre = HEAP32[$3>>2]|0;
  $25 = (($$pre) + -2000)|0;
  $26 = (($$pre) + 4000)|0;
  __ZN6Canvas8drawLineENS_5LayerEiiii(0,$25,$24,$26,$24);
  $27 = HEAP32[$6>>2]|0;
  $28 = (($27) + 2960)|0;
  $29 = ($$01423|0)<($28|0);
  if ($29) {
   $$01423 = $24;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3Map14drawBackgroundER6Camera($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 HEAP32[$2>>2] = 0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 __ZN6Camera19getLocationOnScreenE8Location($3,$1,$$byval_copy);
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(0,0.69999999999999996);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(0,187,187,187);
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + -2000)|0;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1000)|0;
 __ZN6Canvas8fillRectENS_5LayerEiiii(0,$6,$9,6000,4000);
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(0,0.40000000000000002);
 __ZN6Canvas12setFillStyleENS_5LayerEiii(0,245,245,245);
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 __ZN6Canvas8fillRectENS_5LayerEiiii(0,$10,$11,2000,2000);
 __ZN6Canvas14setGlobalAlphaENS_5LayerEd(0,1.0);
 STACKTOP = sp;return;
}
function __ZN6CameraC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 1366;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 768;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 return;
}
function __ZN6Camera6updateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($6) - ($11))|0;
 HEAP32[$0>>2] = $12;
 $13 = $3;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) - ($20))|0;
 $22 = ((($0)) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[(48)>>2]|0;
 $24 = (($23|0) / 2)&-1;
 HEAP32[$10>>2] = $24;
 $25 = HEAP32[(52)>>2]|0;
 $26 = (($25|0) / 2)&-1;
 HEAP32[$19>>2] = $26;
 return;
}
function __ZN6Camera19getLocationOnScreenE8Location($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) - ($10))|0;
 HEAP32[$6>>2] = $11;
 return;
}
function __ZN14DebugVariables6updateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14DebugVariables4drawEv($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre90 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $1 = sp + 312|0;
 $2 = sp + 300|0;
 $3 = sp + 288|0;
 $4 = sp + 276|0;
 $5 = sp + 264|0;
 $6 = sp + 252|0;
 $7 = sp + 240|0;
 $8 = sp + 228|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 192|0;
 $12 = sp + 180|0;
 $13 = sp + 168|0;
 $14 = sp + 156|0;
 $15 = sp + 144|0;
 $16 = sp + 132|0;
 $17 = sp + 120|0;
 $18 = sp + 108|0;
 $19 = sp + 96|0;
 $20 = sp + 84|0;
 $21 = sp + 72|0;
 $22 = sp + 60|0;
 $23 = sp + 48|0;
 $24 = sp + 36|0;
 $25 = sp + 24|0;
 $26 = sp + 12|0;
 $27 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $28 = ((($1)) + 11|0);
 HEAP8[$28>>0] = 6;
 ;HEAP8[$1>>0]=HEAP8[11511>>0]|0;HEAP8[$1+1>>0]=HEAP8[11511+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[11511+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[11511+3>>0]|0;HEAP8[$1+4>>0]=HEAP8[11511+4>>0]|0;HEAP8[$1+5>>0]=HEAP8[11511+5>>0]|0;
 $29 = ((($1)) + 6|0);
 HEAP8[$29>>0] = 0;
 __ZN6Canvas15setTextBaselineENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(1,$1);
 $30 = HEAP8[$28>>0]|0;
 $31 = ($30<<24>>24)<(0);
 if ($31) {
  $32 = HEAP32[$1>>2]|0;
  __ZdlPv($32);
 }
 __ZN6Canvas12setFillStyleENS_5LayerEiii(1,104,104,104);
 __ZN6Canvas11setFontSizeENS_5LayerEi(1,18);
 $33 = HEAP32[4706]|0;
 __ZNSt3__29to_stringEi($3,$33);
 $34 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($3,0,11518)|0);
 ;HEAP32[$2>>2]=HEAP32[$34>>2]|0;HEAP32[$2+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$34+8>>2]|0;
 ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$2,4,13);
 $35 = ((($2)) + 11|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)<(0);
 if ($37) {
  $38 = HEAP32[$2>>2]|0;
  __ZdlPv($38);
 }
 $39 = ((($3)) + 11|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)<(0);
 if ($41) {
  $42 = HEAP32[$3>>2]|0;
  __ZdlPv($42);
 }
 $43 = HEAP32[4708]|0;
 __ZNSt3__29to_stringEi($5,$43);
 $44 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($5,0,11533)|0);
 ;HEAP32[$4>>2]=HEAP32[$44>>2]|0;HEAP32[$4+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$44+8>>2]|0;
 ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$4,4,30);
 $45 = ((($4)) + 11|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)<(0);
 if ($47) {
  $48 = HEAP32[$4>>2]|0;
  __ZdlPv($48);
 }
 $49 = ((($5)) + 11|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)<(0);
 if ($51) {
  $52 = HEAP32[$5>>2]|0;
  __ZdlPv($52);
 }
 $53 = HEAP32[(48)>>2]|0;
 __ZNSt3__29to_stringEi($7,$53);
 $54 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($7,0,11549)|0);
 ;HEAP32[$6>>2]=HEAP32[$54>>2]|0;HEAP32[$6+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$54+8>>2]|0;
 ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$6,4,47);
 $55 = ((($6)) + 11|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56<<24>>24)<(0);
 if ($57) {
  $58 = HEAP32[$6>>2]|0;
  __ZdlPv($58);
 }
 $59 = ((($7)) + 11|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = ($60<<24>>24)<(0);
 if ($61) {
  $62 = HEAP32[$7>>2]|0;
  __ZdlPv($62);
 }
 $63 = HEAP32[(52)>>2]|0;
 __ZNSt3__29to_stringEi($9,$63);
 $64 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($9,0,11563)|0);
 ;HEAP32[$8>>2]=HEAP32[$64>>2]|0;HEAP32[$8+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$64+8>>2]|0;
 ;HEAP32[$64>>2]=0|0;HEAP32[$64+4>>2]=0|0;HEAP32[$64+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$8,4,64);
 $65 = ((($8)) + 11|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)<(0);
 if ($67) {
  $68 = HEAP32[$8>>2]|0;
  __ZdlPv($68);
 }
 $69 = ((($9)) + 11|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)<(0);
 if ($71) {
  $72 = HEAP32[$9>>2]|0;
  __ZdlPv($72);
 }
 $73 = +HEAPF64[(32)>>3];
 __ZNSt3__29to_stringEd($11,$73);
 $74 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($11,0,11578)|0);
 ;HEAP32[$10>>2]=HEAP32[$74>>2]|0;HEAP32[$10+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$74+8>>2]|0;
 ;HEAP32[$74>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$10,4,81);
 $75 = ((($10)) + 11|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = ($76<<24>>24)<(0);
 if ($77) {
  $78 = HEAP32[$10>>2]|0;
  __ZdlPv($78);
 }
 $79 = ((($11)) + 11|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = ($80<<24>>24)<(0);
 if ($81) {
  $82 = HEAP32[$11>>2]|0;
  __ZdlPv($82);
 }
 $83 = +HEAPF64[(40)>>3];
 __ZNSt3__29to_stringEd($13,$83);
 $84 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($13,0,11588)|0);
 ;HEAP32[$12>>2]=HEAP32[$84>>2]|0;HEAP32[$12+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$84+8>>2]|0;
 ;HEAP32[$84>>2]=0|0;HEAP32[$84+4>>2]=0|0;HEAP32[$84+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$12,4,98);
 $85 = ((($12)) + 11|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = ($86<<24>>24)<(0);
 if ($87) {
  $88 = HEAP32[$12>>2]|0;
  __ZdlPv($88);
 }
 $89 = ((($13)) + 11|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = ($90<<24>>24)<(0);
 if ($91) {
  $92 = HEAP32[$13>>2]|0;
  __ZdlPv($92);
 }
 $93 = +HEAPF64[2355];
 __ZNSt3__29to_stringEd($15,$93);
 $94 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($15,0,11598)|0);
 ;HEAP32[$14>>2]=HEAP32[$94>>2]|0;HEAP32[$14+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$94+8>>2]|0;
 ;HEAP32[$94>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$14,4,115);
 $95 = ((($14)) + 11|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ($96<<24>>24)<(0);
 if ($97) {
  $98 = HEAP32[$14>>2]|0;
  __ZdlPv($98);
 }
 $99 = ((($15)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 if ($101) {
  $102 = HEAP32[$15>>2]|0;
  __ZdlPv($102);
 }
 $103 = HEAP8[18848]|0;
 $104 = $103&255;
 __ZNSt3__29to_stringEi($17,$104);
 $105 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($17,0,11612)|0);
 ;HEAP32[$16>>2]=HEAP32[$105>>2]|0;HEAP32[$16+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$105+8>>2]|0;
 ;HEAP32[$105>>2]=0|0;HEAP32[$105+4>>2]=0|0;HEAP32[$105+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$16,4,132);
 $106 = ((($16)) + 11|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = ($107<<24>>24)<(0);
 if ($108) {
  $109 = HEAP32[$16>>2]|0;
  __ZdlPv($109);
 }
 $110 = ((($17)) + 11|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = ($111<<24>>24)<(0);
 if ($112) {
  $113 = HEAP32[$17>>2]|0;
  __ZdlPv($113);
 }
 $114 = HEAP32[(18132)>>2]|0;
 $115 = HEAP32[(18128)>>2]|0;
 $116 = ($114|0)==($115|0);
 if ($116) {
  $153 = $114;$154 = $114;
 } else {
  ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
  $117 = ((($18)) + 11|0);
  HEAP8[$117>>0] = 9;
  dest=$18; src=11623; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $118 = ((($18)) + 9|0);
  HEAP8[$118>>0] = 0;
  __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$18,200,13);
  $119 = HEAP8[$117>>0]|0;
  $120 = ($119<<24>>24)<(0);
  if ($120) {
   $121 = HEAP32[$18>>2]|0;
   __ZdlPv($121);
  }
  $122 = HEAP32[(18132)>>2]|0;
  $123 = HEAP32[(18128)>>2]|0;
  $124 = ($122|0)==($123|0);
  if ($124) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv((18128));
   // unreachable;
  }
  $125 = $123;
  $126 = ((($125)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  __ZNSt3__29to_stringEi($20,$127);
  $128 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($20,0,11633)|0);
  ;HEAP32[$19>>2]=HEAP32[$128>>2]|0;HEAP32[$19+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$128+8>>2]|0;
  ;HEAP32[$128>>2]=0|0;HEAP32[$128+4>>2]=0|0;HEAP32[$128+8>>2]=0|0;
  __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$19,200,30);
  $129 = ((($19)) + 11|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ($130<<24>>24)<(0);
  if ($131) {
   $132 = HEAP32[$19>>2]|0;
   __ZdlPv($132);
  }
  $133 = ((($20)) + 11|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = ($134<<24>>24)<(0);
  if ($135) {
   $136 = HEAP32[$20>>2]|0;
   __ZdlPv($136);
  }
  $137 = HEAP32[(18132)>>2]|0;
  $138 = HEAP32[(18128)>>2]|0;
  $139 = ($137|0)==($138|0);
  if ($139) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv((18128));
   // unreachable;
  }
  $140 = $138;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  __ZNSt3__29to_stringEi($22,$142);
  $143 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($22,0,11644)|0);
  ;HEAP32[$21>>2]=HEAP32[$143>>2]|0;HEAP32[$21+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$143+8>>2]|0;
  ;HEAP32[$143>>2]=0|0;HEAP32[$143+4>>2]=0|0;HEAP32[$143+8>>2]=0|0;
  __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$21,200,47);
  $144 = ((($21)) + 11|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = ($145<<24>>24)<(0);
  if ($146) {
   $147 = HEAP32[$21>>2]|0;
   __ZdlPv($147);
  }
  $148 = ((($22)) + 11|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = ($149<<24>>24)<(0);
  if ($150) {
   $151 = HEAP32[$22>>2]|0;
   __ZdlPv($151);
  }
  $$pre = HEAP32[(18132)>>2]|0;
  $$pre90 = HEAP32[(18128)>>2]|0;
  $153 = $$pre90;$154 = $$pre;
 }
 $152 = (($154) - ($153))|0;
 $155 = (($152|0) / 20)&-1;
 $156 = ($155>>>0)>(1);
 if (!($156)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $157 = ((($23)) + 11|0);
 HEAP8[$157>>0] = 9;
 dest=$23; src=11655; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $158 = ((($23)) + 9|0);
 HEAP8[$158>>0] = 0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$23,330,13);
 $159 = HEAP8[$157>>0]|0;
 $160 = ($159<<24>>24)<(0);
 if ($160) {
  $161 = HEAP32[$23>>2]|0;
  __ZdlPv($161);
 }
 $162 = HEAP32[(18132)>>2]|0;
 $163 = HEAP32[(18128)>>2]|0;
 $164 = (($162) - ($163))|0;
 $165 = (($164|0) / 20)&-1;
 $166 = ($165>>>0)>(1);
 if (!($166)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv((18128));
  // unreachable;
 }
 $167 = $163;
 $168 = ((($167)) + 32|0);
 $169 = HEAP32[$168>>2]|0;
 __ZNSt3__29to_stringEi($25,$169);
 $170 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($25,0,11633)|0);
 ;HEAP32[$24>>2]=HEAP32[$170>>2]|0;HEAP32[$24+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$170+8>>2]|0;
 ;HEAP32[$170>>2]=0|0;HEAP32[$170+4>>2]=0|0;HEAP32[$170+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$24,330,30);
 $171 = ((($24)) + 11|0);
 $172 = HEAP8[$171>>0]|0;
 $173 = ($172<<24>>24)<(0);
 if ($173) {
  $174 = HEAP32[$24>>2]|0;
  __ZdlPv($174);
 }
 $175 = ((($25)) + 11|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = ($176<<24>>24)<(0);
 if ($177) {
  $178 = HEAP32[$25>>2]|0;
  __ZdlPv($178);
 }
 $179 = HEAP32[(18132)>>2]|0;
 $180 = HEAP32[(18128)>>2]|0;
 $181 = (($179) - ($180))|0;
 $182 = (($181|0) / 20)&-1;
 $183 = ($182>>>0)>(1);
 if (!($183)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv((18128));
  // unreachable;
 }
 $184 = $180;
 $185 = ((($184)) + 36|0);
 $186 = HEAP32[$185>>2]|0;
 __ZNSt3__29to_stringEi($27,$186);
 $187 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($27,0,11644)|0);
 ;HEAP32[$26>>2]=HEAP32[$187>>2]|0;HEAP32[$26+4>>2]=HEAP32[$187+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$187+8>>2]|0;
 ;HEAP32[$187>>2]=0|0;HEAP32[$187+4>>2]=0|0;HEAP32[$187+8>>2]=0|0;
 __ZN6Canvas8fillTextENS_5LayerENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEii(1,$26,330,47);
 $188 = ((($26)) + 11|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = ($189<<24>>24)<(0);
 if ($190) {
  $191 = HEAP32[$26>>2]|0;
  __ZdlPv($191);
 }
 $192 = ((($27)) + 11|0);
 $193 = HEAP8[$192>>0]|0;
 $194 = ($193<<24>>24)<(0);
 if ($194) {
  $195 = HEAP32[$27>>2]|0;
  __ZdlPv($195);
 }
 STACKTOP = sp;return;
}
function __ZN14DebugVariablesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 12|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($0)) + 16|0);
 $6 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 HEAP32[$0>>2] = (1612);
 $7 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(19684,11682,23)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + -12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 __ZNKSt3__28ios_base6getlocEv($1,$11);
 $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,20556)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$15 & 511]($12,10)|0);
 __ZNSt3__26localeD2Ev($1);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($7,$16)|0);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($7)|0);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_Controls_cpp() {
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 ;HEAP32[18112>>2]=0|0;HEAP32[18112+4>>2]=0|0;HEAP32[18112+8>>2]=0|0;HEAP16[18112+12>>1]=0|0;
 HEAP8[(18126)>>0] = 1;
 HEAPF64[(18144)>>3] = 0.0;
 dest=(18127); stop=dest+13|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[(18152)>>2] = 2;
 return;
}
function __ZN8Controls10initializeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if ($0) {
  HEAP8[(18127)>>0] = 1;
 }
 return;
}
function __ZN8Controls19resetMovementInputsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4528] = 0;
 return;
}
function _onkeydown($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 65:  {
  HEAP8[18112] = 1;
  break;
 }
 case 68:  {
  HEAP8[(18113)>>0] = 1;
  break;
 }
 case 87:  {
  HEAP8[(18114)>>0] = 1;
  break;
 }
 case 83:  {
  HEAP8[(18115)>>0] = 1;
  break;
 }
 case 37:  {
  HEAP8[18112] = 1;
  break;
 }
 case 39:  {
  HEAP8[(18113)>>0] = 1;
  break;
 }
 case 38:  {
  HEAP8[(18114)>>0] = 1;
  break;
 }
 case 40:  {
  HEAP8[(18115)>>0] = 1;
  break;
 }
 default: {
 }
 }
 return;
}
function _onkeyup($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 65:  {
  HEAP8[18112] = 0;
  break;
 }
 case 68:  {
  HEAP8[(18113)>>0] = 0;
  break;
 }
 case 87:  {
  HEAP8[(18114)>>0] = 0;
  break;
 }
 case 83:  {
  HEAP8[(18115)>>0] = 0;
  break;
 }
 case 37:  {
  HEAP8[18112] = 0;
  break;
 }
 case 39:  {
  HEAP8[(18113)>>0] = 0;
  break;
 }
 case 38:  {
  HEAP8[(18114)>>0] = 0;
  break;
 }
 case 40:  {
  HEAP8[(18115)>>0] = 0;
  break;
 }
 default: {
 }
 }
 return;
}
function _onmousemove($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18116)>>2] = $0;
 HEAP32[(18120)>>2] = $1;
 return;
}
function _onmousedown($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _onmouseup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _onwheel($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _onblur() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _onfocus() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _touchstart($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$46$0$$sroa_idx7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = HEAP32[(18132)>>2]|0;
 $5 = HEAP32[(18128)>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 20)&-1;
 $8 = ($7>>>0)>(1);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 $10 = ((($3)) + 4|0);
 HEAP32[$3>>2] = $0;
 HEAP32[$10>>2] = $1;
 $$sroa$46$0$$sroa_idx7 = ((($3)) + 8|0);
 HEAP32[$$sroa$46$0$$sroa_idx7>>2] = $2;
 $$sroa$0$0$$sroa_idx = ((($3)) + 12|0);
 HEAP32[$$sroa$0$0$$sroa_idx>>2] = $1;
 $$sroa$4$0$$sroa_idx2 = ((($3)) + 16|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $2;
 $11 = HEAP32[(18136)>>2]|0;
 $12 = ($11|0)==($9|0);
 if ($12) {
  __ZNSt3__26vectorIN8Controls10TouchPointENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_((18128),$3);
 } else {
  $13 = $4;
  ;HEAP32[$13>>2]=HEAP32[$3>>2]|0;HEAP32[$13+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$13+16>>2]=HEAP32[$3+16>>2]|0;
  $14 = HEAP32[(18132)>>2]|0;
  $15 = ((($14)) + 20|0);
  HEAP32[(18132)>>2] = $15;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN8Controls10TouchPointENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 20)&-1;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(214748364);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = (($11|0) / 20)&-1;
 $13 = ($12>>>0)<(107374182);
 $14 = $12 << 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 214748364;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $22 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(214748364);
   if ($17) {
    $18 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($18,11706);
    HEAP32[$18>>2] = (9316);
    ___cxa_throw(($18|0),(1520|0),(335|0));
    // unreachable;
   } else {
    $19 = ($$sroa$speculated$$i*20)|0;
    $20 = (__Znwj($19)|0);
    $22 = $20;
    break;
   }
  }
 } while(0);
 $21 = (($22) + (($6*20)|0)|0);
 $23 = (($22) + (($$sroa$speculated$$i*20)|0)|0);
 $24 = $23;
 ;HEAP32[$21>>2]=HEAP32[$1>>2]|0;HEAP32[$21+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[$1+16>>2]|0;
 $25 = ((($21)) + 20|0);
 $26 = $25;
 $27 = (($5|0) / -20)&-1;
 $28 = (($21) + (($27*20)|0)|0);
 $29 = $28;
 $30 = ($5|0)>(0);
 if ($30) {
  $31 = $4;
  _memcpy(($28|0),($31|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $29;
 HEAP32[$2>>2] = $26;
 HEAP32[$9>>2] = $24;
 $32 = ($4|0)==(0);
 if ($32) {
  return;
 }
 $33 = $4;
 __ZdlPv($33);
 return;
}
function _touchend($0) {
 $0 = $0|0;
 var $$pre$i = 0, $$sink$ph10 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(18128)>>2]|0;
 $2 = HEAP32[(18132)>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  HEAP32[4528] = 0;
  return;
 }
 $4 = $2;
 $$sink$ph10 = $1;$27 = $4;$28 = $2;
 L4: while(1) {
  $5 = ((($$sink$ph10)) + 20|0);
  $8 = $5;
  $12 = $27;$7 = $28;
  while(1) {
   $9 = HEAP32[$$sink$ph10>>2]|0;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    break;
   }
   $11 = (($12) - ($8))|0;
   $13 = (($11|0) / 20)&-1;
   $14 = ($11|0)==(0);
   $15 = $12;
   if ($14) {
    $17 = $15;$29 = $7;
   } else {
    _memmove(($$sink$ph10|0),($5|0),($11|0))|0;
    $$pre$i = HEAP32[(18132)>>2]|0;
    $17 = $$pre$i;$29 = $$pre$i;
   }
   $16 = (($$sink$ph10) + (($13*20)|0)|0);
   $18 = ($17|0)==($16|0);
   if ($18) {
    $20 = $29;
   } else {
    $scevgep$i$i$i = ((($17)) + -20|0);
    $22 = $scevgep$i$i$i;
    $23 = $16;
    $24 = (($22) - ($23))|0;
    $25 = (($24>>>0) / 20)&-1;
    $26 = $25 ^ -1;
    $scevgep4$i$i$i = (($17) + (($26*20)|0)|0);
    HEAP32[(18132)>>2] = $scevgep4$i$i$i;
    $20 = $scevgep4$i$i$i;
   }
   $19 = ($$sink$ph10|0)==($20|0);
   $21 = $20;
   if ($19) {
    label = 5;
    break L4;
   } else {
    $12 = $21;$7 = $20;
   }
  }
  $6 = ($5|0)==($7|0);
  if ($6) {
   label = 5;
   break;
  } else {
   $$sink$ph10 = $5;$27 = $12;$28 = $7;
  }
 }
 if ((label|0) == 5) {
  HEAP32[4528] = 0;
  return;
 }
}
function _touchmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01314$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[(18132)>>2]|0;
 $4 = HEAP32[(18128)>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = (($3) - ($4))|0;
 $7 = (($6|0) / 20)&-1;
 $8 = $4;
 $$01314$i = 0;
 while(1) {
  $11 = (($8) + (($$01314$i*20)|0)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($0|0);
  $9 = (($$01314$i) + 1)|0;
  if ($13) {
   break;
  }
  $10 = ($9>>>0)<($7>>>0);
  if ($10) {
   $$01314$i = $9;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return;
 }
 $14 = ($$01314$i>>>0)<(2);
 if (!($14)) {
  return;
 }
 $15 = ($7>>>0)>($$01314$i>>>0);
 if (!($15)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv((18128));
  // unreachable;
 }
 $16 = (((($8) + (($$01314$i*20)|0)|0)) + 12|0);
 HEAP32[$16>>2] = $1;
 $17 = (((($8) + (($$01314$i*20)|0)|0)) + 16|0);
 HEAP32[$17>>2] = $2;
 return;
}
function __ZN6PlayerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = -1;
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 28|0);
 $5 = ((($0)) + 32|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 HEAP32[$5>>2] = 20;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = 243;
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = 118;
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = 118;
 $9 = ((($0)) + 48|0);
 HEAP32[$9>>2] = 183;
 $10 = ((($0)) + 52|0);
 HEAP32[$10>>2] = 87;
 $11 = ((($0)) + 56|0);
 HEAP32[$11>>2] = 87;
 $12 = HEAP32[4721]|0;
 HEAP32[$0>>2] = $12;
 $13 = HEAP32[4721]|0;
 $14 = (($13) + 1)|0;
 HEAP32[4721] = $14;
 $15 = (_rand()|0);
 $16 = HEAP32[400]|0;
 $17 = (($16) + -100)|0;
 $18 = (($15|0) % ($17|0))&-1;
 $19 = HEAP32[$5>>2]|0;
 $20 = (($19) + ($18))|0;
 $21 = (_rand()|0);
 $22 = HEAP32[400]|0;
 $23 = (($22) + -100)|0;
 $24 = (($21|0) % ($23|0))&-1;
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) + ($24))|0;
 HEAP32[$3>>2] = $20;
 HEAP32[$4>>2] = $26;
 $27 = (_rand()|0);
 $28 = (($27|0) % 5)&-1;
 $29 = (($28) + 1)|0;
 $30 = (+($29|0));
 HEAPF64[$1>>3] = $30;
 $31 = (_rand()|0);
 $32 = (($31|0) % 5)&-1;
 $33 = (($32) + 1)|0;
 $34 = (+($33|0));
 HEAPF64[$2>>3] = $34;
 return;
}
function __ZN6Player6updateEv($0) {
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$pre = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if ($5) {
  label = 3;
 } else {
  $6 = HEAP32[400]|0;
  $7 = (($6) - ($4))|0;
  $8 = ($2|0)>($7|0);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = ((($0)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = - $10;
  HEAPF64[$9>>3] = $11;
 }
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($4|0);
 if ($14) {
  label = 7;
 } else {
  $15 = HEAP32[400]|0;
  $16 = (($15) - ($4))|0;
  $17 = ($13|0)>($16|0);
  if ($17) {
   label = 7;
  } else {
   $$phi$trans$insert = ((($0)) + 16|0);
   $$pre = +HEAPF64[$$phi$trans$insert>>3];
   $28 = $$pre;
  }
 }
 if ((label|0) == 7) {
  $18 = ((($0)) + 16|0);
  $19 = +HEAPF64[$18>>3];
  $20 = - $19;
  HEAPF64[$18>>3] = $20;
  $28 = $20;
 }
 $21 = ((($0)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (+($2|0));
 $24 = $22 + $23;
 $25 = (~~(($24)));
 HEAP32[$1>>2] = $25;
 $26 = (+($13|0));
 $27 = $28 + $26;
 $29 = (~~(($27)));
 HEAP32[$12>>2] = $29;
 return;
}
function __ZN6Player4drawER6Camera($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN6Canvas12setFillStyleENS_5LayerEiii(0,$5,$7,$9);
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(0,$11,$13,$15);
 __ZN6Canvas12setLineWidthENS_5LayerEi(0,3);
 $16 = ((($0)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $17;
 $18 = ((($3)) + 4|0);
 $19 = ((($0)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $20;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZN6Camera19getLocationOnScreenE8Location($2,$1,$$byval_copy);
 __ZN6Canvas9beginPathENS_5LayerE(0);
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($2)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(0,$21,$23,$25,0.0,6.2831853071795862);
 __ZN6Canvas4fillENS_5LayerE(0);
 __ZN6Canvas6strokeENS_5LayerE(0);
 STACKTOP = sp;return;
}
function __ZN3HudC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 __ZN3Hud18initializeElementsEv($0);
 return;
}
function __ZN3Hud18initializeElementsEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__Znwj(24)|0);
 __ZN14DebugVariablesC2Ev($3);
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  __ZNSt3__26vectorIP10HudElementNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1);
 } else {
  $9 = $3;
  HEAP32[$5>>2] = $9;
  $10 = HEAP32[$4>>2]|0;
  $11 = ((($10)) + 4|0);
  HEAP32[$4>>2] = $11;
 }
 $12 = (__Znwj(56)|0);
 __ZN13TouchControlsC2Ev($12);
 HEAP32[$2>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($13>>>0)<($14>>>0);
 if ($15) {
  $16 = $12;
  HEAP32[$13>>2] = $16;
  $17 = HEAP32[$4>>2]|0;
  $18 = ((($17)) + 4|0);
  HEAP32[$4>>2] = $18;
  STACKTOP = sp;return;
 } else {
  __ZNSt3__26vectorIP10HudElementNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIP10HudElementNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $22 = 0;$31 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if ($17) {
    $18 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($18,11706);
    HEAP32[$18>>2] = (9316);
    ___cxa_throw(($18|0),(1520|0),(335|0));
    // unreachable;
   } else {
    $19 = $$sroa$speculated$$i << 2;
    $20 = (__Znwj($19)|0);
    $22 = $20;$31 = $20;
    break;
   }
  }
 } while(0);
 $21 = (($22) + ($6<<2)|0);
 $23 = (($22) + ($$sroa$speculated$$i<<2)|0);
 $24 = $23;
 $25 = HEAP32[$1>>2]|0;
 HEAP32[$21>>2] = $25;
 $26 = ((($21)) + 4|0);
 $27 = $26;
 $28 = $22;
 $29 = ($5|0)>(0);
 if ($29) {
  $30 = $4;
  _memcpy(($31|0),($30|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $28;
 HEAP32[$2>>2] = $27;
 HEAP32[$9>>2] = $24;
 $32 = ($4|0)==(0);
 if ($32) {
  return;
 }
 $33 = $4;
 __ZdlPv($33);
 return;
}
function __ZNSt3__26vectorIP10HudElementNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $22 = 0;$31 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if ($17) {
    $18 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($18,11706);
    HEAP32[$18>>2] = (9316);
    ___cxa_throw(($18|0),(1520|0),(335|0));
    // unreachable;
   } else {
    $19 = $$sroa$speculated$$i << 2;
    $20 = (__Znwj($19)|0);
    $22 = $20;$31 = $20;
    break;
   }
  }
 } while(0);
 $21 = (($22) + ($6<<2)|0);
 $23 = (($22) + ($$sroa$speculated$$i<<2)|0);
 $24 = $23;
 $25 = HEAP32[$1>>2]|0;
 HEAP32[$21>>2] = $25;
 $26 = ((($21)) + 4|0);
 $27 = $26;
 $28 = $22;
 $29 = ($5|0)>(0);
 if ($29) {
  $30 = $4;
  _memcpy(($31|0),($30|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $28;
 HEAP32[$2>>2] = $27;
 HEAP32[$9>>2] = $24;
 $32 = ($4|0)==(0);
 if ($32) {
  return;
 }
 $33 = $4;
 __ZdlPv($33);
 return;
}
function __ZN3Hud6updateEv($0) {
 $0 = $0|0;
 var $$sroa$04$07 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return;
 } else {
  $$sroa$04$07 = $1;
 }
 while(1) {
  $5 = HEAP32[$$sroa$04$07>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 511]($5);
  $8 = ((($$sroa$04$07)) + 4|0);
  $9 = HEAP32[$2>>2]|0;
  $10 = ($8|0)==($9|0);
  if ($10) {
   break;
  } else {
   $$sroa$04$07 = $8;
  }
 }
 return;
}
function __ZN3Hud4drawEv($0) {
 $0 = $0|0;
 var $$sroa$04$07 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return;
 } else {
  $$sroa$04$07 = $1;
 }
 while(1) {
  $5 = HEAP32[$$sroa$04$07>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 511]($5);
  $9 = ((($$sroa$04$07)) + 4|0);
  $10 = HEAP32[$2>>2]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   break;
  } else {
   $$sroa$04$07 = $9;
  }
 }
 return;
}
function __ZN12ActivePlayerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6PlayerC2Ev($0);
 $1 = ((($0)) + 64|0);
 HEAPF64[$1>>3] = 3.5;
 $2 = ((($0)) + 72|0);
 HEAPF64[$2>>3] = 0.0;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = 1000;
 $4 = ((($0)) + 28|0);
 HEAP32[$4>>2] = 1000;
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = 20;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = 59;
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = 179;
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = 229;
 $9 = ((($0)) + 48|0);
 HEAP32[$9>>2] = 42;
 $10 = ((($0)) + 52|0);
 HEAP32[$10>>2] = 133;
 $11 = ((($0)) + 56|0);
 HEAP32[$11>>2] = 172;
 return;
}
function __ZN12ActivePlayer6updateEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0.0, $$byval_copy = 0, $$sink$i = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP8[(18127)>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $6 = ((($0)) + 80|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$2>>2] = $9;
  $10 = ((($2)) + 4|0);
  $11 = ((($0)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$10>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  __ZN6Camera19getLocationOnScreenE8Location($1,$7,$$byval_copy);
  $13 = HEAP32[$1>>2]|0;
  $14 = (+($13|0));
  $15 = +HEAPF64[(32)>>3];
  $16 = $15 * $14;
  $17 = HEAP32[(18116)>>2]|0;
  $18 = (+($17|0));
  $19 = $16 - $18;
  $20 = (~~(($19)));
  $21 = ((($1)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (+($22|0));
  $24 = +HEAPF64[(40)>>3];
  $25 = $24 * $23;
  $26 = HEAP32[(18120)>>2]|0;
  $27 = (+($26|0));
  $28 = $25 - $27;
  $29 = (~~(($28)));
  $30 = (+($29|0));
  $31 = (+($20|0));
  $32 = (+Math_atan2((+$30),(+$31)));
  $33 = $32 + 3.1415926535897931;
  $$sink$i = $33;
 } else {
  $5 = +HEAPF64[(18144)>>3];
  $$sink$i = $5;
 }
 $34 = ((($0)) + 72|0);
 HEAPF64[$34>>3] = $$sink$i;
 $35 = ((($0)) + 8|0);
 ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;
 $36 = ((($0)) + 64|0);
 $37 = +HEAPF64[$36>>3];
 $38 = HEAP32[(18152)>>2]|0;
 switch ($38|0) {
 case 0:  {
  $39 = $37 * 0.29999999999999999;
  $$0$i$i$i = $39;
  break;
 }
 case 1:  {
  $40 = $37 * 0.59999999999999998;
  $$0$i$i$i = $40;
  break;
 }
 default: {
  $$0$i$i$i = $37;
 }
 }
 $41 = HEAP8[18112]|0;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $78 = 0.0;
 } else {
  $43 = - $$0$i$i$i;
  HEAPF64[$35>>3] = $43;
  $78 = $43;
 }
 $44 = HEAP8[(18113)>>0]|0;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $57 = $78;
 } else {
  HEAPF64[$35>>3] = $$0$i$i$i;
  $57 = $$0$i$i$i;
 }
 $46 = HEAP8[(18114)>>0]|0;
 $47 = ($46<<24>>24)==(0);
 if ($47) {
  $79 = 0.0;
 } else {
  $48 = ((($0)) + 16|0);
  $49 = - $$0$i$i$i;
  HEAPF64[$48>>3] = $49;
  $79 = $49;
 }
 $50 = HEAP8[(18115)>>0]|0;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $71 = $79;
 } else {
  $52 = ((($0)) + 16|0);
  HEAPF64[$52>>3] = $$0$i$i$i;
  $71 = $$0$i$i$i;
 }
 $53 = ((($0)) + 24|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (+($54|0));
 $56 = $57 + $55;
 $58 = ((($0)) + 32|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (+($59|0));
 $61 = $56 > $60;
 if ($61) {
  $62 = HEAP32[400]|0;
  $63 = (($62) - ($59))|0;
  $64 = (+($63|0));
  $65 = $56 < $64;
  if ($65) {
   $66 = (~~(($56)));
   HEAP32[$53>>2] = $66;
  }
 }
 $67 = ((($0)) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (+($68|0));
 $70 = $71 + $69;
 $72 = $70 > $60;
 if (!($72)) {
  STACKTOP = sp;return;
 }
 $73 = HEAP32[400]|0;
 $74 = (($73) - ($59))|0;
 $75 = (+($74|0));
 $76 = $70 < $75;
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = (~~(($70)));
 HEAP32[$67>>2] = $77;
 STACKTOP = sp;return;
}
function __ZN12ActivePlayer4drawER6Camera($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp;
 $3 = sp + 8|0;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZN6Camera19getLocationOnScreenE8Location($2,$1,$$byval_copy);
 $9 = $2;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16|0));
 $18 = $17 * 1.5;
 $19 = (~~(($18)));
 $20 = (+($11|0));
 $21 = (+($19|0));
 $22 = ((($0)) + 72|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (+Math_cos((+$23)));
 $25 = $24 * $21;
 $26 = $25 + $20;
 $27 = (+($14|0));
 $28 = (+Math_sin((+$23)));
 $29 = $28 * $21;
 $30 = $29 + $27;
 __ZN6Canvas12setLineWidthENS_5LayerEi(0,16);
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(0,144,144,144);
 $31 = (~~(($26)));
 $32 = (~~(($30)));
 __ZN6Canvas8drawLineENS_5LayerEiiii(0,$11,$14,$31,$32);
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 44|0);
 $44 = HEAP32[$43>>2]|0;
 __ZN6Canvas12setFillStyleENS_5LayerEiii(0,$40,$42,$44);
 $45 = ((($0)) + 48|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 52|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 56|0);
 $50 = HEAP32[$49>>2]|0;
 __ZN6Canvas14setStrokeStyleENS_5LayerEiii(0,$46,$48,$50);
 __ZN6Canvas12setLineWidthENS_5LayerEi(0,3);
 __ZN6Canvas9beginPathENS_5LayerE(0);
 $51 = HEAP32[$15>>2]|0;
 __ZN6Canvas3arcENS_5LayerEiiidd(0,$35,$38,$51,0.0,6.2831853071795862);
 __ZN6Canvas4fillENS_5LayerE(0);
 __ZN6Canvas6strokeENS_5LayerE(0);
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4722]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18928 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[4722] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(18896)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (18928 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[4722] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(18908)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (18928 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[4722] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(18896)>>2] = $76;
     HEAP32[(18908)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(18892)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (19192 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (19192 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(18892)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(18908)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (18928 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[4722] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(18896)>>2] = $$0173$lcssa$i;
       HEAP32[(18908)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(18892)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (19192 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (19192 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(18896)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (19192 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(18892)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (18928 + ($388<<2)|0);
          $390 = HEAP32[4722]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[4722] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (19192 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(18892)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(18896)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(18908)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(18908)>>2] = $467;
   HEAP32[(18896)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(18896)>>2] = 0;
   HEAP32[(18908)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(18900)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(18900)>>2] = $482;
  $483 = HEAP32[(18912)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(18912)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[4840]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(19368)>>2] = 4096;
  HEAP32[(19364)>>2] = 4096;
  HEAP32[(19372)>>2] = -1;
  HEAP32[(19376)>>2] = -1;
  HEAP32[(19380)>>2] = 0;
  HEAP32[(19332)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[4840] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(19368)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(19328)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(19320)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(19332)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(18912)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (19336);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(19364)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(19320)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(19328)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(19368)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(19332)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(19332)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(19320)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(19320)>>2] = $583;
  $584 = HEAP32[(19324)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(19324)>>2] = $583;
  }
  $586 = HEAP32[(18912)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(18904)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(18904)>>2] = $$748$i;
    }
    HEAP32[(19336)>>2] = $$748$i;
    HEAP32[(19340)>>2] = $$723947$i;
    HEAP32[(19348)>>2] = 0;
    $591 = HEAP32[4840]|0;
    HEAP32[(18924)>>2] = $591;
    HEAP32[(18920)>>2] = -1;
    HEAP32[(18940)>>2] = (18928);
    HEAP32[(18936)>>2] = (18928);
    HEAP32[(18948)>>2] = (18936);
    HEAP32[(18944)>>2] = (18936);
    HEAP32[(18956)>>2] = (18944);
    HEAP32[(18952)>>2] = (18944);
    HEAP32[(18964)>>2] = (18952);
    HEAP32[(18960)>>2] = (18952);
    HEAP32[(18972)>>2] = (18960);
    HEAP32[(18968)>>2] = (18960);
    HEAP32[(18980)>>2] = (18968);
    HEAP32[(18976)>>2] = (18968);
    HEAP32[(18988)>>2] = (18976);
    HEAP32[(18984)>>2] = (18976);
    HEAP32[(18996)>>2] = (18984);
    HEAP32[(18992)>>2] = (18984);
    HEAP32[(19004)>>2] = (18992);
    HEAP32[(19000)>>2] = (18992);
    HEAP32[(19012)>>2] = (19000);
    HEAP32[(19008)>>2] = (19000);
    HEAP32[(19020)>>2] = (19008);
    HEAP32[(19016)>>2] = (19008);
    HEAP32[(19028)>>2] = (19016);
    HEAP32[(19024)>>2] = (19016);
    HEAP32[(19036)>>2] = (19024);
    HEAP32[(19032)>>2] = (19024);
    HEAP32[(19044)>>2] = (19032);
    HEAP32[(19040)>>2] = (19032);
    HEAP32[(19052)>>2] = (19040);
    HEAP32[(19048)>>2] = (19040);
    HEAP32[(19060)>>2] = (19048);
    HEAP32[(19056)>>2] = (19048);
    HEAP32[(19068)>>2] = (19056);
    HEAP32[(19064)>>2] = (19056);
    HEAP32[(19076)>>2] = (19064);
    HEAP32[(19072)>>2] = (19064);
    HEAP32[(19084)>>2] = (19072);
    HEAP32[(19080)>>2] = (19072);
    HEAP32[(19092)>>2] = (19080);
    HEAP32[(19088)>>2] = (19080);
    HEAP32[(19100)>>2] = (19088);
    HEAP32[(19096)>>2] = (19088);
    HEAP32[(19108)>>2] = (19096);
    HEAP32[(19104)>>2] = (19096);
    HEAP32[(19116)>>2] = (19104);
    HEAP32[(19112)>>2] = (19104);
    HEAP32[(19124)>>2] = (19112);
    HEAP32[(19120)>>2] = (19112);
    HEAP32[(19132)>>2] = (19120);
    HEAP32[(19128)>>2] = (19120);
    HEAP32[(19140)>>2] = (19128);
    HEAP32[(19136)>>2] = (19128);
    HEAP32[(19148)>>2] = (19136);
    HEAP32[(19144)>>2] = (19136);
    HEAP32[(19156)>>2] = (19144);
    HEAP32[(19152)>>2] = (19144);
    HEAP32[(19164)>>2] = (19152);
    HEAP32[(19160)>>2] = (19152);
    HEAP32[(19172)>>2] = (19160);
    HEAP32[(19168)>>2] = (19160);
    HEAP32[(19180)>>2] = (19168);
    HEAP32[(19176)>>2] = (19168);
    HEAP32[(19188)>>2] = (19176);
    HEAP32[(19184)>>2] = (19176);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(18912)>>2] = $600;
    HEAP32[(18900)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(19376)>>2]|0;
    HEAP32[(18916)>>2] = $606;
   } else {
    $$024367$i = (19336);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(18900)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(18912)>>2] = $631;
       HEAP32[(18900)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(19376)>>2]|0;
       HEAP32[(18916)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(18904)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(18904)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (19336);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (19336);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(18900)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(18900)>>2] = $678;
        HEAP32[(18912)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(18908)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(18896)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(18896)>>2] = $684;
         HEAP32[(18908)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[4722]|0;
            $703 = $702 & $701;
            HEAP32[4722] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (19192 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(18892)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(18892)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (18928 + ($763<<2)|0);
         $765 = HEAP32[4722]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[4722] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (19192 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(18892)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(18892)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (19336);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(18912)>>2] = $866;
    HEAP32[(18900)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(19376)>>2]|0;
    HEAP32[(18916)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(19336)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(19336)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(19336)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(19336)+12>>2]|0;
    HEAP32[(19336)>>2] = $$748$i;
    HEAP32[(19340)>>2] = $$723947$i;
    HEAP32[(19348)>>2] = 0;
    HEAP32[(19344)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (18928 + ($888<<2)|0);
      $890 = HEAP32[4722]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[4722] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (19192 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(18892)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(18892)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(18900)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(18900)>>2] = $963;
   $964 = HEAP32[(18912)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(18912)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18904)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(18908)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(18896)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[4722]|0;
     $29 = $28 & $27;
     HEAP32[4722] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (19192 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(18892)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(18892)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(18912)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(18900)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(18900)>>2] = $98;
   HEAP32[(18912)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(18908)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(18908)>>2] = 0;
   HEAP32[(18896)>>2] = 0;
   return;
  }
  $103 = HEAP32[(18908)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(18896)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(18896)>>2] = $106;
   HEAP32[(18908)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[4722]|0;
     $122 = $121 & $120;
     HEAP32[4722] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (19192 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(18892)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(18892)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(18908)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(18896)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (18928 + ($183<<2)|0);
  $185 = HEAP32[4722]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[4722] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (19192 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(18892)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(18892)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(18920)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(18920)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (19344);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(18920)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(19368)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(18912)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(18900)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(18912)>>2] = $33;
  HEAP32[(18900)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(18908)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(18896)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(18896)>>2] = $storemerge1;
  HEAP32[(18908)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[4722]|0;
    $81 = $80 & $79;
    HEAP32[4722] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (19192 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(18892)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(18892)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(18908)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(18896)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[4722]|0;
     $25 = $24 & $23;
     HEAP32[4722] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (19192 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(18892)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(18892)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(18912)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(18900)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(18900)>>2] = $89;
   HEAP32[(18912)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(18908)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(18908)>>2] = 0;
   HEAP32[(18896)>>2] = 0;
   return;
  }
  $94 = HEAP32[(18908)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(18896)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(18896)>>2] = $97;
   HEAP32[(18908)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[4722]|0;
     $113 = $112 & $111;
     HEAP32[4722] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (19192 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(18892)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(18892)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(18908)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(18896)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (18928 + ($174<<2)|0);
  $176 = HEAP32[4722]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[4722] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (19192 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(18892)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(18892)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_541($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 9;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19472|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy_541($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$25 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$25 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$25 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($26) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $25;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 511]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 511]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (11774 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (12557 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0, $$pre$phi201Z2D = 0.0, $$pre200 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$50 = 0;$52 = 0;$95 = $38;$97 = $39;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $$pre = $$2 | 32;
  if ($43) {
   label = 20;
  } else {
   $44 = (($$pre) + -97)|0;
   $45 = ($44>>>0)<(6);
   $46 = ($$2|0)==(46);
   $or$cond6 = $46 | $45;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
   if ($46) {
    $47 = ($$0146|0)==(0);
    if ($47) {
     $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$211 = $52;$212 = $50;$213 = $52;$214 = $50;
    } else {
     $$2$lcssa = 46;
     break;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $48 = ($$2|0)>(57);
   $49 = (($$pre) + -87)|0;
   $$0133 = $48 ? $49 : $42;
   $51 = ($50|0)<(0);
   $53 = ($52>>>0)<(8);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $51 | $55;
   do {
    if ($56) {
     $57 = $$0159 << 4;
     $58 = (($$0133) + ($57))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $58;
    } else {
     $59 = ($50|0)<(0);
     $60 = ($52>>>0)<(14);
     $61 = ($50|0)==(0);
     $62 = $61 & $60;
     $63 = $59 | $62;
     if ($63) {
      $64 = (+($$0133|0));
      $65 = $$0152 * 0.0625;
      $66 = $65 * $64;
      $67 = $$0155 + $66;
      $$1149 = $$0148;$$1153 = $65;$$1156 = $67;$$1160 = $$0159;
      break;
     } else {
      $68 = ($$0133|0)==(0);
      $69 = ($$0148|0)!=(0);
      $or$cond = $69 | $68;
      $70 = $$0152 * 0.5;
      $71 = $$0155 + $70;
      $$0155$ = $or$cond ? $$0155 : $71;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $72 = (_i64Add(($52|0),($50|0),1,0)|0);
   $73 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$211 = $95;$212 = $97;$213 = $72;$214 = $73;
  }
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$7>>2]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = ((($74)) + 1|0);
   HEAP32[$5>>2] = $77;
   $78 = HEAP8[$74>>0]|0;
   $79 = $78&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $79;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  } else {
   $80 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $80;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  }
 }
 $81 = ($$2144|0)==(0);
 do {
  if ($81) {
   $82 = HEAP32[$7>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = HEAP32[$5>>2]|0;
    $85 = ((($84)) + -1|0);
    HEAP32[$5>>2] = $85;
   }
   $86 = ($4|0)==(0);
   if ($86) {
    ___shlim($0,0);
   } else {
    if (!($83)) {
     $87 = HEAP32[$5>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$5>>2] = $88;
    }
    $89 = ($$0146|0)==(0);
    $brmerge = $89 | $83;
    if (!($brmerge)) {
     $90 = HEAP32[$5>>2]|0;
     $91 = ((($90)) + -1|0);
     HEAP32[$5>>2] = $91;
    }
   }
   $92 = (+($3|0));
   $93 = $92 * 0.0;
   $$0165 = $93;
  } else {
   $94 = ($$0146|0)==(0);
   $96 = $94 ? $52 : $95;
   $98 = $94 ? $50 : $97;
   $99 = ($50|0)<(0);
   $100 = ($52>>>0)<(8);
   $101 = ($50|0)==(0);
   $102 = $101 & $100;
   $103 = $99 | $102;
   if ($103) {
    $$3162183 = $$0159;$105 = $52;$106 = $50;
    while(1) {
     $104 = $$3162183 << 4;
     $107 = (_i64Add(($105|0),($106|0),1,0)|0);
     $108 = tempRet0;
     $109 = ($106|0)<(0);
     $110 = ($105>>>0)<(7);
     $111 = ($106|0)==(0);
     $112 = $111 & $110;
     $113 = $109 | $112;
     if ($113) {
      $$3162183 = $104;$105 = $107;$106 = $108;
     } else {
      $$3162$lcssa = $104;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $114 = $$2$lcssa | 32;
   $115 = ($114|0)==(112);
   if ($115) {
    $116 = (_scanexp($0,$4)|0);
    $117 = tempRet0;
    $118 = ($116|0)==(0);
    $119 = ($117|0)==(-2147483648);
    $120 = $118 & $119;
    if ($120) {
     $121 = ($4|0)==(0);
     if ($121) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $122 = HEAP32[$7>>2]|0;
     $123 = ($122|0)==(0|0);
     if ($123) {
      $134 = 0;$135 = 0;
     } else {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + -1|0);
      HEAP32[$5>>2] = $125;
      $134 = 0;$135 = 0;
     }
    } else {
     $134 = $116;$135 = $117;
    }
   } else {
    $126 = HEAP32[$7>>2]|0;
    $127 = ($126|0)==(0|0);
    if ($127) {
     $134 = 0;$135 = 0;
    } else {
     $128 = HEAP32[$5>>2]|0;
     $129 = ((($128)) + -1|0);
     HEAP32[$5>>2] = $129;
     $134 = 0;$135 = 0;
    }
   }
   $130 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $131 = tempRet0;
   $132 = (_i64Add(($130|0),($131|0),-32,-1)|0);
   $133 = tempRet0;
   $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
   $137 = tempRet0;
   $138 = ($$3162$lcssa|0)==(0);
   if ($138) {
    $139 = (+($3|0));
    $140 = $139 * 0.0;
    $$0165 = $140;
    break;
   }
   $141 = (0 - ($2))|0;
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = ($137|0)>($143|0);
   $145 = ($136>>>0)>($141>>>0);
   $146 = ($137|0)==($143|0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    $149 = (___errno_location()|0);
    HEAP32[$149>>2] = 34;
    $150 = (+($3|0));
    $151 = $150 * 1.7976931348623157E+308;
    $152 = $151 * 1.7976931348623157E+308;
    $$0165 = $152;
    break;
   }
   $153 = (($2) + -106)|0;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = ($137|0)<($155|0);
   $157 = ($136>>>0)<($153>>>0);
   $158 = ($137|0)==($155|0);
   $159 = $158 & $157;
   $160 = $156 | $159;
   if ($160) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0165 = $165;
    break;
   }
   $161 = ($$3162$lcssa|0)>(-1);
   if ($161) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$170 = $136;$171 = $137;
    while(1) {
     $166 = !($$3158179 >= 0.5);
     $167 = $$4163178 << 1;
     $168 = $$3158179 + -1.0;
     $not$ = $166 ^ 1;
     $169 = $not$&1;
     $$5164 = $167 | $169;
     $$pn = $166 ? $$3158179 : $168;
     $$4 = $$3158179 + $$pn;
     $172 = (_i64Add(($170|0),($171|0),-1,-1)|0);
     $173 = tempRet0;
     $174 = ($$5164|0)>(-1);
     if ($174) {
      $$3158179 = $$4;$$4163178 = $$5164;$170 = $172;$171 = $173;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$181 = $172;$182 = $173;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$181 = $136;$182 = $137;
   }
   $175 = ($1|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = ($2|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = (_i64Subtract(32,0,($2|0),($178|0))|0);
   $180 = tempRet0;
   $183 = (_i64Add(($179|0),($180|0),($181|0),($182|0))|0);
   $184 = tempRet0;
   $185 = ($184|0)<($176|0);
   $186 = ($183>>>0)<($1>>>0);
   $187 = ($184|0)==($176|0);
   $188 = $187 & $186;
   $189 = $185 | $188;
   if ($189) {
    $190 = ($183|0)>(0);
    if ($190) {
     $$0166 = $183;
     label = 59;
    } else {
     $$0166170 = 0;$194 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $191 = ($$0166|0)<(53);
    $192 = (84 - ($$0166))|0;
    if ($191) {
     $$0166170 = $$0166;$194 = $192;
     label = 61;
    } else {
     $$pre200 = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phi201Z2D = $$pre200;
    }
   }
   if ((label|0) == 61) {
    $193 = (+($3|0));
    $195 = (+_scalbn(1.0,$194));
    $196 = (+_copysignl($195,$193));
    $$0151 = $196;$$0166169 = $$0166170;$$pre$phi201Z2D = $193;
   }
   $197 = ($$0166169|0)<(32);
   $198 = $$3158$lcssa != 0.0;
   $or$cond4 = $198 & $197;
   $199 = $$4163$lcssa & 1;
   $200 = ($199|0)==(0);
   $or$cond168 = $200 & $or$cond4;
   $201 = $or$cond168&1;
   $$6 = (($$4163$lcssa) + ($201))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $202 = (+($$6>>>0));
   $203 = $$pre$phi201Z2D * $202;
   $204 = $$0151 + $203;
   $205 = $$5 * $$pre$phi201Z2D;
   $206 = $205 + $204;
   $207 = $206 - $$0151;
   $208 = $207 != 0.0;
   if (!($208)) {
    $209 = (___errno_location()|0);
    HEAP32[$209>>2] = 34;
   }
   $210 = (+_scalbnl($207,$181));
   $$0165 = $210;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0;
 var $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$413 = 0, $$423 = 0, $$4349493 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$neg440 = 0, $$neg441 = 0, $$pre = 0, $$pre551 = 0;
 var $$promoted = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond420 = 0, $or$cond420$not = 0, $or$cond421 = 0, $or$cond424 = 0, $or$cond5 = 0;
 var $or$cond579 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$368 = 0;$369 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$368 = $27;$369 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$368 = 0;$369 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341511 = 0;$$0345510 = 0;$$0401507 = 0;$$1394509 = $$0393;$$3399508 = $$2398;$$3512 = $$2;$370 = $39;$371 = $37;$372 = $368;$373 = $369;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($370) {
      $cond = ($$1394509|0)==(0);
      if ($cond) {
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = 1;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $44;$375 = $45;$376 = $44;$377 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345510|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3512|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401507;
      $49 = ($$0341511|0)==(0);
      $$pre551 = (($6) + ($$0345510<<2)|0);
      if ($49) {
       $$sink = $371;
      } else {
       $50 = HEAP32[$$pre551>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3512) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre551>>2] = $$sink;
      $54 = (($$0341511) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($$0345510) + ($56))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394509;$$2403 = $$$0401;$$4400 = 1;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341511 = $$2343;$$0345510 = $$2347;$$0401507 = $$2403;$$1394509 = $$2395;$$3399508 = $$4400;$$3512 = $$3$be;$370 = $68;$371 = $66;$372 = $374;$373 = $375;$44 = $376;$45 = $377;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $374;$72 = $376;$74 = $375;$75 = $377;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399508|0)!=(0);
   $$0341463 = $$0341511;$$0345467 = $$0345510;$$0401473 = $$0401507;$378 = $44;$379 = $45;$380 = $372;$381 = $373;$382 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $368;$72 = 0;$74 = $369;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$378 = $72;$379 = $75;$380 = $73;$381 = $76;$382 = $77;
     label = 37;
     break;
    } else {
     $$0341462 = $$0341$lcssa;$$0345466 = $$0345$lcssa;$$0401472 = $$0401$lcssa;$383 = $72;$384 = $75;$385 = $77;$386 = $73;$387 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341461 = $$0341$lcssa;$$0345465 = $$0345$lcssa;$$0401471 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341462 = $$0341463;$$0345466 = $$0345467;$$0401472 = $$0401473;$383 = $378;$384 = $379;$385 = $382;$386 = $380;$387 = $381;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($382) {
    $$0341461 = $$0341463;$$0345465 = $$0345467;$$0401471 = $$0401473;$104 = $380;$106 = $378;$107 = $381;$109 = $379;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($385) {
   $$0341461 = $$0341462;$$0345465 = $$0345466;$$0401471 = $$0401472;$104 = $386;$106 = $383;$107 = $387;$109 = $384;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341461|0)==(0);
   if ($146) {
    $$3348 = $$0345465;
   } else {
    $147 = ($$0341461|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345465<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344501 = $$0341461;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344501) + 1)|0;
      $152 = ($$3344501|0)<(8);
      if ($152) {
       $$3344501 = $151;$150 = $149;
      } else {
       break;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $153 = (($$0345465) + 1)|0;
    $$3348 = $153;
   }
   $154 = ($$0401471|0)<(9);
   if ($154) {
    $155 = ($$0401471|0)<=($104|0);
    $156 = ($104|0)<(18);
    $or$cond5 = $155 & $156;
    if ($or$cond5) {
     $157 = ($104|0)==(9);
     if ($157) {
      $158 = (+($4|0));
      $159 = HEAP32[$6>>2]|0;
      $160 = (+($159>>>0));
      $161 = $158 * $160;
      $$1 = $161;
      break;
     }
     $162 = ($104|0)<(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $167 = (8 - ($104))|0;
      $168 = (2284 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (+($169|0));
      $171 = $166 / $170;
      $$1 = $171;
      break;
     }
     $$neg440 = Math_imul($104, -3)|0;
     $$neg441 = (($2) + 27)|0;
     $172 = (($$neg441) + ($$neg440))|0;
     $173 = ($172|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $174 = $$pre >>> $172;
     $175 = ($174|0)==(0);
     $or$cond579 = $173 | $175;
     if ($or$cond579) {
      $176 = (+($4|0));
      $177 = (+($$pre>>>0));
      $178 = $176 * $177;
      $179 = (($104) + -10)|0;
      $180 = (2284 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (+($181|0));
      $183 = $178 * $182;
      $$1 = $183;
      break;
     }
    }
   }
   $184 = (($104|0) % 9)&-1;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0380$ph = 0;$$1373$ph446 = $$3348;$$2352$ph447 = 0;$$2387$ph445 = $104;
   } else {
    $186 = ($104|0)>(-1);
    $187 = (($184) + 9)|0;
    $188 = $186 ? $184 : $187;
    $189 = (8 - ($188))|0;
    $190 = (2284 + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$3348|0)==(0);
    if ($192) {
     $$0350$lcssa553 = 0;$$0372 = 0;$$0385$lcssa552 = $104;
    } else {
     $193 = (1000000000 / ($191|0))&-1;
     $$0340494 = 0;$$0350492 = 0;$$0385491 = $104;$$4349493 = 0;
     while(1) {
      $194 = (($6) + ($$4349493<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195>>>0) % ($191>>>0))&-1;
      $197 = (($195>>>0) / ($191>>>0))&-1;
      $198 = (($197) + ($$0340494))|0;
      HEAP32[$194>>2] = $198;
      $199 = Math_imul($193, $196)|0;
      $200 = ($$4349493|0)==($$0350492|0);
      $201 = ($198|0)==(0);
      $or$cond418 = $200 & $201;
      $202 = (($$0350492) + 1)|0;
      $203 = $202 & 127;
      $204 = (($$0385491) + -9)|0;
      $$$0385 = $or$cond418 ? $204 : $$0385491;
      $$$0350 = $or$cond418 ? $203 : $$0350492;
      $205 = (($$4349493) + 1)|0;
      $206 = ($205|0)==($$3348|0);
      if ($206) {
       break;
      } else {
       $$0340494 = $199;$$0350492 = $$$0350;$$0385491 = $$$0385;$$4349493 = $205;
      }
     }
     $207 = ($199|0)==(0);
     if ($207) {
      $$0350$lcssa553 = $$$0350;$$0372 = $$3348;$$0385$lcssa552 = $$$0385;
     } else {
      $208 = (($6) + ($$3348<<2)|0);
      $209 = (($$3348) + 1)|0;
      HEAP32[$208>>2] = $199;
      $$0350$lcssa553 = $$$0350;$$0372 = $209;$$0385$lcssa552 = $$$0385;
     }
    }
    $210 = (9 - ($188))|0;
    $211 = (($210) + ($$0385$lcssa552))|0;
    $$0380$ph = 0;$$1373$ph446 = $$0372;$$2352$ph447 = $$0350$lcssa553;$$2387$ph445 = $211;
   }
   L101: while(1) {
    $212 = ($$2387$ph445|0)<(18);
    $213 = ($$2387$ph445|0)==(18);
    $214 = (($6) + ($$2352$ph447<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph446;
    while(1) {
     if (!($212)) {
      if (!($213)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = $$2387$ph445;$$6378$ph = $$1373;
       break L101;
      }
      $215 = HEAP32[$214>>2]|0;
      $216 = ($215>>>0)<(9007199);
      if (!($216)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $217 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $217;
     while(1) {
      $$5 = $$5$in & 127;
      $218 = (($6) + ($$5<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (_bitshift64Shl(($219|0),0,29)|0);
      $221 = tempRet0;
      $222 = (_i64Add(($220|0),($221|0),($$0334|0),0)|0);
      $223 = tempRet0;
      $224 = ($223>>>0)>(0);
      $225 = ($222>>>0)>(1000000000);
      $226 = ($223|0)==(0);
      $227 = $226 & $225;
      $228 = $224 | $227;
      if ($228) {
       $229 = (___udivdi3(($222|0),($223|0),1000000000,0)|0);
       $230 = tempRet0;
       $231 = (___uremdi3(($222|0),($223|0),1000000000,0)|0);
       $232 = tempRet0;
       $$1335 = $229;$$sink419$off0 = $231;
      } else {
       $$1335 = 0;$$sink419$off0 = $222;
      }
      HEAP32[$218>>2] = $$sink419$off0;
      $233 = (($$2374) + 127)|0;
      $234 = $233 & 127;
      $235 = ($$5|0)!=($234|0);
      $236 = ($$5|0)==($$2352$ph447|0);
      $or$cond420 = $235 | $236;
      $or$cond420$not = $or$cond420 ^ 1;
      $237 = ($$sink419$off0|0)==(0);
      $or$cond421 = $237 & $or$cond420$not;
      $$3375 = $or$cond421 ? $$5 : $$2374;
      $238 = (($$5) + -1)|0;
      if ($236) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $238;
      }
     }
     $239 = (($$0380) + -29)|0;
     $240 = ($$1335|0)==(0);
     if ($240) {
      $$0380 = $239;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $241 = (($$2387$ph445) + 9)|0;
    $242 = (($$2352$ph447) + 127)|0;
    $243 = $242 & 127;
    $244 = ($243|0)==($$3375|0);
    $245 = (($$3375) + 127)|0;
    $246 = $245 & 127;
    $247 = (($$3375) + 126)|0;
    $248 = $247 & 127;
    $249 = (($6) + ($248<<2)|0);
    if ($244) {
     $250 = (($6) + ($246<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$249>>2]|0;
     $253 = $252 | $251;
     HEAP32[$249>>2] = $253;
     $$4376 = $246;
    } else {
     $$4376 = $$3375;
    }
    $254 = (($6) + ($243<<2)|0);
    HEAP32[$254>>2] = $$1335;
    $$0380$ph = $239;$$1373$ph446 = $$4376;$$2352$ph447 = $243;$$2387$ph445 = $241;
   }
   L119: while(1) {
    $291 = (($$6378$ph) + 1)|0;
    $288 = $291 & 127;
    $292 = (($$6378$ph) + 127)|0;
    $293 = $292 & 127;
    $294 = (($6) + ($293<<2)|0);
    $$1381$ph557 = $$1381$ph;$$4354$ph558 = $$4354$ph;$$4389$ph = $$4389$ph443;
    while(1) {
     $267 = ($$4389$ph|0)==(18);
     $295 = ($$4389$ph|0)>(27);
     $$423 = $295 ? 9 : 1;
     $$1381 = $$1381$ph557;$$4354 = $$4354$ph558;
     while(1) {
      $$0336484 = 0;
      while(1) {
       $255 = (($$0336484) + ($$4354))|0;
       $256 = $255 & 127;
       $257 = ($256|0)==($$6378$ph|0);
       if ($257) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $258 = (($6) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (2316 + ($$0336484<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($259>>>0)<($261>>>0);
       if ($262) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $263 = ($259>>>0)>($261>>>0);
       if ($263) {
        break;
       }
       $264 = (($$0336484) + 1)|0;
       $265 = ($$0336484|0)<(1);
       if ($265) {
        $$0336484 = $264;
       } else {
        $$1337 = $264;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $266 = ($$1337|0)==(2);
       $or$cond11 = $267 & $266;
       if ($or$cond11) {
        $$0365482 = 0.0;$$4483 = 0;$$9481 = $$6378$ph;
        break L119;
       }
      }
      $268 = (($$423) + ($$1381))|0;
      $269 = ($$4354|0)==($$6378$ph|0);
      if ($269) {
       $$1381 = $268;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $270 = 1 << $$423;
     $271 = (($270) + -1)|0;
     $272 = 1000000000 >>> $$423;
     $$0332488 = 0;$$5355486 = $$4354;$$5390485 = $$4389$ph;$$6487 = $$4354;
     while(1) {
      $273 = (($6) + ($$6487<<2)|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & $271;
      $276 = $274 >>> $$423;
      $277 = (($276) + ($$0332488))|0;
      HEAP32[$273>>2] = $277;
      $278 = Math_imul($275, $272)|0;
      $279 = ($$6487|0)==($$5355486|0);
      $280 = ($277|0)==(0);
      $or$cond424 = $279 & $280;
      $281 = (($$5355486) + 1)|0;
      $282 = $281 & 127;
      $283 = (($$5390485) + -9)|0;
      $$$5390 = $or$cond424 ? $283 : $$5390485;
      $$$5355 = $or$cond424 ? $282 : $$5355486;
      $284 = (($$6487) + 1)|0;
      $285 = $284 & 127;
      $286 = ($285|0)==($$6378$ph|0);
      if ($286) {
       break;
      } else {
       $$0332488 = $278;$$5355486 = $$$5355;$$5390485 = $$$5390;$$6487 = $285;
      }
     }
     $287 = ($278|0)==(0);
     if ($287) {
      $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $289 = ($288|0)==($$$5355|0);
     if (!($289)) {
      break;
     }
     $296 = HEAP32[$294>>2]|0;
     $297 = $296 | 1;
     HEAP32[$294>>2] = $297;
     $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
    }
    $290 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$290>>2] = $278;
    $$1381$ph = $268;$$4354$ph = $$$5355;$$4389$ph443 = $$$5390;$$6378$ph = $288;
   }
   while(1) {
    $298 = (($$4483) + ($$4354))|0;
    $299 = $298 & 127;
    $300 = ($299|0)==($$9481|0);
    $301 = (($$9481) + 1)|0;
    $302 = $301 & 127;
    if ($300) {
     $303 = (($302) + -1)|0;
     $304 = (($6) + ($303<<2)|0);
     HEAP32[$304>>2] = 0;
     $$10 = $302;
    } else {
     $$10 = $$9481;
    }
    $305 = $$0365482 * 1.0E+9;
    $306 = (($6) + ($299<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (+($307>>>0));
    $309 = $305 + $308;
    $310 = (($$4483) + 1)|0;
    $exitcond = ($310|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365482 = $309;$$4483 = $310;$$9481 = $$10;
    }
   }
   $311 = (+($4|0));
   $312 = $309 * $311;
   $313 = (($$1381) + 53)|0;
   $314 = (($313) - ($3))|0;
   $315 = ($314|0)<($2|0);
   $316 = ($314|0)>(0);
   $$ = $316 ? $314 : 0;
   $$0333 = $315 ? $$ : $2;
   $317 = ($$0333|0)<(53);
   if ($317) {
    $318 = (105 - ($$0333))|0;
    $319 = (+_scalbn(1.0,$318));
    $320 = (+_copysignl($319,$312));
    $321 = (53 - ($$0333))|0;
    $322 = (+_scalbn(1.0,$321));
    $323 = (+_fmodl($312,$322));
    $324 = $312 - $323;
    $325 = $320 + $324;
    $$0360 = $320;$$0361 = $323;$$1366 = $325;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $312;
   }
   $326 = (($$4354) + 2)|0;
   $327 = $326 & 127;
   $328 = ($327|0)==($$10|0);
   if ($328) {
    $$3364 = $$0361;
   } else {
    $329 = (($6) + ($327<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330>>>0)<(500000000);
    do {
     if ($331) {
      $332 = ($330|0)==(0);
      if ($332) {
       $333 = (($$4354) + 3)|0;
       $334 = $333 & 127;
       $335 = ($334|0)==($$10|0);
       if ($335) {
        $$1362 = $$0361;
        break;
       }
      }
      $336 = $311 * 0.25;
      $337 = $336 + $$0361;
      $$1362 = $337;
     } else {
      $338 = ($330|0)==(500000000);
      if (!($338)) {
       $339 = $311 * 0.75;
       $340 = $339 + $$0361;
       $$1362 = $340;
       break;
      }
      $341 = (($$4354) + 3)|0;
      $342 = $341 & 127;
      $343 = ($342|0)==($$10|0);
      if ($343) {
       $344 = $311 * 0.5;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      } else {
       $346 = $311 * 0.75;
       $347 = $346 + $$0361;
       $$1362 = $347;
       break;
      }
     }
    } while(0);
    $348 = (53 - ($$0333))|0;
    $349 = ($348|0)>(1);
    if ($349) {
     $350 = (+_fmodl($$1362,1.0));
     $351 = $350 != 0.0;
     if ($351) {
      $$3364 = $$1362;
     } else {
      $352 = $$1362 + 1.0;
      $$3364 = $352;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $353 = $$1366 + $$3364;
   $354 = $353 - $$0360;
   $355 = $313 & 2147483647;
   $356 = (-2 - ($sum))|0;
   $357 = ($355|0)>($356|0);
   do {
    if ($357) {
     $358 = (+Math_abs((+$354)));
     $359 = !($358 >= 9007199254740992.0);
     $360 = $354 * 0.5;
     $not$ = $359 ^ 1;
     $361 = $not$&1;
     $$3383 = (($$1381) + ($361))|0;
     $$2367 = $359 ? $354 : $360;
     $362 = (($$3383) + 50)|0;
     $363 = ($362|0)>($7|0);
     if (!($363)) {
      $364 = ($$0333|0)!=($314|0);
      $narrow = $364 | $359;
      $$2371$v = $315 & $narrow;
      $365 = $$3364 != 0.0;
      $or$cond14 = $365 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $366 = (___errno_location()|0);
     HEAP32[$366>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $354;$$4384 = $$1381;
    }
   } while(0);
   $367 = (+_scalbnl($$3368,$$4384));
   $$1 = $367;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_426($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_426($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165167 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((11784) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165167 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((11784) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($$166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $93 = ($92|0)<(0);
        $94 = $93 << 31 >> 31;
        $95 = $92 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165168 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$262 = $103;$264 = $102;
       } else {
        $$1165168 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$262 = $292;$264 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165167 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165167) + -1)|0;
     $120 = $119 & $$1165167;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165167*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (12040 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((11784) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($$1165167>>>0)>($134>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((11784) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($$1165167>>>0)>($148>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($$1165167>>>0)<=($154>>>0);
      $157 = ($153>>>0)<($158>>>0);
      $159 = ($152>>>0)<($160>>>0);
      $161 = ($153|0)==($158|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165168 = $$1165167;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $166 | $168;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((11784) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($$1165167>>>0)<=($180>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165168 = $$1165167;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((11784) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($$1165167>>>0)>($124>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165167)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((11784) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($$1165167>>>0)>($199>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($$1165167>>>0)>($203>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165167|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$208 = $296;$210 = $295;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165167|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((11784) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($$1165167>>>0)>($236>>>0);
       if ($237) {
        $$7198 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165168 = $$1165167;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165168 = $$1165167;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((11784) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($$1165168>>>0)>($240>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((11784) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($$1165168>>>0)>($251>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $294;$264 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_298($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtox_298($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=2324; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 511]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_586($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint_587($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint_587($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((12049 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_589($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 12513;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$280 = $244;$282 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 12513;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 12513 : (12515);
     $$$ = $270 ? $$ : (12514);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 12513;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 12513;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 12523;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 12513;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (12513 + ($240)|0);
    $$286 = $or$cond278 ? 12513 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$280 = $229;$282 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$280 = $275;$282 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 12513;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out_586($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $281 = ($280|0)!=(0);
   $283 = ($282|0)!=(0);
   $284 = $281 | $283;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad($0,32,$$2261,$345,$$6268);
  _out_586($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$345,$347);
  _pad($0,48,$$$5,$343,0);
  _out_586($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg_589($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_586($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_587($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_589($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (12565 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_142()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_586($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_586($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_592($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 12530;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (12531) : (12536);
  $$$ = $16 ? $$ : (12533);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_592($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 12549 : 12553;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 12557 : 12561;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad($0,32,$2,$31,$32);
   _out_586($0,$$0521,$$0520);
   _out_586($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (12565 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad($0,32,$2,$106,$4);
    _out_586($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad($0,48,$2,$106,$107);
    _out_586($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad($0,48,$108,0,0);
    _out_586($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad($0,32,$2,$323,$4);
   _out_586($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out_586($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out_586($0,12581,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out_586($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out_586($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out_586($0,12581,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out_586($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out_586($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_592($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_122()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_122() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2448|0);
}
function ___pthread_self_142() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (12583 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 12671;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 12671;
  } else {
   $$01214 = 12671;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 511]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 511]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($$|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0100$lcssa = 0, $$0100136 = 0, $$0107135 = 0, $$0113134 = 0, $$099 = 0, $$10 = 0, $$1101 = 0, $$1101$ph = 0, $$1108$ph = 0, $$1108138 = 0, $$11124 = 0, $$1114 = 0, $$1114$ph = 0, $$11163 = 0, $$2 = 0, $$2102144 = 0, $$2109 = 0, $$2115143 = 0, $$3103 = 0, $$3110 = 0;
 var $$3116 = 0, $$4 = 0, $$4104 = 0, $$4111 = 0, $$4117 = 0, $$5 = 0, $$5105 = 0, $$5112 = 0, $$5112123 = 0, $$5112162 = 0, $$5118$ph = 0, $$5118137 = 0, $$6 = 0, $$6106$lcssa = 0, $$6106$ph = 0, $$6106139 = 0, $$6119 = 0, $$7 = 0, $$7120 = 0, $$8 = 0;
 var $$8121 = 0, $$9 = 0, $$9$sink = 0, $$9122 = 0, $$9122161 = 0, $$old1 = 0, $$pre$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$4104 = $4;$$4117 = $2;
    label = 25;
   } else {
    HEAP32[$3>>2] = 0;
    $$4 = $6;$$4111 = $0;$$8121 = $2;$$9 = $4;
    label = 43;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = (___pthread_self_124()|0);
   $10 = ((($9)) + 188|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ($0|0)!=(0|0);
   if (!($13)) {
    if ($14) {
     $$1108$ph = $0;$$5118$ph = $2;$$6106$ph = $4;
     label = 15;
     break;
    } else {
     $$1101$ph = $4;$$1114$ph = $2;
     label = 14;
     break;
    }
   }
   if (!($14)) {
    $16 = (_strlen($4)|0);
    $$099 = $16;
    label = 59;
    break;
   }
   $15 = ($2|0)==(0);
   L13: do {
    if ($15) {
     $$0100$lcssa = $4;
    } else {
     $$0100136 = $4;$$0107135 = $0;$$0113134 = $2;
     while(1) {
      $17 = HEAP8[$$0100136>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       break;
      }
      $19 = ((($$0100136)) + 1|0);
      $20 = $17 << 24 >> 24;
      $21 = $20 & 57343;
      $22 = ((($$0107135)) + 4|0);
      HEAP32[$$0107135>>2] = $21;
      $23 = (($$0113134) + -1)|0;
      $24 = ($23|0)==(0);
      if ($24) {
       $$0100$lcssa = $19;
       break L13;
      } else {
       $$0100136 = $19;$$0107135 = $22;$$0113134 = $23;
      }
     }
     HEAP32[$$0107135>>2] = 0;
     HEAP32[$1>>2] = 0;
     $25 = (($2) - ($$0113134))|0;
     $$099 = $25;
     label = 59;
     break L5;
    }
   } while(0);
   HEAP32[$1>>2] = $$0100$lcssa;
   $$099 = $2;
   label = 59;
  }
 } while(0);
 L19: while(1) {
  L20: do {
   if ((label|0) == 14) {
    label = 0;
    $$1101 = $$1101$ph;$$1114 = $$1114$ph;
    while(1) {
     $27 = HEAP8[$$1101>>0]|0;
     $28 = $27&255;
     $29 = (($28) + -1)|0;
     $30 = ($29>>>0)<(127);
     if ($30) {
      $31 = $$1101;
      $32 = $31 & 3;
      $33 = ($32|0)==(0);
      if ($33) {
       $34 = HEAP32[$$1101>>2]|0;
       $35 = (($34) + -16843009)|0;
       $36 = $35 | $34;
       $37 = $36 & -2139062144;
       $38 = ($37|0)==(0);
       $39 = $34&255;
       if ($38) {
        $$2102144 = $$1101;$$2115143 = $$1114;
        while(1) {
         $40 = ((($$2102144)) + 4|0);
         $41 = (($$2115143) + -4)|0;
         $42 = HEAP32[$40>>2]|0;
         $43 = (($42) + -16843009)|0;
         $44 = $43 | $42;
         $45 = $44 & -2139062144;
         $46 = ($45|0)==(0);
         if ($46) {
          $$2102144 = $40;$$2115143 = $41;
         } else {
          break;
         }
        }
        $47 = $42&255;
        $$3103 = $40;$$3116 = $41;$49 = $47;
       } else {
        $$3103 = $$1101;$$3116 = $$1114;$49 = $39;
       }
      } else {
       $$3103 = $$1101;$$3116 = $$1114;$49 = $27;
      }
     } else {
      $$3103 = $$1101;$$3116 = $$1114;$49 = $27;
     }
     $48 = $49&255;
     $50 = (($48) + -1)|0;
     $51 = ($50>>>0)<(127);
     if (!($51)) {
      break;
     }
     $52 = ((($$3103)) + 1|0);
     $53 = (($$3116) + -1)|0;
     $$1101 = $52;$$1114 = $53;
    }
    $54 = (($48) + -194)|0;
    $55 = ($54>>>0)>(50);
    if ($55) {
     $$11163 = $$3103;$$5112162 = $0;$$9122161 = $$3116;
     label = 53;
    } else {
     $56 = ((($$3103)) + 1|0);
     $57 = (1692 + ($54<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $$2 = $58;$$4104 = $56;$$4117 = $$3116;
     label = 25;
     continue L19;
    }
   }
   else if ((label|0) == 15) {
    label = 0;
    $26 = ($$5118$ph|0)==(0);
    L22: do {
     if ($26) {
      $$6106$lcssa = $$6106$ph;
     } else {
      $$1108138 = $$1108$ph;$$5118137 = $$5118$ph;$$6106139 = $$6106$ph;
      while(1) {
       $81 = HEAP8[$$6106139>>0]|0;
       $82 = $81&255;
       $83 = (($82) + -1)|0;
       $84 = ($83>>>0)<(127);
       do {
        if ($84) {
         $85 = $$6106139;
         $86 = $85 & 3;
         $87 = ($86|0)==(0);
         $88 = ($$5118137>>>0)>(4);
         $or$cond = $88 & $87;
         if ($or$cond) {
          $$2109 = $$1108138;$$6119 = $$5118137;$$7 = $$6106139;
          while(1) {
           $89 = HEAP32[$$7>>2]|0;
           $90 = (($89) + -16843009)|0;
           $91 = $90 | $89;
           $92 = $91 & -2139062144;
           $93 = ($92|0)==(0);
           if (!($93)) {
            label = 38;
            break;
           }
           $94 = ((($$7)) + 1|0);
           $95 = $89 & 255;
           $96 = ((($$2109)) + 4|0);
           HEAP32[$$2109>>2] = $95;
           $97 = ((($$7)) + 2|0);
           $98 = HEAP8[$94>>0]|0;
           $99 = $98&255;
           $100 = ((($$2109)) + 8|0);
           HEAP32[$96>>2] = $99;
           $101 = ((($$7)) + 3|0);
           $102 = HEAP8[$97>>0]|0;
           $103 = $102&255;
           $104 = ((($$2109)) + 12|0);
           HEAP32[$100>>2] = $103;
           $105 = ((($$7)) + 4|0);
           $106 = HEAP8[$101>>0]|0;
           $107 = $106&255;
           $108 = ((($$2109)) + 16|0);
           HEAP32[$104>>2] = $107;
           $109 = (($$6119) + -4)|0;
           $$old1 = ($109>>>0)>(4);
           if ($$old1) {
            $$2109 = $108;$$6119 = $109;$$7 = $105;
           } else {
            label = 37;
            break;
           }
          }
          if ((label|0) == 37) {
           label = 0;
           $$pre$pre = HEAP8[$105>>0]|0;
           $$3110 = $108;$$7120 = $109;$$8 = $105;$112 = $$pre$pre;
           break;
          }
          else if ((label|0) == 38) {
           label = 0;
           $110 = $89&255;
           $$3110 = $$2109;$$7120 = $$6119;$$8 = $$7;$112 = $110;
           break;
          }
         } else {
          $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$112 = $81;
         }
        } else {
         $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$112 = $81;
        }
       } while(0);
       $111 = $112&255;
       $113 = (($111) + -1)|0;
       $114 = ($113>>>0)<(127);
       if (!($114)) {
        break;
       }
       $115 = ((($$8)) + 1|0);
       $116 = ((($$3110)) + 4|0);
       HEAP32[$$3110>>2] = $111;
       $117 = (($$7120) + -1)|0;
       $118 = ($117|0)==(0);
       if ($118) {
        $$6106$lcssa = $115;
        break L22;
       } else {
        $$1108138 = $116;$$5118137 = $117;$$6106139 = $115;
       }
      }
      $119 = (($111) + -194)|0;
      $120 = ($119>>>0)>(50);
      if ($120) {
       $$11163 = $$8;$$5112162 = $$3110;$$9122161 = $$7120;
       label = 53;
       break L20;
      }
      $121 = ((($$8)) + 1|0);
      $122 = (1692 + ($119<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      $$4 = $123;$$4111 = $$3110;$$8121 = $$7120;$$9 = $121;
      label = 43;
      continue L19;
     }
    } while(0);
    HEAP32[$1>>2] = $$6106$lcssa;
    $$099 = $2;
    label = 59;
    continue L19;
   }
   else if ((label|0) == 25) {
    label = 0;
    $59 = HEAP8[$$4104>>0]|0;
    $60 = $59&255;
    $61 = $60 >>> 3;
    $62 = (($61) + -16)|0;
    $63 = $$2 >> 26;
    $64 = (($61) + ($63))|0;
    $65 = $62 | $64;
    $66 = ($65>>>0)>(7);
    if ($66) {
     $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
     label = 52;
    } else {
     $67 = ((($$4104)) + 1|0);
     $68 = $$2 & 33554432;
     $69 = ($68|0)==(0);
     if ($69) {
      $$5105 = $67;
     } else {
      $70 = HEAP8[$67>>0]|0;
      $71 = $70 & -64;
      $72 = ($71<<24>>24)==(-128);
      if (!($72)) {
       $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
       label = 52;
       break;
      }
      $73 = ((($$4104)) + 2|0);
      $74 = $$2 & 524288;
      $75 = ($74|0)==(0);
      if ($75) {
       $$5105 = $73;
      } else {
       $76 = HEAP8[$73>>0]|0;
       $77 = $76 & -64;
       $78 = ($77<<24>>24)==(-128);
       if (!($78)) {
        $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
        label = 52;
        break;
       }
       $79 = ((($$4104)) + 3|0);
       $$5105 = $79;
      }
     }
     $80 = (($$4117) + -1)|0;
     $$1101$ph = $$5105;$$1114$ph = $80;
     label = 14;
     continue L19;
    }
   }
   else if ((label|0) == 43) {
    label = 0;
    $124 = HEAP8[$$9>>0]|0;
    $125 = $124&255;
    $126 = $125 >>> 3;
    $127 = (($126) + -16)|0;
    $128 = $$4 >> 26;
    $129 = (($126) + ($128))|0;
    $130 = $127 | $129;
    $131 = ($130>>>0)>(7);
    if ($131) {
     $$5112 = $$4111;$$6 = $$4;$$9$sink = $$9;$$9122 = $$8121;
     label = 52;
    } else {
     $132 = $$4 << 6;
     $133 = ((($$9)) + 1|0);
     $134 = (($125) + -128)|0;
     $135 = $134 | $132;
     $136 = ($135|0)<(0);
     do {
      if ($136) {
       $137 = HEAP8[$133>>0]|0;
       $138 = $137&255;
       $139 = (($138) + -128)|0;
       $140 = ($139>>>0)>(63);
       if ($140) {
        $141 = ((($$9)) + -1|0);
        $$11124 = $141;$$5112123 = $$4111;
        break L20;
       }
       $142 = $135 << 6;
       $143 = ((($$9)) + 2|0);
       $144 = $139 | $142;
       $145 = ($144|0)<(0);
       if ($145) {
        $146 = HEAP8[$143>>0]|0;
        $147 = $146&255;
        $148 = (($147) + -128)|0;
        $149 = ($148>>>0)>(63);
        if ($149) {
         $150 = ((($$9)) + -1|0);
         $$11124 = $150;$$5112123 = $$4111;
         break L20;
        } else {
         $151 = $144 << 6;
         $152 = ((($$9)) + 3|0);
         $153 = $148 | $151;
         $$10 = $152;$$5 = $153;
         break;
        }
       } else {
        $$10 = $143;$$5 = $144;
       }
      } else {
       $$10 = $133;$$5 = $135;
      }
     } while(0);
     $154 = ((($$4111)) + 4|0);
     HEAP32[$$4111>>2] = $$5;
     $155 = (($$8121) + -1)|0;
     $$1108$ph = $154;$$5118$ph = $155;$$6106$ph = $$10;
     label = 15;
     continue L19;
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    return ($$099|0);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   $156 = ((($$9$sink)) + -1|0);
   $157 = ($$6|0)==(0);
   if ($157) {
    $$11163 = $156;$$5112162 = $$5112;$$9122161 = $$9122;
    label = 53;
   } else {
    $$11124 = $156;$$5112123 = $$5112;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $158 = HEAP8[$$11163>>0]|0;
   $159 = ($158<<24>>24)==(0);
   if ($159) {
    $160 = ($$5112162|0)==(0|0);
    if (!($160)) {
     HEAP32[$$5112162>>2] = 0;
     HEAP32[$1>>2] = 0;
    }
    $161 = (($2) - ($$9122161))|0;
    $$099 = $161;
    label = 59;
    continue;
   } else {
    $$11124 = $$11163;$$5112123 = $$5112162;
   }
  }
  $162 = (___errno_location()|0);
  HEAP32[$162>>2] = 84;
  $163 = ($$5112123|0)==(0|0);
  if ($163) {
   $$099 = -1;
   label = 59;
   continue;
  }
  HEAP32[$1>>2] = $$11124;
  $$099 = -1;
  label = 59;
 }
 return (0)|0;
}
function ___pthread_self_124() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _dummy() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function ___loc_is_allocated($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)!=(0|0);
 $2 = ($0|0)!=(19448|0);
 $or$cond = $1 & $2;
 $3 = ($0|0)!=(1668|0);
 $narrow = $3 & $or$cond;
 $4 = $narrow&1;
 return ($4|0);
}
function ___newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$033$ = 0, $$03339 = 0, $$03440 = 0, $$036 = 0, $$13538 = 0, $$pre = 0, $$pre42 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond41 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (___loc_is_allocated($2)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = ($2|0)!=(0|0);
   $$03339 = 0;$$13538 = 0;
   while(1) {
    $$pre = 1 << $$13538;
    $$pre42 = $$pre & $0;
    $13 = ($$pre42|0)==(0);
    $or$cond = $6 & $13;
    if ($or$cond) {
     $14 = (($2) + ($$13538<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $$0 = $15;
    } else {
     $16 = ($$pre42|0)!=(0);
     $17 = $16 ? $1 : 24556;
     $18 = (___get_locale($$13538,$17)|0);
     $$0 = $18;
    }
    $19 = ($$0|0)!=(0|0);
    $20 = $19&1;
    $$033$ = (($$03339) + ($20))|0;
    $21 = (($3) + ($$13538<<2)|0);
    HEAP32[$21>>2] = $$0;
    $22 = (($$13538) + 1)|0;
    $exitcond = ($22|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$03339 = $$033$;$$13538 = $22;
    }
   }
   switch ($$033$|0) {
   case 0:  {
    $$036 = 19448;
    break L1;
    break;
   }
   case 1:  {
    $23 = HEAP32[$3>>2]|0;
    $24 = ($23|0)==(1620|0);
    if ($24) {
     $$036 = 1668;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$036 = $2;
  } else {
   $$03440 = 0;
   while(1) {
    $7 = 1 << $$03440;
    $8 = $7 & $0;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (($2) + ($$03440<<2)|0);
     $11 = (___get_locale($$03440,$1)|0);
     HEAP32[$10>>2] = $11;
    }
    $12 = (($$03440) + 1)|0;
    $exitcond41 = ($12|0)==(6);
    if ($exitcond41) {
     $$036 = $2;
     break;
    } else {
     $$03440 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$036|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c_dot_utf8$$4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((14475|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (14482 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((14554|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 14559;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = $21;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 14559;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 14559;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,14559)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,14567)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[4869]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((19480|0));
     $48 = HEAP32[4869]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((19480|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(19392)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((14573|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($67) + ($$neg))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           (_memcpy(($2|0),($$1100111|0),($70|0))|0);
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           (_memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0);
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $86 = $$pre121;
          } else {
           $86 = $68;
          }
          $87 = ($86<<24>>24)!=(0);
          $88 = $87&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         if ($79) {
          $92 = HEAP32[$3>>2]|0;
          (___munmap($76,$92)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $80 = HEAP32[$3>>2]|0;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          (_memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0);
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[4869]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[4869] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $93 = (_malloc(28)|0);
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$4 = $93;
      } else {
       $95 = HEAP32[405]|0;
       HEAP32[$93>>2] = $95;
       $96 = HEAP32[(1624)>>2]|0;
       $97 = ((($93)) + 4|0);
       HEAP32[$97>>2] = $96;
       $98 = ((($93)) + 8|0);
       (_memcpy(($98|0),($$2123|0),($$093$lcssa|0))|0);
       $99 = (($98) + ($$093$lcssa)|0);
       HEAP8[$99>>0] = 0;
       $100 = HEAP32[4869]|0;
       $101 = ((($93)) + 24|0);
       HEAP32[$101>>2] = $100;
       HEAP32[4869] = $93;
       $$4 = $93;
      }
     }
     $102 = ($$4|0)==(0|0);
     $103 = ($0|0)==(0);
     $or$cond = $103 & $102;
     $__c_dot_utf8$$4 = $or$cond ? 1620 : $$4;
     ___unlock((19480|0));
     $$0 = $__c_dot_utf8$$4;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 1620;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _freelocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___loc_is_allocated($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _free($0);
 }
 return;
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, $phitmp$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isdigit($0)|0);
 $2 = ($1|0)!=(0);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $5 | $2;
 $phitmp$ = $narrow&1;
 return ($phitmp$|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 19488 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_127()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$$47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 17;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (1692 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$44 = $33;
      }
      while(1) {
       $41 = $$141 << 6;
       $42 = ((($$1)) + 1|0);
       $43 = $44&255;
       $45 = (($43) + -128)|0;
       $46 = $45 | $41;
       $47 = (($$144) + -1)|0;
       $48 = ($46|0)<(0);
       if (!($48)) {
        break;
       }
       $50 = ($47|0)==(0);
       if ($50) {
        $$2 = $46;
        break L14;
       }
       $51 = HEAP8[$42>>0]|0;
       $52 = $51 & -64;
       $53 = ($52<<24>>24)==(-128);
       if ($53) {
        $$1 = $42;$$141 = $46;$$144 = $47;$44 = $51;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $46;
      $49 = (($2) - ($47))|0;
      $$0 = $49;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $54 = (___errno_location()|0);
  HEAP32[$54>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_127() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isdigit($0)|0);
 return ($2|0);
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function ___uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_118()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  $5 = ($0|0)==((-1)|0);
  $6 = $5 ? (19424) : $0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($3|0)==((19424)|0);
 $8 = $7 ? (-1) : $3;
 return ($8|0);
}
function ___pthread_self_118() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ? $2 : 19492;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $$05675 = $7;$$05874 = 0;$10 = $8;
    while(1) {
     $11 = ($10>>>0)>(127);
     if ($11) {
      $12 = (_wcrtomb($4,$10,0)|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $12;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05874))|0;
     $14 = ((($$05675)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = $$159;
      break;
     } else {
      $$05675 = $14;$$05874 = $$159;$10 = $15;
     }
    }
   }
  } else {
   $6 = ($2>>>0)>(3);
   L9: do {
    if ($6) {
     $$pre = HEAP32[$1>>2]|0;
     $$05785 = $0;$$26084 = $2;$19 = $$pre;
     while(1) {
      $18 = HEAP32[$19>>2]|0;
      $20 = (($18) + -1)|0;
      $21 = ($20>>>0)>(126);
      if ($21) {
       $22 = ($18|0)==(0);
       if ($22) {
        break;
       }
       $24 = (_wcrtomb($$05785,$18,0)|0);
       $25 = ($24|0)==(-1);
       if ($25) {
        $$0 = -1;
        break L1;
       }
       $26 = (($$05785) + ($24)|0);
       $27 = (($$26084) - ($24))|0;
       $$1 = $26;$$361 = $27;$32 = $19;
      } else {
       $28 = $18&255;
       $29 = ((($$05785)) + 1|0);
       HEAP8[$$05785>>0] = $28;
       $30 = (($$26084) + -1)|0;
       $$pre100 = HEAP32[$1>>2]|0;
       $$1 = $29;$$361 = $30;$32 = $$pre100;
      }
      $31 = ((($32)) + 4|0);
      HEAP32[$1>>2] = $31;
      $33 = ($$361>>>0)>(3);
      if ($33) {
       $$05785 = $$1;$$26084 = $$361;$19 = $31;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L9;
      }
     }
     HEAP8[$$05785>>0] = 0;
     HEAP32[$1>>2] = 0;
     $23 = (($2) - ($$26084))|0;
     $$0 = $23;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $17 = ($$260$lcssa|0)==(0);
   if ($17) {
    $$0 = $2;
   } else {
    $$pre101 = HEAP32[$1>>2]|0;
    $$279 = $$057$lcssa;$$478 = $$260$lcssa;$35 = $$pre101;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 19;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$478>>>0)<($40>>>0);
      if ($42) {
       label = 22;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$279,$44,0)|0);
      $45 = (($$279) + ($40)|0);
      $46 = (($$478) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$279)) + 1|0);
      HEAP8[$$279>>0] = $47;
      $49 = (($$478) + -1)|0;
      $$pre102 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre102;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$279 = $$3;$$478 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$279>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$478))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 22) {
     $43 = (($2) - ($$478))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_136()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$$>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (1692 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$$>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$$>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$$>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_136() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$59 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05274 = $2;$$05573 = $$;$$076 = $$59;$44 = $$cast;
   while(1) {
    $11 = $$05274 >>> 2;
    $12 = ($11>>>0)>=($$05573>>>0);
    $13 = ($$05274>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$064 = $$076;$$150 = $$04975;$$153 = $$05274;$$257 = $$05573;$25 = $44;
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11;
    $15 = (($$05274) - ($$055$))|0;
    $16 = (_mbsrtowcs($$076,$6,$$055$,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$076|0)==($5|0);
    $19 = (($$076) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$156 = (($$05573) - ($20))|0;
    $$1 = $18 ? $$076 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$156|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05274 = $15;$$05573 = $$156;$$076 = $$1;$44 = $22;
    } else {
     $$064 = $$1;$$150 = $21;$$153 = $15;$$257 = $$156;$25 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$064 = $$076;$$150 = -1;$$153 = $15;$$257 = 0;$25 = $$pr$pre;
  } else {
   $$064 = $$59;$$150 = 0;$$153 = $2;$$257 = $$;$25 = $$cast;
  }
 } while(0);
 $26 = ($25|0)==(0|0);
 L8: do {
  if ($26) {
   $$3 = $$150;
  } else {
   $27 = ($$257|0)!=(0);
   $28 = ($$153|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25469 = $$153;$$271 = $$064;$$35868 = $$257;$30 = $25;
    while(1) {
     $31 = (_mbrtowc($$271,$30,$$25469,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25469) - ($31))|0;
     $37 = ((($$271)) + 4|0);
     $38 = (($$35868) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25469 = $36;$$271 = $37;$$35868 = $38;$30 = $35;
     } else {
      $$3 = $39;
      break L8;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$3 = $$25170;
     break L8;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$3 = $$25170;
     break L8;
    }
    }
   } else {
    $$3 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04773 = 0, $$05072 = 0, $$053$$050 = 0, $$05371 = 0, $$062 = 0, $$074 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$154 = 0, $$24968 = 0, $$25267 = 0, $$255 = 0, $$269 = 0, $$3 = 0, $$35666 = 0, $$57 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$57 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond70 = $10 & $9;
 L1: do {
  if ($or$cond70) {
   $$04773 = 0;$$05072 = $2;$$05371 = $$;$$074 = $$57;$45 = $$cast;
   while(1) {
    $11 = ($$05072>>>0)>=($$05371>>>0);
    $12 = ($$05072>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$062 = $$074;$$148 = $$04773;$$151 = $$05072;$$255 = $$05371;$24 = $45;
     break L1;
    }
    $$053$$050 = $11 ? $$05371 : $$05072;
    $14 = (($$05072) - ($$053$$050))|0;
    $15 = (_wcsrtombs($$074,$6,$$053$$050,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$074|0)==($5|0);
    $18 = (($$074) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$154 = (($$05371) - ($19))|0;
    $$1 = $17 ? $$074 : $18;
    $20 = (($15) + ($$04773))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$154|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04773 = $20;$$05072 = $14;$$05371 = $$154;$$074 = $$1;$45 = $21;
    } else {
     $$062 = $$1;$$148 = $20;$$151 = $14;$$255 = $$154;$24 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$062 = $$074;$$148 = -1;$$151 = $14;$$255 = 0;$24 = $$pr$pre;
  } else {
   $$062 = $$57;$$148 = 0;$$151 = $2;$$255 = $$;$24 = $$cast;
  }
 } while(0);
 $25 = ($24|0)==(0|0);
 L8: do {
  if ($25) {
   $$3 = $$148;
  } else {
   $26 = ($$255|0)!=(0);
   $27 = ($$151|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24968 = $$148;$$25267 = $$151;$$269 = $$062;$$35666 = $$255;$30 = $24;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$269,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25267) + -1)|0;
     $38 = (($$269) + ($31)|0);
     $39 = (($$35666) - ($31))|0;
     $40 = (($31) + ($$24968))|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24968 = $40;$$25267 = $37;$$269 = $38;$$35666 = $39;$30 = $36;
     } else {
      $$3 = $40;
      break L8;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$3 = $$24968;
    } else {
     $$3 = -1;
    }
   } else {
    $$3 = $$148;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$3|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 511]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((19496|0));
 return (19504|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((19496|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[506]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[506]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 511]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 344;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_568($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288$ = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0;
 var $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$317 = 0;
 var $$318 = 0, $$319 = 0, $$320 = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0;
 var $$9 = 0, $$9314 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$pr = 0, $$pr324 = 0, $$pr327 = 0, $$pre = 0, $$pre458 = 0, $$pre460 = 0, $$sink = 0, $$sink$in = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor332 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond316 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $313 = $10;
 } else {
  $313 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273408 = $1;$$0283407 = 0;$$0288404 = 0;$$0305402 = 0;$20 = $11;$315 = 0;
   L6: while(1) {
    $19 = $20&255;
    $21 = (_isspace($19)|0);
    $22 = ($21|0)==(0);
    L8: do {
     if ($22) {
      $49 = HEAP8[$$0273408>>0]|0;
      $50 = ($49<<24>>24)==(37);
      L10: do {
       if ($50) {
        $51 = ((($$0273408)) + 1|0);
        $52 = HEAP8[$51>>0]|0;
        L12: do {
         switch ($52<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $73 = ((($$0273408)) + 2|0);
          $$0293 = 0;$$2275 = $73;
          break;
         }
         default: {
          $74 = $52&255;
          $75 = (_isdigit($74)|0);
          $76 = ($75|0)==(0);
          if (!($76)) {
           $77 = ((($$0273408)) + 2|0);
           $78 = HEAP8[$77>>0]|0;
           $79 = ($78<<24>>24)==(36);
           if ($79) {
            $80 = HEAP8[$51>>0]|0;
            $81 = $80&255;
            $82 = (($81) + -48)|0;
            $83 = (_arg_n_512($2,$82)|0);
            $84 = ((($$0273408)) + 3|0);
            $$0293 = $83;$$2275 = $84;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $85 = $arglist_current;
          $86 = ((0) + 4|0);
          $expanded1 = $86;
          $expanded = (($expanded1) - 1)|0;
          $87 = (($85) + ($expanded))|0;
          $88 = ((0) + 4|0);
          $expanded5 = $88;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $89 = $87 & $expanded3;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next = ((($90)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $91;$$2275 = $51;
         }
         }
        } while(0);
        $92 = HEAP8[$$2275>>0]|0;
        $93 = $92&255;
        $94 = (_isdigit($93)|0);
        $95 = ($94|0)==(0);
        if ($95) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266397 = 0;$$3396 = $$2275;
         while(1) {
          $96 = ($$0266397*10)|0;
          $97 = HEAP8[$$3396>>0]|0;
          $98 = $97&255;
          $99 = (($96) + -48)|0;
          $100 = (($99) + ($98))|0;
          $101 = ((($$3396)) + 1|0);
          $102 = HEAP8[$101>>0]|0;
          $103 = $102&255;
          $104 = (_isdigit($103)|0);
          $105 = ($104|0)==(0);
          if ($105) {
           $$0266$lcssa = $100;$$3$lcssa = $101;
           break;
          } else {
           $$0266397 = $100;$$3396 = $101;
          }
         }
        }
        $106 = HEAP8[$$3$lcssa>>0]|0;
        $107 = ($106<<24>>24)==(109);
        $108 = ((($$3$lcssa)) + 1|0);
        if ($107) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $$pr = HEAP8[$108>>0]|0;
         $$0270 = $110;$$1306 = 0;$$4 = $108;$112 = $$pr;$318 = 0;
        } else {
         $$0270 = 0;$$1306 = $$0305402;$$4 = $$3$lcssa;$112 = $106;$318 = $315;
        }
        $111 = ((($$4)) + 1|0);
        switch ($112<<24>>24) {
        case 104:  {
         $113 = HEAP8[$111>>0]|0;
         $114 = ($113<<24>>24)==(104);
         $115 = ((($$4)) + 2|0);
         $$317 = $114 ? $115 : $111;
         $$318 = $114 ? -2 : -1;
         $$0268 = $$318;$$5 = $$317;
         break;
        }
        case 108:  {
         $116 = HEAP8[$111>>0]|0;
         $117 = ($116<<24>>24)==(108);
         $118 = ((($$4)) + 2|0);
         $$319 = $117 ? $118 : $111;
         $$320 = $117 ? 3 : 1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $111;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $111;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $111;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$319 = $318;
         label = 136;
         break L6;
        }
        }
        $119 = HEAP8[$$5>>0]|0;
        $120 = $119&255;
        $121 = $120 & 47;
        $122 = ($121|0)==(3);
        $123 = $120 | 32;
        $$ = $122 ? $123 : $120;
        $$$0268 = $122 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $124 = ($$0266$lcssa|0)>(1);
         $$$0266 = $124 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283407;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283407;
         break;
        }
        case 110:  {
         $125 = ($$0283407|0)<(0);
         $126 = $125 << 31 >> 31;
         _store_int_513($$0293,$$$0268,$$0283407,$126);
         $$11 = $$5;$$1289 = $$0288404;$$2285 = $$0283407;$$6311 = $$1306;$316 = $318;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $127 = HEAP32[$13>>2]|0;
          $128 = HEAP32[$14>>2]|0;
          $129 = ($127>>>0)<($128>>>0);
          if ($129) {
           $130 = ((($127)) + 1|0);
           HEAP32[$13>>2] = $130;
           $131 = HEAP8[$127>>0]|0;
           $132 = $131&255;
           $134 = $132;
          } else {
           $133 = (___shgetc($0)|0);
           $134 = $133;
          }
          $135 = (_isspace($134)|0);
          $136 = ($135|0)==(0);
          if ($136) {
           break;
          }
         }
         $137 = HEAP32[$14>>2]|0;
         $138 = ($137|0)==(0|0);
         if ($138) {
          $$pre458 = HEAP32[$13>>2]|0;
          $146 = $$pre458;
         } else {
          $139 = HEAP32[$13>>2]|0;
          $140 = ((($139)) + -1|0);
          HEAP32[$13>>2] = $140;
          $141 = $140;
          $146 = $141;
         }
         $142 = HEAP32[$15>>2]|0;
         $143 = HEAP32[$16>>2]|0;
         $144 = (($142) + ($$0283407))|0;
         $145 = (($144) + ($146))|0;
         $147 = (($145) - ($143))|0;
         $$1267 = $$0266$lcssa;$$1284 = $147;
        }
        }
        ___shlim($0,$$1267);
        $148 = HEAP32[$13>>2]|0;
        $149 = HEAP32[$14>>2]|0;
        $150 = ($148>>>0)<($149>>>0);
        if ($150) {
         $151 = ((($148)) + 1|0);
         HEAP32[$13>>2] = $151;
         $154 = $149;
        } else {
         $152 = (___shgetc($0)|0);
         $153 = ($152|0)<(0);
         if ($153) {
          $$7312 = $$1306;$319 = $318;
          label = 136;
          break L6;
         }
         $$pr327 = HEAP32[$14>>2]|0;
         $154 = $$pr327;
        }
        $155 = ($154|0)==(0|0);
        if (!($155)) {
         $156 = HEAP32[$13>>2]|0;
         $157 = ((($156)) + -1|0);
         HEAP32[$13>>2] = $157;
        }
        L58: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $158 = ($$|0)==(99);
          $159 = $$ | 16;
          $160 = ($159|0)==(115);
          L60: do {
           if ($160) {
            $161 = ($$|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($161) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $162 = ((($$5)) + 1|0);
            $163 = HEAP8[$162>>0]|0;
            $164 = ($163<<24>>24)==(94);
            $165 = ((($$5)) + 2|0);
            $$0292 = $164&1;
            $$6 = $164 ? $165 : $162;
            (_memset(($4|0),($$0292|0),257)|0);
            HEAP8[$4>>0] = 0;
            $166 = HEAP8[$$6>>0]|0;
            switch ($166<<24>>24) {
            case 45:  {
             $$6$pn = $$6;$$sink330 = 46;
             label = 65;
             break;
            }
            case 93:  {
             $$6$pn = $$6;$$sink330 = 94;
             label = 65;
             break;
            }
            default: {
             $$7 = $$6;$168 = $166;
            }
            }
            while(1) {
             if ((label|0) == 65) {
              label = 0;
              $$sink$in = $$0292 ^ 1;
              $$sink = $$sink$in&255;
              $167 = (($4) + ($$sink330)|0);
              HEAP8[$167>>0] = $$sink;
              $$7$ph = ((($$6$pn)) + 1|0);
              $$pr324 = HEAP8[$$7$ph>>0]|0;
              $$7 = $$7$ph;$168 = $$pr324;
             }
             L70: do {
              switch ($168<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$319 = $318;
               label = 136;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L60;
               break;
              }
              case 45:  {
               $169 = ((($$7)) + 1|0);
               $170 = HEAP8[$169>>0]|0;
               switch ($170<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$183 = 45;
                break L70;
                break;
               }
               default: {
               }
               }
               $171 = ((($$7)) + -1|0);
               $172 = HEAP8[$171>>0]|0;
               $173 = ($172&255)<($170&255);
               if ($173) {
                $174 = $172&255;
                $175 = $$0292 ^ 1;
                $176 = $175&255;
                $$0286399 = $174;
                while(1) {
                 $177 = (($$0286399) + 1)|0;
                 $178 = (($4) + ($177)|0);
                 HEAP8[$178>>0] = $176;
                 $179 = HEAP8[$169>>0]|0;
                 $180 = $179&255;
                 $181 = ($177|0)<($180|0);
                 if ($181) {
                  $$0286399 = $177;
                 } else {
                  $$8 = $169;$183 = $179;
                  break;
                 }
                }
               } else {
                $$8 = $169;$183 = $170;
               }
               break;
              }
              default: {
               $$8 = $$7;$183 = $168;
              }
              }
             } while(0);
             $182 = $183&255;
             $184 = (($182) + 1)|0;
             $$6$pn = $$8;$$sink330 = $184;
             label = 65;
            }
           }
          } while(0);
          $185 = (($$1267) + 1)|0;
          $186 = $158 ? $185 : 31;
          $187 = ($$$0268|0)==(1);
          $188 = ($$0270|0)!=(0);
          L78: do {
           if ($187) {
            if ($188) {
             $189 = $186 << 2;
             $190 = (_malloc($189)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $$7312 = 0;$319 = 0;
              label = 136;
              break L6;
             } else {
              $321 = $190;
             }
            } else {
             $321 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $186;$$0278$ph = 0;$$ph = $321;
            L83: while(1) {
             $192 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L87: while(1) {
               $193 = HEAP32[$13>>2]|0;
               $194 = HEAP32[$14>>2]|0;
               $195 = ($193>>>0)<($194>>>0);
               if ($195) {
                $196 = ((($193)) + 1|0);
                HEAP32[$13>>2] = $196;
                $197 = HEAP8[$193>>0]|0;
                $198 = $197&255;
                $201 = $198;
               } else {
                $199 = (___shgetc($0)|0);
                $201 = $199;
               }
               $200 = (($201) + 1)|0;
               $202 = (($4) + ($200)|0);
               $203 = HEAP8[$202>>0]|0;
               $204 = ($203<<24>>24)==(0);
               if ($204) {
                break L83;
               }
               $205 = $201&255;
               HEAP8[$6>>0] = $205;
               $206 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($206|0) {
               case -1:  {
                $$7312 = 0;$319 = $$ph;
                label = 136;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L87;
               }
               }
              }
              if ($192) {
               $$1279 = $$0278$ph336;
              } else {
               $207 = (($$ph) + ($$0278$ph336<<2)|0);
               $208 = (($$0278$ph336) + 1)|0;
               $209 = HEAP32[$5>>2]|0;
               HEAP32[$207>>2] = $209;
               $$1279 = $208;
              }
              $210 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $188 & $210;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor332 = $$0276$ph << 1;
             $211 = $factor332 | 1;
             $212 = $211 << 2;
             $213 = (_realloc($$ph,$212)|0);
             $214 = ($213|0)==(0|0);
             if ($214) {
              $$7312 = 0;$319 = $$ph;
              label = 136;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $211;$$ph = $213;$$0278$ph = $$0278$ph$phi;
             }
            }
            $215 = (_mbsinit($3)|0);
            $216 = ($215|0)==(0);
            if ($216) {
             $$7312 = 0;$319 = $$ph;
             label = 136;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$322 = $$ph;
            }
           } else {
            if ($188) {
             $217 = (_malloc($186)|0);
             $218 = ($217|0)==(0|0);
             if ($218) {
              $$7312 = 0;$319 = 0;
              label = 136;
              break L6;
             } else {
              $$1277$ph = $186;$$2280$ph = 0;$$2307$ph = $217;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $219 = HEAP32[$13>>2]|0;
               $220 = HEAP32[$14>>2]|0;
               $221 = ($219>>>0)<($220>>>0);
               if ($221) {
                $222 = ((($219)) + 1|0);
                HEAP32[$13>>2] = $222;
                $223 = HEAP8[$219>>0]|0;
                $224 = $223&255;
                $227 = $224;
               } else {
                $225 = (___shgetc($0)|0);
                $227 = $225;
               }
               $226 = (($227) + 1)|0;
               $228 = (($4) + ($226)|0);
               $229 = HEAP8[$228>>0]|0;
               $230 = ($229<<24>>24)==(0);
               if ($230) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$322 = 0;
                break L78;
               }
               $231 = $227&255;
               $232 = (($$2280) + 1)|0;
               $233 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$233>>0] = $231;
               $234 = ($232|0)==($$1277$ph|0);
               if ($234) {
                break;
               } else {
                $$2280 = $232;
               }
              }
              $factor = $$1277$ph << 1;
              $235 = $factor | 1;
              $236 = (_realloc($$2307$ph,$235)|0);
              $237 = ($236|0)==(0|0);
              if ($237) {
               $$7312 = $$2307$ph;$319 = 0;
               label = 136;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $235;$$2307$ph = $236;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $238 = ($$0293|0)==(0|0);
            if ($238) {
             while(1) {
              $254 = HEAP32[$13>>2]|0;
              $255 = HEAP32[$14>>2]|0;
              $256 = ($254>>>0)<($255>>>0);
              if ($256) {
               $257 = ((($254)) + 1|0);
               HEAP32[$13>>2] = $257;
               $258 = HEAP8[$254>>0]|0;
               $259 = $258&255;
               $262 = $259;
              } else {
               $260 = (___shgetc($0)|0);
               $262 = $260;
              }
              $261 = (($262) + 1)|0;
              $263 = (($4) + ($261)|0);
              $264 = HEAP8[$263>>0]|0;
              $265 = ($264<<24>>24)==(0);
              if ($265) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$322 = 0;
               break L78;
              }
             }
            } else {
             $$3281 = 0;
            }
            while(1) {
             $239 = HEAP32[$13>>2]|0;
             $240 = HEAP32[$14>>2]|0;
             $241 = ($239>>>0)<($240>>>0);
             if ($241) {
              $242 = ((($239)) + 1|0);
              HEAP32[$13>>2] = $242;
              $243 = HEAP8[$239>>0]|0;
              $244 = $243&255;
              $247 = $244;
             } else {
              $245 = (___shgetc($0)|0);
              $247 = $245;
             }
             $246 = (($247) + 1)|0;
             $248 = (($4) + ($246)|0);
             $249 = HEAP8[$248>>0]|0;
             $250 = ($249<<24>>24)==(0);
             if ($250) {
              $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$322 = 0;
              break L78;
             }
             $251 = $247&255;
             $252 = (($$3281) + 1)|0;
             $253 = (($$0293) + ($$3281)|0);
             HEAP8[$253>>0] = $251;
             $$3281 = $252;
            }
           }
          } while(0);
          $266 = HEAP32[$14>>2]|0;
          $267 = ($266|0)==(0|0);
          if ($267) {
           $$pre460 = HEAP32[$13>>2]|0;
           $274 = $$pre460;
          } else {
           $268 = HEAP32[$13>>2]|0;
           $269 = ((($268)) + -1|0);
           HEAP32[$13>>2] = $269;
           $270 = $269;
           $274 = $270;
          }
          $271 = HEAP32[$15>>2]|0;
          $272 = HEAP32[$16>>2]|0;
          $273 = (($274) - ($272))|0;
          $275 = (($273) + ($271))|0;
          $276 = ($275|0)==(0);
          if ($276) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$4309;$312 = $322;
           break L6;
          }
          $$not = $158 ^ 1;
          $277 = ($275|0)==($$1267|0);
          $or$cond316 = $277 | $$not;
          if (!($or$cond316)) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$4309;$312 = $322;
           break L6;
          }
          do {
           if ($188) {
            if ($187) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($158) {
           $$10 = $$9;$$5310 = $$4309;$320 = $322;
          } else {
           $278 = ($$5299|0)==(0|0);
           if (!($278)) {
            $279 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$279>>2] = 0;
           }
           $280 = ($$4309|0)==(0|0);
           if ($280) {
            $$10 = $$9;$$5310 = 0;$320 = $322;
            break L58;
           }
           $281 = (($$4309) + ($$4282)|0);
           HEAP8[$281>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$320 = $322;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 124;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 124;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 124;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 124;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $292 = (+___floatscan($0,$$$0268,0));
          $293 = HEAP32[$15>>2]|0;
          $294 = HEAP32[$13>>2]|0;
          $295 = HEAP32[$16>>2]|0;
          $296 = (($295) - ($294))|0;
          $297 = ($293|0)==($296|0);
          if ($297) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$1306;$312 = $318;
           break L6;
          }
          $298 = ($$0293|0)==(0|0);
          if ($298) {
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $299 = $292;
            HEAPF32[$$0293>>2] = $299;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $292;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $292;
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$320 = $318;
            break L58;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$320 = $318;
         }
         }
        } while(0);
        do {
         if ((label|0) == 124) {
          label = 0;
          $282 = (___intscan($0,$$0272,0,-1,-1)|0);
          $283 = tempRet0;
          $284 = HEAP32[$15>>2]|0;
          $285 = HEAP32[$13>>2]|0;
          $286 = HEAP32[$16>>2]|0;
          $287 = (($286) - ($285))|0;
          $288 = ($284|0)==($287|0);
          if ($288) {
           $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$1306;$312 = $318;
           break L6;
          }
          $289 = ($$|0)==(112);
          $290 = ($$0293|0)!=(0|0);
          $or$cond3 = $290 & $289;
          if ($or$cond3) {
           $291 = $282;
           HEAP32[$$0293>>2] = $291;
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
           break;
          } else {
           _store_int_513($$0293,$$$0268,$282,$283);
           $$10 = $$5;$$5310 = $$1306;$320 = $318;
           break;
          }
         }
        } while(0);
        $300 = HEAP32[$15>>2]|0;
        $301 = HEAP32[$13>>2]|0;
        $302 = HEAP32[$16>>2]|0;
        $303 = (($300) + ($$1284))|0;
        $304 = (($303) + ($301))|0;
        $305 = (($304) - ($302))|0;
        $306 = ($$0293|0)!=(0|0);
        $307 = $306&1;
        $$0288$ = (($$0288404) + ($307))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $305;$$6311 = $$5310;$316 = $320;
        break L8;
       }
      } while(0);
      $53 = $50&1;
      $54 = (($$0273408) + ($53)|0);
      ___shlim($0,0);
      $55 = HEAP32[$13>>2]|0;
      $56 = HEAP32[$14>>2]|0;
      $57 = ($55>>>0)<($56>>>0);
      if ($57) {
       $58 = ((($55)) + 1|0);
       HEAP32[$13>>2] = $58;
       $59 = HEAP8[$55>>0]|0;
       $60 = $59&255;
       $64 = $60;
      } else {
       $61 = (___shgetc($0)|0);
       $64 = $61;
      }
      $62 = HEAP8[$54>>0]|0;
      $63 = $62&255;
      $65 = ($64|0)==($63|0);
      if (!($65)) {
       label = 22;
       break L6;
      }
      $72 = (($$0283407) + 1)|0;
      $$11 = $54;$$1289 = $$0288404;$$2285 = $72;$$6311 = $$0305402;$316 = $315;
     } else {
      $$1274 = $$0273408;
      while(1) {
       $23 = ((($$1274)) + 1|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = $24&255;
       $26 = (_isspace($25)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        break;
       } else {
        $$1274 = $23;
       }
      }
      ___shlim($0,0);
      while(1) {
       $28 = HEAP32[$13>>2]|0;
       $29 = HEAP32[$14>>2]|0;
       $30 = ($28>>>0)<($29>>>0);
       if ($30) {
        $31 = ((($28)) + 1|0);
        HEAP32[$13>>2] = $31;
        $32 = HEAP8[$28>>0]|0;
        $33 = $32&255;
        $35 = $33;
       } else {
        $34 = (___shgetc($0)|0);
        $35 = $34;
       }
       $36 = (_isspace($35)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        break;
       }
      }
      $38 = HEAP32[$14>>2]|0;
      $39 = ($38|0)==(0|0);
      if ($39) {
       $$pre = HEAP32[$13>>2]|0;
       $47 = $$pre;
      } else {
       $40 = HEAP32[$13>>2]|0;
       $41 = ((($40)) + -1|0);
       HEAP32[$13>>2] = $41;
       $42 = $41;
       $47 = $42;
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = HEAP32[$16>>2]|0;
      $45 = (($43) + ($$0283407))|0;
      $46 = (($45) + ($47))|0;
      $48 = (($46) - ($44))|0;
      $$11 = $$1274;$$1289 = $$0288404;$$2285 = $48;$$6311 = $$0305402;$316 = $315;
     }
    } while(0);
    $308 = ((($$11)) + 1|0);
    $309 = HEAP8[$308>>0]|0;
    $310 = ($309<<24>>24)==(0);
    if ($310) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273408 = $308;$$0283407 = $$2285;$$0288404 = $$1289;$$0305402 = $$6311;$20 = $309;$315 = $316;
    }
   }
   if ((label|0) == 22) {
    $66 = HEAP32[$14>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = HEAP32[$13>>2]|0;
     $69 = ((($68)) + -1|0);
     HEAP32[$13>>2] = $69;
    }
    $70 = ($64|0)>(-1);
    $71 = ($$0288404|0)!=(0);
    $or$cond5 = $71 | $70;
    if ($or$cond5) {
     $$3291 = $$0288404;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305402;$317 = $315;
     label = 137;
    }
   }
   else if ((label|0) == 136) {
    $$old4 = ($$0288404|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$317 = $319;
     label = 137;
    } else {
     $$2 = $$0270;$$2290 = $$0288404;$$9314 = $$7312;$312 = $319;
    }
   }
   if ((label|0) == 137) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$312 = $317;
   }
   $311 = ($$2|0)==(0);
   if ($311) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($312);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $314 = ($313|0)==(0);
 if (!($314)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n_512($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_513($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($$027$|0))|0);
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_298($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_218()|0);
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 4 : 1;
 return ($5|0);
}
function ___pthread_self_218() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2692|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2696|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4236|0);
}
function _strtof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,0));
 $3 = $2;
 return (+$3);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,2));
 return (+$2);
}
function _strtof_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtof($0,$1));
 return (+$3);
}
function _strtod_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtod($0,$1));
 return (+$3);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtold($0,$1));
 return (+$3);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $16 = $6;
   } else {
    $16 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $10 = ($$pr|0)==(0|0);
    if (!($10)) {
     $14 = $$pr;
     label = 6;
    }
   } else {
    $14 = $8;
    label = 6;
   }
   if ((label|0) == 6) {
    $11 = ((($1)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + -8|0);
    $15 = ($14>>>0)>($13>>>0);
    if ($15) {
     $18 = $0&255;
     $19 = ((($14)) + -1|0);
     HEAP32[$7>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$1>>2]|0;
     $21 = $20 & -17;
     HEAP32[$1>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  $$in = $2;
  while(1) {
   $9 = (($$in) + -1)|0;
   $10 = (($1) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($9<<2)|0);
   HEAP32[$12>>2] = $11;
   $13 = ($9|0)==(0);
   if ($13) {
    break;
   } else {
    $$in = $9;
   }
  }
 } else {
  $8 = ($2|0)==(0);
  if (!($8)) {
   $$01417 = $1;$$019 = $0;$$118 = $2;
   while(1) {
    $14 = (($$118) + -1)|0;
    $15 = ((($$01417)) + 4|0);
    $16 = HEAP32[$$01417>>2]|0;
    $17 = ((($$019)) + 4|0);
    HEAP32[$$019>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01417 = $15;$$019 = $17;$$118 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 18160;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 18160;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 18160;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5784);
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,0);
 $1 = ((($0)) + 28|0);
 __ZNSt3__26localeD2Ev($1);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = ((($0)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 return;
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 0]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5800);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = (($2) - ($$023))|0;
   $13 = ($12|0)<($11|0);
   $$sroa$speculated = $13 ? $12 : $11;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0,$6,$$sroa$speculated)|0);
   $14 = (($$0) + ($$sroa$speculated)|0);
   $15 = (($$sroa$speculated) + ($$023))|0;
   $16 = HEAP32[$3>>2]|0;
   $17 = (($16) + ($$sroa$speculated)|0);
   HEAP32[$3>>2] = $17;
   $$0 = $14;$$023 = $15;
   continue;
  }
  $18 = HEAP32[$0>>2]|0;
  $19 = ((($18)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 511]($0)|0);
  $22 = ($21|0)==(-1);
  if ($22) {
   break;
  }
  $23 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($21)|0);
  HEAP8[$$0>>0] = $23;
  $24 = ((($$0)) + 1|0);
  $25 = (($$023) + 1)|0;
  $$0 = $24;$$023 = $25;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = (($2) - ($$021))|0;
   $23 = ($22|0)<($21|0);
   $$sroa$speculated = $23 ? $22 : $21;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($7,$$0,$$sroa$speculated)|0);
   $24 = HEAP32[$4>>2]|0;
   $25 = (($24) + ($$sroa$speculated)|0);
   HEAP32[$4>>2] = $25;
   $26 = (($$0) + ($$sroa$speculated)|0);
   $27 = (($$sroa$speculated) + ($$021))|0;
   $$0 = $26;$$021 = $27;
   continue;
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$$0>>0]|0;
  $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
  $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
  $16 = ($15|0)==($3|0);
  if ($16) {
   break;
  }
  $17 = ((($$0)) + 1|0);
  $18 = (($$021) + 1)|0;
  $$0 = $17;$$021 = $18;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5864);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = $11 >> 2;
   $13 = (($2) - ($$023))|0;
   $14 = ($13|0)<($12|0);
   $$sroa$speculated = $14 ? $13 : $12;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0,$6,$$sroa$speculated)|0);
   $15 = (($$0) + ($$sroa$speculated<<2)|0);
   $16 = (($$sroa$speculated) + ($$023))|0;
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + ($$sroa$speculated<<2)|0);
   HEAP32[$3>>2] = $18;
   $$0 = $15;$$023 = $16;
   continue;
  }
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_ii[$21 & 511]($0)|0);
  $23 = ($22|0)==(-1);
  if ($23) {
   break;
  }
  $24 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($22)|0);
  HEAP32[$$0>>2] = $24;
  $25 = ((($$0)) + 4|0);
  $26 = (($$023) + 1)|0;
  $$0 = $25;$$023 = $26;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP32[$9>>2]|0;
  $12 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = $21 >> 2;
   $23 = (($2) - ($$021))|0;
   $24 = ($23|0)<($22|0);
   $$sroa$speculated = $24 ? $23 : $22;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($7,$$0,$$sroa$speculated)|0);
   $25 = HEAP32[$4>>2]|0;
   $26 = (($25) + ($$sroa$speculated<<2)|0);
   HEAP32[$4>>2] = $26;
   $27 = (($$0) + ($$sroa$speculated<<2)|0);
   $28 = (($$sroa$speculated) + ($$021))|0;
   $$0 = $27;$$021 = $28;
   continue;
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$$0>>2]|0;
  $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
  $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
  $16 = ($15|0)==($3|0);
  if ($16) {
   break;
  }
  $17 = ((($$0)) + 4|0);
  $18 = (($$021) + 1)|0;
  $$0 = $17;$$021 = $18;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,5960);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,6008);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,6056);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,6104);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4&1;
 $$sink = $5 | $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $$sink;
 return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0|0);
 $4 = $3&1;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 4098;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 6;
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 28|0);
 dest=$10; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($11);
 return;
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNKSt3__28ios_base6getlocEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($0,$2);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5800);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5864);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($1,$0);
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + -12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($0) + ($13)|0);
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 511]($16)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = ((($22)) + -12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($0) + ($24)|0);
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 | 1;
    __ZNSt3__28ios_base5clearEj($25,$28);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($6)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8192;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (__ZSt18uncaught_exceptionv()|0);
    if (!($17)) {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + -12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($18) + ($21)|0);
     $23 = ((($22)) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 511]($24)|0);
     $29 = ($28|0)==(-1);
     if ($29) {
      $30 = HEAP32[$1>>2]|0;
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + -12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($30) + ($33)|0);
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36 | 1;
      __ZNSt3__28ios_base5clearEj($34,$37);
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($2,$0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if (!($4)) {
   $5 = HEAP32[$0>>2]|0;
   $6 = ((($5)) + -12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($0) + ($7)|0);
   $9 = ((($8)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10;
   $12 = ($10|0)==(0);
   if (!($12)) {
    $13 = ((($11)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($11)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)==($16|0);
    if ($17) {
     $18 = $10;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 52|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
     $23 = (FUNCTION_TABLE_iii[$21 & 511]($11,$22)|0);
     $$0$i$i = $23;
    } else {
     $24 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $24;
     HEAP8[$14>>0] = $1;
     $25 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
     $$0$i$i = $25;
    }
    $26 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $27 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$26)|0);
    if (!($27)) {
     break;
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + -12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($0) + ($30)|0);
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 | 1;
   __ZNSt3__28ios_base5clearEj($31,$34);
  }
 } while(0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 return;
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[507]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(20188,$1,20244);
 HEAP32[4877] = (5932);
 HEAP32[(19516)>>2] = (5952);
 HEAP32[(19512)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((19516),20188);
 HEAP32[(19588)>>2] = 0;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(19592)>>2] = $2;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(20252,$1,20308);
 HEAP32[4899] = (5980);
 HEAP32[(19604)>>2] = (6000);
 HEAP32[(19600)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((19604),20252);
 HEAP32[(19676)>>2] = 0;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(19680)>>2] = $3;
 $4 = HEAP32[474]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(20316,$4,20364);
 HEAP32[4921] = (6028);
 HEAP32[(19688)>>2] = (6048);
 __ZNSt3__28ios_base4initEPv((19688),20316);
 HEAP32[(19760)>>2] = 0;
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(19764)>>2] = $5;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(20372,$4,20420);
 HEAP32[4942] = (6076);
 HEAP32[(19772)>>2] = (6096);
 __ZNSt3__28ios_base4initEPv((19772),20372);
 HEAP32[(19844)>>2] = 0;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(19848)>>2] = $6;
 $7 = HEAP32[539]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(20428,$7,20476);
 HEAP32[4963] = (6028);
 HEAP32[(19856)>>2] = (6048);
 __ZNSt3__28ios_base4initEPv((19856),20428);
 HEAP32[(19928)>>2] = 0;
 $8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(19932)>>2] = $8;
 $9 = HEAP32[4963]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (19852 + ($11)|0);
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[5005] = (6028);
 HEAP32[(20024)>>2] = (6048);
 __ZNSt3__28ios_base4initEPv((20024),$14);
 HEAP32[(20096)>>2] = 0;
 $15 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(20100)>>2] = $15;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(20484,$7,20532);
 HEAP32[4984] = (6076);
 HEAP32[(19940)>>2] = (6096);
 __ZNSt3__28ios_base4initEPv((19940),20484);
 HEAP32[(20012)>>2] = 0;
 $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20016)>>2] = $16;
 $17 = HEAP32[4984]|0;
 $18 = ((($17)) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (19936 + ($19)|0);
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[5026] = (6076);
 HEAP32[(20108)>>2] = (6096);
 __ZNSt3__28ios_base4initEPv((20108),$22);
 HEAP32[(20180)>>2] = 0;
 $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(20184)>>2] = $23;
 $24 = HEAP32[4877]|0;
 $25 = ((($24)) + -12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (19508 + ($26)|0);
 $28 = ((($27)) + 72|0);
 HEAP32[$28>>2] = 19684;
 $29 = HEAP32[4899]|0;
 $30 = ((($29)) + -12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (19596 + ($31)|0);
 $33 = ((($32)) + 72|0);
 HEAP32[$33>>2] = 19768;
 $34 = HEAP32[4963]|0;
 $35 = ((($34)) + -12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (19852 + ($36)|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | 8192;
 HEAP32[$38>>2] = $40;
 $41 = HEAP32[4984]|0;
 $42 = ((($41)) + -12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (19936 + ($43)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[4963]|0;
 $49 = ((($48)) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (19852 + ($50)|0);
 $52 = ((($51)) + 72|0);
 HEAP32[$52>>2] = 19684;
 $53 = HEAP32[4984]|0;
 $54 = ((($53)) + -12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (19936 + ($55)|0);
 $57 = ((($56)) + 72|0);
 HEAP32[$57>>2] = 19768;
 return;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (6312);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 FUNCTION_TABLE_vii[$11 & 511]($0,$3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (6248);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 FUNCTION_TABLE_vii[$11 & 511]($0,$3);
 __ZNSt3__26localeD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (6184);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 36|0);
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,22348)|0);
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($7)|0);
 $14 = $13&1;
 HEAP8[$9>>0] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (6120);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 36|0);
 $6 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$6);
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,22356)|0);
 __ZNSt3__26localeD2Ev($3);
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($7)|0);
 $14 = $13&1;
 HEAP8[$9>>0] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 return;
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__211__stdoutbufIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 511]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22356)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 511]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$011>>2]|0;
    $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 4|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,4,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($1)|0);
   HEAP32[$3>>2] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,4,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 4|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 511]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIwE7not_eofEj($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1)|0);
 if ($2) {
  $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $4 = $3 ^ -1;
  $5 = $4;
 } else {
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211__stdoutbufIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__211__stdoutbufIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 511]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22348)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 511]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP8[$$011>>0]|0;
    $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 1|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,1,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
   HEAP8[$3>>0] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,1,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 1|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 511]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1)|0);
 if ($2) {
  $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $4 = $3 ^ -1;
  $5 = $4;
 } else {
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__210__stdinbufIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 return;
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210__stdinbufIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22356)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(15024);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($18)|0);
    HEAP32[$4>>2] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 4|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 511]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052|0)<($$sroa$speculated|0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $29 = ((($0)) + 40|0);
     $30 = ((($0)) + 36|0);
     $31 = ((($3)) + 4|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $32 = HEAP32[$29>>2]|0;
      $33 = $32;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = (($33) + 4)|0;
      $37 = $36;
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$30>>2]|0;
      $40 = (($2) + ($$048)|0);
      $41 = HEAP32[$39>>2]|0;
      $42 = ((($41)) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_iiiiiiiii[$43 & 511]($39,$32,$2,$40,$4,$3,$31,$5)|0);
      switch ($44|0) {
      case 3:  {
       label = 16;
       break L11;
       break;
      }
      case 2:  {
       label = 18;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $45 = HEAP32[$29>>2]|0;
      $46 = $45;
      $47 = $46;
      HEAP32[$47>>2] = $35;
      $48 = (($46) + 4)|0;
      $49 = $48;
      HEAP32[$49>>2] = $38;
      $50 = ($$048|0)==(8);
      if ($50) {
       label = 18;
       break;
      }
      $51 = HEAP32[$15>>2]|0;
      $52 = (_getc($51)|0);
      $53 = ($52|0)==(-1);
      if ($53) {
       label = 18;
       break;
      }
      $54 = $52&255;
      HEAP8[$40>>0] = $54;
      $55 = (($$048) + 1)|0;
      $$048 = $55;
     }
     if ((label|0) == 16) {
      $56 = HEAP8[$2>>0]|0;
      $57 = $56 << 24 >> 24;
      HEAP32[$3>>2] = $57;
     }
     else if ((label|0) == 18) {
      $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $$9 = $58;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     $28 = $27 << 24 >> 24;
     HEAP32[$3>>2] = $28;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $69 = HEAP32[$3>>2]|0;
       $70 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
       $71 = ((($0)) + 48|0);
       HEAP32[$71>>2] = $70;
      } else {
       $$0 = $$351;
       while(1) {
        $59 = ($$0|0)>(0);
        if (!($59)) {
         break L23;
        }
        $60 = (($$0) + -1)|0;
        $61 = (($2) + ($60)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62 << 24 >> 24;
        $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $65 = HEAP32[$15>>2]|0;
        $66 = (_ungetc($64,$65)|0);
        $67 = ($66|0)==(-1);
        if ($67) {
         break;
        } else {
         $$0 = $60;
        }
       }
       $68 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $$9 = $68;
       break L21;
      }
     } while(0);
     $72 = HEAP32[$3>>2]|0;
     $73 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($72)|0);
     $$9 = $73;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__210__stdinbufIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210__stdinbufIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22348)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(15024);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($18)|0);
    HEAP8[$4>>0] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 1|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 511]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052|0)<($$sroa$speculated|0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $28 = ((($0)) + 40|0);
     $29 = ((($0)) + 36|0);
     $30 = ((($3)) + 1|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $31 = HEAP32[$28>>2]|0;
      $32 = $31;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = (($32) + 4)|0;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = HEAP32[$29>>2]|0;
      $39 = (($2) + ($$048)|0);
      $40 = HEAP32[$38>>2]|0;
      $41 = ((($40)) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_iiiiiiiii[$42 & 511]($38,$31,$2,$39,$4,$3,$30,$5)|0);
      switch ($43|0) {
      case 3:  {
       label = 16;
       break L11;
       break;
      }
      case 2:  {
       label = 18;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $44 = HEAP32[$28>>2]|0;
      $45 = $44;
      $46 = $45;
      HEAP32[$46>>2] = $34;
      $47 = (($45) + 4)|0;
      $48 = $47;
      HEAP32[$48>>2] = $37;
      $49 = ($$048|0)==(8);
      if ($49) {
       label = 18;
       break;
      }
      $50 = HEAP32[$15>>2]|0;
      $51 = (_getc($50)|0);
      $52 = ($51|0)==(-1);
      if ($52) {
       label = 18;
       break;
      }
      $53 = $51&255;
      HEAP8[$39>>0] = $53;
      $54 = (($$048) + 1)|0;
      $$048 = $54;
     }
     if ((label|0) == 16) {
      $55 = HEAP8[$2>>0]|0;
      HEAP8[$3>>0] = $55;
     }
     else if ((label|0) == 18) {
      $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$9 = $56;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     HEAP8[$3>>0] = $27;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $66 = HEAP8[$3>>0]|0;
       $67 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
       $68 = ((($0)) + 48|0);
       HEAP32[$68>>2] = $67;
      } else {
       $$0 = $$351;
       while(1) {
        $57 = ($$0|0)>(0);
        if (!($57)) {
         break L23;
        }
        $58 = (($$0) + -1)|0;
        $59 = (($2) + ($58)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
        $62 = HEAP32[$15>>2]|0;
        $63 = (_ungetc($61,$62)|0);
        $64 = ($63|0)==(-1);
        if ($64) {
         break;
        } else {
         $$0 = $58;
        }
       }
       $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$9 = $65;
       break L21;
      }
     } while(0);
     $69 = HEAP8[$3>>0]|0;
     $70 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
     $$9 = $70;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 511]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $scevgep23$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $5 = $2;
 $6 = $3;
 $7 = (($6) - ($5))|0;
 $8 = ($7>>>0)>(4294967279);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ($7>>>0)<(11);
 if ($9) {
  $10 = $7&255;
  $11 = ((($0)) + 11|0);
  HEAP8[$11>>0] = $10;
  $$021$ph$i$i = $0;
 } else {
  $12 = (($7) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  HEAP32[$0>>2] = $14;
  $15 = $13 | -2147483648;
  $16 = ((($0)) + 8|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($0)) + 4|0);
  HEAP32[$17>>2] = $7;
  $$021$ph$i$i = $14;
 }
 $$0$i$i = $2;$$021$i$i = $$021$ph$i$i;
 while(1) {
  $18 = ($$0$i$i|0)==($3|0);
  if ($18) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
  $19 = ((($$0$i$i)) + 1|0);
  $20 = ((($$021$i$i)) + 1|0);
  $$0$i$i = $19;$$021$i$i = $20;
 }
 $scevgep23$i$i = (($$021$ph$i$i) + ($7)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($4) + ($6))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i = 0, $$021$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>(1073741807);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ($8>>>0)<(2);
 do {
  if ($10) {
   $11 = $8&255;
   $12 = ((($0)) + 8|0);
   $13 = ((($12)) + 3|0);
   HEAP8[$13>>0] = $11;
   $$0$i$i = $2;$$021$i$i = $0;
  } else {
   $14 = (($8) + 4)|0;
   $15 = $14 & -4;
   $16 = ($15>>>0)>(1073741823);
   if ($16) {
    _abort();
    // unreachable;
   } else {
    $17 = $15 << 2;
    $18 = (__Znwj($17)|0);
    HEAP32[$0>>2] = $18;
    $19 = $15 | -2147483648;
    $20 = ((($0)) + 8|0);
    HEAP32[$20>>2] = $19;
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = $8;
    $$0$i$i = $2;$$021$i$i = $18;
    break;
   }
  }
 } while(0);
 while(1) {
  $22 = ($$0$i$i|0)==($3|0);
  if ($22) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i,$$0$i$i);
  $23 = ((($$0$i$i)) + 4|0);
  $24 = ((($$021$i$i)) + 4|0);
  $$0$i$i = $23;$$021$i$i = $24;
 }
 HEAP32[$4>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$6>>2] = -1;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $20;
  $21 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiiii[$19 & 255]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
  HEAP32[$1>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  switch ($23|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,20556)|0);
  __ZNSt3__26localeD2Ev($9);
  __ZNKSt3__28ios_base6getlocEv($10,$3);
  $25 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,20572)|0);
  __ZNSt3__26localeD2Ev($10);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 511]($11,$25);
  $29 = ((($11)) + 12|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 511]($29,$25);
  $33 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $33;
  $34 = ((($11)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$11,$34,$24,$4,1)|0);
  $36 = ($35|0)==($11|0);
  $37 = $36&1;
  HEAP8[$5>>0] = $37;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $39 = $34;
  while(1) {
   $38 = ((($39)) + -12|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($38);
   $40 = ($38|0)==($11|0);
   if ($40) {
    break;
   } else {
    $39 = $38;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i17 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i26 = 0, $$0$i$i36 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i22 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0;
 var $phitmp$i = 0, $phitmp$i33 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20556)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 511]($16,15172,(15198),$6)|0);
 __ZNSt3__26localeD2Ev($8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $20 = (($9) + ($$0$i$i17<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $21;
 }
 $22 = ((($9)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($9)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$9>>2]|0;
 $32 = $30 ? $31 : $9;
 HEAP32[$10>>2] = $32;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $33 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$$pre$i$i$i22 = $$pre;$145 = $$pre;
 L12: while(1) {
  $34 = ($$pre$i$i$i22|0)==(0|0);
  if ($34) {
   $$pre$i$i$i = 0;$121 = 0;$146 = 1;
  } else {
   $35 = ((($$pre$i$i$i22)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($$pre$i$i$i22)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$$pre$i$i$i22>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 511]($$pre$i$i$i22)|0);
    $$0$i$i$i$i20 = $43;
   } else {
    $44 = HEAP8[$36>>0]|0;
    $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
    $$0$i$i$i$i20 = $45;
   }
   $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i20,$46)|0);
   if ($47) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$121 = 0;$146 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i22;$121 = $145;$146 = 0;
   }
  }
  $48 = HEAP32[$2>>2]|0;
  $49 = ($48|0)==(0|0);
  do {
   if ($49) {
    label = 22;
   } else {
    $50 = ((($48)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($48)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if ($54) {
     $55 = HEAP32[$48>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_ii[$57 & 511]($48)|0);
     $$0$i$i2$i$i26 = $58;
    } else {
     $59 = HEAP8[$51>>0]|0;
     $60 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($59)|0);
     $$0$i$i2$i$i26 = $60;
    }
    $61 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $62 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i26,$61)|0);
    if ($62) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    } else {
     if ($146) {
      $147 = $48;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $48;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($146) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $147 = 0;
   }
  }
  $63 = HEAP32[$10>>2]|0;
  $64 = HEAP8[$22>>0]|0;
  $65 = ($64<<24>>24)<(0);
  $66 = HEAP32[$33>>2]|0;
  $67 = $64&255;
  $68 = $65 ? $66 : $67;
  $69 = (($$0) + ($68)|0);
  $70 = ($63|0)==($69|0);
  if ($70) {
   $71 = $68 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$22>>0]|0;
   $73 = ($72<<24>>24)<(0);
   if ($73) {
    $74 = HEAP32[$25>>2]|0;
    $75 = $74 & 2147483647;
    $phitmp$i33 = (($75) + -1)|0;
    $76 = $phitmp$i33;
   } else {
    $76 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$76,0);
   $77 = HEAP8[$22>>0]|0;
   $78 = ($77<<24>>24)<(0);
   $79 = HEAP32[$9>>2]|0;
   $80 = $78 ? $79 : $9;
   $81 = (($80) + ($68)|0);
   HEAP32[$10>>2] = $81;
   $$1 = $80;
  } else {
   $$1 = $$0;
  }
  $82 = ((($$pre$i$i$i)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($$pre$i$i$i)) + 16|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($83|0)==($85|0);
  if ($86) {
   $87 = HEAP32[$$pre$i$i$i>>2]|0;
   $88 = ((($87)) + 36|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (FUNCTION_TABLE_ii[$89 & 511]($$pre$i$i$i)|0);
   $$0$i$i36 = $90;
  } else {
   $91 = HEAP8[$83>>0]|0;
   $92 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($91)|0);
   $$0$i$i36 = $92;
  }
  $93 = $$0$i$i36&255;
  $94 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($93,16,$$1,$10,$13,0,$7,$11,$12,$6)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   $$2 = $$1;$$pre$i4$i$i = $147;
   break;
  }
  $96 = HEAP32[$82>>2]|0;
  $97 = HEAP32[$84>>2]|0;
  $98 = ($96|0)==($97|0);
  if ($98) {
   $99 = HEAP32[$$pre$i$i$i>>2]|0;
   $100 = ((($99)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   (FUNCTION_TABLE_ii[$101 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i22 = $$pre$i$i$i;$145 = $121;
   continue;
  } else {
   $102 = ((($96)) + 1|0);
   HEAP32[$82>>2] = $102;
   $103 = HEAP8[$96>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($103)|0);
   $$0 = $$1;$$pre$i$i$i22 = $$pre$i$i$i;$145 = $121;
   continue;
  }
 }
 $104 = HEAP32[$10>>2]|0;
 $105 = $$2;
 $106 = (($104) - ($105))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$106,0);
 $107 = HEAP8[$22>>0]|0;
 $108 = ($107<<24>>24)<(0);
 $109 = HEAP32[$9>>2]|0;
 $110 = $108 ? $109 : $9;
 $111 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $112 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($110,$111,15205,$vararg_buffer)|0);
 $113 = ($112|0)==(1);
 if (!($113)) {
  HEAP32[$4>>2] = 4;
 }
 $114 = ($$pre$i$i$i|0)==(0|0);
 if ($114) {
  $148 = 1;
 } else {
  $115 = ((($$pre$i$i$i)) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($$pre$i$i$i)) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$121>>2]|0;
   $122 = ((($120)) + 36|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (FUNCTION_TABLE_ii[$123 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $124;
  } else {
   $125 = HEAP8[$116>>0]|0;
   $126 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($125)|0);
   $$0$i$i$i$i = $126;
  }
  $127 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $128 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$127)|0);
  if ($128) {
   HEAP32[$1>>2] = 0;
   $148 = 1;
  } else {
   $148 = 0;
  }
 }
 $129 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($129) {
   label = 49;
  } else {
   $130 = ((($$pre$i4$i$i)) + 12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($$pre$i4$i$i)) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($131|0)==($133|0);
   if ($134) {
    $135 = HEAP32[$$pre$i4$i$i>>2]|0;
    $136 = ((($135)) + 36|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (FUNCTION_TABLE_ii[$137 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $138;
   } else {
    $139 = HEAP8[$131>>0]|0;
    $140 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($139)|0);
    $$0$i$i2$i$i = $140;
   }
   $141 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $142 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$141)|0);
   if ($142) {
    HEAP32[$2>>2] = 0;
    label = 49;
    break;
   } else {
    if ($148) {
     break;
    } else {
     label = 51;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 49) {
  if ($148) {
   label = 51;
  }
 }
 if ((label|0) == 51) {
  $143 = HEAP32[$4>>2]|0;
  $144 = $143 | 2;
  HEAP32[$4>>2] = $144;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9use_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($1)|0);
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $44 = ($42|0)<($1|0);
     if (!($44)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $45 = ($42|0)<(22);
     if (!($45)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $46 = $10;
      $47 = $2;
      $48 = (($46) - ($47))|0;
      $49 = ($48|0)<(3);
      if (!($49)) {
       $$1 = -1;
       break L6;
      }
      $50 = ((($10)) + -1|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)==(48);
      if (!($52)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $53 = (15172 + ($42)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $55;
      HEAP8[$10>>0] = $54;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = (15172 + ($42)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18168]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18168)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (___newlocale(2147483647,15208,0)|0);
   HEAP32[5141] = $4;
  }
 }
 $5 = HEAP32[5141]|0;
 return ($5|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$fca$1$gep = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 8|0;
 $4 = sp;
 HEAP32[$4>>2] = (345);
 $$fca$1$gep = ((($4)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($3,$$byval_copy,$0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$1>>2] = $3;
  HEAP32[$2>>2] = $1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$2,346);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 STACKTOP = sp;return ($9|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5142]|0;
 $2 = (($1) + 1)|0;
 HEAP32[5142] = $2;
 $3 = (($1) + 1)|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$repack = 0, $$repack7 = 0, $$unpack = 0, $$unpack5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt4 = ((($1)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 HEAP32[$0>>2] = $2;
 $$repack = ((($0)) + 4|0);
 HEAP32[$$repack>>2] = $$unpack;
 $$repack7 = ((($0)) + 8|0);
 HEAP32[$$repack7>>2] = $$unpack5;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($2);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($0)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $2 = $$unpack2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 511]($3);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$154 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$130 = 0;$155 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$130 = 0;$155 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$130 = $154;$155 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($155) {
      $156 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($155) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $156 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP8[$80>>0]|0;
   $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = $$0$i$i31&255;
  $91 = HEAP8[$7>>0]|0;
  $92 = HEAP8[$8>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($90,$15,$16,$$1,$11,$91,$92,$9,$12,$13,$14,$6)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$$pre$i4$i$i = $156;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$81>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$$pre$i$i$i>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  }
 }
 $103 = ((($9)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($9)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 $111 = HEAP8[$15>>0]|0;
 $112 = ($111<<24>>24)==(0);
 $or$cond = $110 | $112;
 if (!($or$cond)) {
  $113 = HEAP32[$13>>2]|0;
  $114 = $113;
  $115 = $12;
  $116 = (($114) - ($115))|0;
  $117 = ($116|0)<(160);
  if ($117) {
   $118 = HEAP32[$14>>2]|0;
   $119 = ((($113)) + 4|0);
   HEAP32[$13>>2] = $119;
   HEAP32[$113>>2] = $118;
  }
 }
 $120 = HEAP32[$11>>2]|0;
 $121 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$120,$4));
 HEAPF64[$5>>3] = $121;
 $122 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$122,$4);
 $123 = ($$pre$i$i$i|0)==(0|0);
 if ($123) {
  $157 = 1;
 } else {
  $124 = ((($$pre$i$i$i)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($$pre$i$i$i)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$130>>2]|0;
   $131 = ((($129)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (FUNCTION_TABLE_ii[$132 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $133;
  } else {
   $134 = HEAP8[$125>>0]|0;
   $135 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($134)|0);
   $$0$i$i$i$i = $135;
  }
  $136 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $137 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$136)|0);
  if ($137) {
   HEAP32[$1>>2] = 0;
   $157 = 1;
  } else {
   $157 = 0;
  }
 }
 $138 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($138) {
   label = 47;
  } else {
   $139 = ((($$pre$i4$i$i)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($$pre$i4$i$i)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)==($142|0);
   if ($143) {
    $144 = HEAP32[$$pre$i4$i$i>>2]|0;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $147;
   } else {
    $148 = HEAP8[$140>>0]|0;
    $149 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
    $$0$i$i2$i$i = $149;
   }
   $150 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $151 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$150)|0);
   if ($151) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($157) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($157) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $152 = HEAP32[$4>>2]|0;
  $153 = $152 | 2;
  HEAP32[$4>>2] = $153;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,20556)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 511]($6,15172,(15204),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,20572)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
 HEAP8[$3>>0] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 511]($10)|0);
 HEAP8[$4>>0] = $18;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 511]($0,$10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP8[$$0$i$ptr>>0]|0;
    $53 = ($52<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(31);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (15172 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 & 95;
      $65 = HEAP8[$2>>0]|0;
      $66 = $65 & 127;
      $67 = ($64<<24>>24)==($66<<24>>24);
      if (!($67)) {
       $$2 = -1;
       break L1;
      }
     }
     $68 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $68;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $69 = HEAP32[$4>>2]|0;
     $70 = ((($69)) + 1|0);
     HEAP32[$4>>2] = $70;
     HEAP8[$69>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $71 = $59 & 95;
     $72 = $71&255;
     $73 = HEAP8[$2>>0]|0;
     $74 = $73 << 24 >> 24;
     $75 = ($72|0)==($74|0);
     if ($75) {
      $76 = $72 | 128;
      $77 = $76&255;
      HEAP8[$2>>0] = $77;
      $78 = HEAP8[$1>>0]|0;
      $79 = ($78<<24>>24)==(0);
      if (!($79)) {
       HEAP8[$1>>0] = 0;
       $80 = ((($7)) + 11|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($81<<24>>24)<(0);
       $83 = ((($7)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $81&255;
       $86 = $82 ? $84 : $85;
       $87 = ($86|0)==(0);
       if (!($87)) {
        $88 = HEAP32[$9>>2]|0;
        $89 = $88;
        $90 = $8;
        $91 = (($89) - ($90))|0;
        $92 = ($91|0)<(160);
        if ($92) {
         $93 = HEAP32[$10>>2]|0;
         $94 = ((($88)) + 4|0);
         HEAP32[$9>>2] = $94;
         HEAP32[$88>>2] = $93;
        }
       }
      }
     }
     $95 = HEAP32[$4>>2]|0;
     $96 = ((($95)) + 1|0);
     HEAP32[$4>>2] = $96;
     HEAP8[$95>>0] = $59;
     $97 = ($56|0)>(21);
     if ($97) {
      $$2 = 0;
      break L1;
     }
     $98 = HEAP32[$10>>2]|0;
     $99 = (($98) + 1)|0;
     HEAP32[$10>>2] = $99;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$030 = 0, $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $$pre40 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $18 = $5;$23 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP8[$4>>0]|0;
    $$pre40 = HEAP32[$7>>2]|0;
    $18 = $$pre;$23 = $$pre40;
   }
   $19 = ($18<<24>>24)<(0);
   $20 = HEAP32[$0>>2]|0;
   $21 = $18&255;
   $22 = $19 ? $20 : $0;
   $24 = $19 ? $23 : $21;
   $25 = (($22) + ($24)|0);
   $26 = ((($2)) + -4|0);
   $27 = $25;
   $$029 = $1;$$030 = $22;
   while(1) {
    $28 = ($$029>>>0)<($26>>>0);
    $29 = HEAP8[$$030>>0]|0;
    $30 = ($29<<24>>24)>(0);
    $31 = ($29<<24>>24)!=(127);
    $or$cond32 = $30 & $31;
    if (!($28)) {
     break;
    }
    if ($or$cond32) {
     $32 = $29 << 24 >> 24;
     $33 = HEAP32[$$029>>2]|0;
     $34 = ($33|0)==($32|0);
     if (!($34)) {
      label = 10;
      break;
     }
    }
    $35 = $$030;
    $36 = (($27) - ($35))|0;
    $37 = ($36|0)>(1);
    $38 = ((($$030)) + 1|0);
    $$$030 = $37 ? $38 : $$030;
    $39 = ((($$029)) + 4|0);
    $$029 = $39;$$030 = $$$030;
   }
   if ((label|0) == 10) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $40 = $29 << 24 >> 24;
    $41 = HEAP32[$26>>2]|0;
    $42 = (($41) + -1)|0;
    $43 = ($42>>>0)<($40>>>0);
    if (!($43)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$154 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$130 = 0;$155 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$130 = 0;$155 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$130 = $154;$155 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($155) {
      $156 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($155) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $156 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP8[$80>>0]|0;
   $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = $$0$i$i31&255;
  $91 = HEAP8[$7>>0]|0;
  $92 = HEAP8[$8>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($90,$15,$16,$$1,$11,$91,$92,$9,$12,$13,$14,$6)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$$pre$i4$i$i = $156;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$81>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$$pre$i$i$i>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  }
 }
 $103 = ((($9)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($9)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 $111 = HEAP8[$15>>0]|0;
 $112 = ($111<<24>>24)==(0);
 $or$cond = $110 | $112;
 if (!($or$cond)) {
  $113 = HEAP32[$13>>2]|0;
  $114 = $113;
  $115 = $12;
  $116 = (($114) - ($115))|0;
  $117 = ($116|0)<(160);
  if ($117) {
   $118 = HEAP32[$14>>2]|0;
   $119 = ((($113)) + 4|0);
   HEAP32[$13>>2] = $119;
   HEAP32[$113>>2] = $118;
  }
 }
 $120 = HEAP32[$11>>2]|0;
 $121 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$120,$4));
 HEAPF64[$5>>3] = $121;
 $122 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$122,$4);
 $123 = ($$pre$i$i$i|0)==(0|0);
 if ($123) {
  $157 = 1;
 } else {
  $124 = ((($$pre$i$i$i)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($$pre$i$i$i)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$130>>2]|0;
   $131 = ((($129)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (FUNCTION_TABLE_ii[$132 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $133;
  } else {
   $134 = HEAP8[$125>>0]|0;
   $135 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($134)|0);
   $$0$i$i$i$i = $135;
  }
  $136 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $137 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$136)|0);
  if ($137) {
   HEAP32[$1>>2] = 0;
   $157 = 1;
  } else {
   $157 = 0;
  }
 }
 $138 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($138) {
   label = 47;
  } else {
   $139 = ((($$pre$i4$i$i)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($$pre$i4$i$i)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)==($142|0);
   if ($143) {
    $144 = HEAP32[$$pre$i4$i$i>>2]|0;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $147;
   } else {
    $148 = HEAP8[$140>>0]|0;
    $149 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
    $$0$i$i2$i$i = $149;
   }
   $150 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $151 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$150)|0);
   if ($151) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($157) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($157) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $152 = HEAP32[$4>>2]|0;
  $153 = $152 | 2;
  HEAP32[$4>>2] = $153;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtod_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$154 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$130 = 0;$155 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP8[$33>>0]|0;
    $42 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$130 = 0;$155 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$130 = $154;$155 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP8[$48>>0]|0;
     $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($155) {
      $156 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($155) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $156 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP8[$80>>0]|0;
   $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = $$0$i$i31&255;
  $91 = HEAP8[$7>>0]|0;
  $92 = HEAP8[$8>>0]|0;
  $93 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($90,$15,$16,$$1,$11,$91,$92,$9,$12,$13,$14,$6)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$$pre$i4$i$i = $156;
   break;
  }
  $95 = HEAP32[$79>>2]|0;
  $96 = HEAP32[$81>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$$pre$i$i$i>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  } else {
   $101 = ((($95)) + 1|0);
   HEAP32[$79>>2] = $101;
   $102 = HEAP8[$95>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$154 = $130;
   continue;
  }
 }
 $103 = ((($9)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = ((($9)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $104&255;
 $109 = $105 ? $107 : $108;
 $110 = ($109|0)==(0);
 $111 = HEAP8[$15>>0]|0;
 $112 = ($111<<24>>24)==(0);
 $or$cond = $110 | $112;
 if (!($or$cond)) {
  $113 = HEAP32[$13>>2]|0;
  $114 = $113;
  $115 = $12;
  $116 = (($114) - ($115))|0;
  $117 = ($116|0)<(160);
  if ($117) {
   $118 = HEAP32[$14>>2]|0;
   $119 = ((($113)) + 4|0);
   HEAP32[$13>>2] = $119;
   HEAP32[$113>>2] = $118;
  }
 }
 $120 = HEAP32[$11>>2]|0;
 $121 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$120,$4));
 HEAPF32[$5>>2] = $121;
 $122 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$122,$4);
 $123 = ($$pre$i$i$i|0)==(0|0);
 if ($123) {
  $157 = 1;
 } else {
  $124 = ((($$pre$i$i$i)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($$pre$i$i$i)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$130>>2]|0;
   $131 = ((($129)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (FUNCTION_TABLE_ii[$132 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $133;
  } else {
   $134 = HEAP8[$125>>0]|0;
   $135 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($134)|0);
   $$0$i$i$i$i = $135;
  }
  $136 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $137 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$136)|0);
  if ($137) {
   HEAP32[$1>>2] = 0;
   $157 = 1;
  } else {
   $157 = 0;
  }
 }
 $138 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($138) {
   label = 47;
  } else {
   $139 = ((($$pre$i4$i$i)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($$pre$i4$i$i)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)==($142|0);
   if ($143) {
    $144 = HEAP32[$$pre$i4$i$i>>2]|0;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $147;
   } else {
    $148 = HEAP8[$140>>0]|0;
    $149 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
    $$0$i$i2$i$i = $149;
   }
   $150 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $151 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$150)|0);
   if ($151) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($157) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($157) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $152 = HEAP32[$4>>2]|0;
  $153 = $152 | 2;
  HEAP32[$4>>2] = $153;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtof_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$154 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$130 = 0;$155 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$130 = 0;$155 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$130 = $154;$155 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($155) {
      $156 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($155) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $156 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $156;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$154 = $130;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$154 = $130;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 $117 = tempRet0;
 $118 = $5;
 $119 = $118;
 HEAP32[$119>>2] = $116;
 $120 = (($118) + 4)|0;
 $121 = $120;
 HEAP32[$121>>2] = $117;
 $122 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$122,$4);
 $123 = ($$pre$i$i$i|0)==(0|0);
 if ($123) {
  $157 = 1;
 } else {
  $124 = ((($$pre$i$i$i)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($$pre$i$i$i)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$130>>2]|0;
   $131 = ((($129)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (FUNCTION_TABLE_ii[$132 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $133;
  } else {
   $134 = HEAP8[$125>>0]|0;
   $135 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($134)|0);
   $$0$i$i$i$i = $135;
  }
  $136 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $137 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$136)|0);
  if ($137) {
   HEAP32[$1>>2] = 0;
   $157 = 1;
  } else {
   $157 = 0;
  }
 }
 $138 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($138) {
   label = 47;
  } else {
   $139 = ((($$pre$i4$i$i)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($$pre$i4$i$i)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)==($142|0);
   if ($143) {
    $144 = HEAP32[$$pre$i4$i$i>>2]|0;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $147;
   } else {
    $148 = HEAP8[$140>>0]|0;
    $149 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
    $$0$i$i2$i$i = $149;
   }
   $150 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $151 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$150)|0);
   if ($151) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($157) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($157) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $152 = HEAP32[$4>>2]|0;
  $153 = $152 | 2;
  HEAP32[$4>>2] = $153;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNKSt3__28ios_base6getlocEv($4,$1);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,20556)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 (FUNCTION_TABLE_iiiii[$8 & 511]($5,15172,(15198),$2)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,20572)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 HEAP8[$3>>0] = $13;
 $14 = HEAP32[$9>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vii[$16 & 511]($0,$9);
 __ZNSt3__26localeD2Ev($4);
 STACKTOP = sp;return;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $21 = 0;$22 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $21 = 0;$22 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   if ($19) {
    $20 = ($15|0)==(34);
    if ($20) {
     $23 = -1;$24 = -1;
     label = 8;
    } else {
     $25 = $12;$26 = $13;
    }
   } else {
    $23 = 0;$24 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$2>>2] = 4;
    $25 = $23;$26 = $24;
   }
   $21 = $26;$22 = $25;
  }
 } while(0);
 tempRet0 = ($21);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$149 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$125 = 0;$150 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$125 = 0;$150 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$125 = $149;$150 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($150) {
      $151 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($150) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $151 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $151;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 HEAP32[$5>>2] = $116;
 $117 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$117,$4);
 $118 = ($$pre$i$i$i|0)==(0|0);
 if ($118) {
  $152 = 1;
 } else {
  $119 = ((($$pre$i$i$i)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$pre$i$i$i)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)==($122|0);
  if ($123) {
   $124 = HEAP32[$125>>2]|0;
   $126 = ((($124)) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (FUNCTION_TABLE_ii[$127 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $128;
  } else {
   $129 = HEAP8[$120>>0]|0;
   $130 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   $$0$i$i$i$i = $130;
  }
  $131 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $132 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$131)|0);
  if ($132) {
   HEAP32[$1>>2] = 0;
   $152 = 1;
  } else {
   $152 = 0;
  }
 }
 $133 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($133) {
   label = 47;
  } else {
   $134 = ((($$pre$i4$i$i)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($$pre$i4$i$i)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i4$i$i>>2]|0;
    $140 = ((($139)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $142;
   } else {
    $143 = HEAP8[$135>>0]|0;
    $144 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($143)|0);
    $$0$i$i2$i$i = $144;
   }
   $145 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $146 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$145)|0);
   if ($146) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($152) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($152) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $147 = HEAP32[$4>>2]|0;
  $148 = $147 | 2;
  HEAP32[$4>>2] = $148;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$149 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$125 = 0;$150 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$125 = 0;$150 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$125 = $149;$150 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($150) {
      $151 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($150) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $151 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $151;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 HEAP32[$5>>2] = $116;
 $117 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$117,$4);
 $118 = ($$pre$i$i$i|0)==(0|0);
 if ($118) {
  $152 = 1;
 } else {
  $119 = ((($$pre$i$i$i)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$pre$i$i$i)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)==($122|0);
  if ($123) {
   $124 = HEAP32[$125>>2]|0;
   $126 = ((($124)) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (FUNCTION_TABLE_ii[$127 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $128;
  } else {
   $129 = HEAP8[$120>>0]|0;
   $130 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   $$0$i$i$i$i = $130;
  }
  $131 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $132 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$131)|0);
  if ($132) {
   HEAP32[$1>>2] = 0;
   $152 = 1;
  } else {
   $152 = 0;
  }
 }
 $133 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($133) {
   label = 47;
  } else {
   $134 = ((($$pre$i4$i$i)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($$pre$i4$i$i)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i4$i$i>>2]|0;
    $140 = ((($139)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $142;
   } else {
    $143 = HEAP8[$135>>0]|0;
    $144 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($143)|0);
    $$0$i$i2$i$i = $144;
   }
   $145 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $146 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$145)|0);
   if ($146) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($152) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($152) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $147 = HEAP32[$4>>2]|0;
  $148 = $147 | 2;
  HEAP32[$4>>2] = $148;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$149 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$125 = 0;$150 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$125 = 0;$150 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$125 = $149;$150 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($150) {
      $151 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($150) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $151 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $151;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 HEAP16[$5>>1] = $116;
 $117 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$117,$4);
 $118 = ($$pre$i$i$i|0)==(0|0);
 if ($118) {
  $152 = 1;
 } else {
  $119 = ((($$pre$i$i$i)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$pre$i$i$i)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)==($122|0);
  if ($123) {
   $124 = HEAP32[$125>>2]|0;
   $126 = ((($124)) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (FUNCTION_TABLE_ii[$127 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $128;
  } else {
   $129 = HEAP8[$120>>0]|0;
   $130 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   $$0$i$i$i$i = $130;
  }
  $131 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $132 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$131)|0);
  if ($132) {
   HEAP32[$1>>2] = 0;
   $152 = 1;
  } else {
   $152 = 0;
  }
 }
 $133 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($133) {
   label = 47;
  } else {
   $134 = ((($$pre$i4$i$i)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($$pre$i4$i$i)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i4$i$i>>2]|0;
    $140 = ((($139)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $142;
   } else {
    $143 = HEAP8[$135>>0]|0;
    $144 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($143)|0);
    $$0$i$i2$i$i = $144;
   }
   $145 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $146 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$145)|0);
   if ($146) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($152) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($152) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $147 = HEAP32[$4>>2]|0;
  $148 = $147 | 2;
  HEAP32[$4>>2] = $148;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(65535);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $26 = $12&65535;
      $$0 = $26;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$154 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$130 = 0;$155 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$130 = 0;$155 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$130 = $154;$155 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($155) {
      $156 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($155) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $156 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $156;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$154 = $130;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$154 = $130;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 $117 = tempRet0;
 $118 = $5;
 $119 = $118;
 HEAP32[$119>>2] = $116;
 $120 = (($118) + 4)|0;
 $121 = $120;
 HEAP32[$121>>2] = $117;
 $122 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$122,$4);
 $123 = ($$pre$i$i$i|0)==(0|0);
 if ($123) {
  $157 = 1;
 } else {
  $124 = ((($$pre$i$i$i)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($$pre$i$i$i)) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$130>>2]|0;
   $131 = ((($129)) + 36|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (FUNCTION_TABLE_ii[$132 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $133;
  } else {
   $134 = HEAP8[$125>>0]|0;
   $135 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($134)|0);
   $$0$i$i$i$i = $135;
  }
  $136 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $137 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$136)|0);
  if ($137) {
   HEAP32[$1>>2] = 0;
   $157 = 1;
  } else {
   $157 = 0;
  }
 }
 $138 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($138) {
   label = 47;
  } else {
   $139 = ((($$pre$i4$i$i)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($$pre$i4$i$i)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)==($142|0);
   if ($143) {
    $144 = HEAP32[$$pre$i4$i$i>>2]|0;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $147;
   } else {
    $148 = HEAP8[$140>>0]|0;
    $149 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
    $$0$i$i2$i$i = $149;
   }
   $150 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $151 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$150)|0);
   if ($151) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($157) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($157) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $152 = HEAP32[$4>>2]|0;
  $153 = $152 | 2;
  HEAP32[$4>>2] = $153;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $26 = 0;$27 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = tempRet0;
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  if ($17) {
   $18 = ($13|0)==(34);
   if ($18) {
    HEAP32[$2>>2] = 4;
    $19 = ($11|0)>(0);
    $20 = ($10>>>0)>(0);
    $21 = ($11|0)==(0);
    $22 = $21 & $20;
    $23 = $19 | $22;
    $24 = $23 ? -1 : 0;
    $25 = $23 ? 2147483647 : -2147483648;
    $28 = $24;$29 = $25;
   } else {
    $28 = $10;$29 = $11;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $28 = 0;$29 = 0;
  }
  $26 = $29;$27 = $28;
 }
 tempRet0 = ($26);
 STACKTOP = sp;return ($27|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$149 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$125 = 0;$150 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP8[$31>>0]|0;
    $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$125 = 0;$150 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$125 = $149;$150 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP8[$46>>0]|0;
     $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($150) {
      $151 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($150) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $151 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = $$0$i$i35&255;
  $89 = HEAP8[$7>>0]|0;
  $90 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,$14,$$1,$10,$13,$89,$8,$11,$12,$6)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$2 = $$1;$$pre$i4$i$i = $151;
   break;
  }
  $92 = HEAP32[$77>>2]|0;
  $93 = HEAP32[$79>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$$pre$i$i$i>>2]|0;
   $96 = ((($95)) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  } else {
   $98 = ((($92)) + 1|0);
   HEAP32[$77>>2] = $98;
   $99 = HEAP8[$92>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($99)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$149 = $125;
   continue;
  }
 }
 $100 = ((($8)) + 11|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = ((($8)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $101&255;
 $106 = $102 ? $104 : $105;
 $107 = ($106|0)==(0);
 if (!($107)) {
  $108 = HEAP32[$12>>2]|0;
  $109 = $108;
  $110 = $11;
  $111 = (($109) - ($110))|0;
  $112 = ($111|0)<(160);
  if ($112) {
   $113 = HEAP32[$13>>2]|0;
   $114 = ((($108)) + 4|0);
   HEAP32[$12>>2] = $114;
   HEAP32[$108>>2] = $113;
  }
 }
 $115 = HEAP32[$10>>2]|0;
 $116 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$115,$4,$14)|0);
 HEAP32[$5>>2] = $116;
 $117 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$117,$4);
 $118 = ($$pre$i$i$i|0)==(0|0);
 if ($118) {
  $152 = 1;
 } else {
  $119 = ((($$pre$i$i$i)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($$pre$i$i$i)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)==($122|0);
  if ($123) {
   $124 = HEAP32[$125>>2]|0;
   $126 = ((($124)) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (FUNCTION_TABLE_ii[$127 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $128;
  } else {
   $129 = HEAP8[$120>>0]|0;
   $130 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   $$0$i$i$i$i = $130;
  }
  $131 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $132 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$131)|0);
  if ($132) {
   HEAP32[$1>>2] = 0;
   $152 = 1;
  } else {
   $152 = 0;
  }
 }
 $133 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($133) {
   label = 47;
  } else {
   $134 = ((($$pre$i4$i$i)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($$pre$i4$i$i)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i4$i$i>>2]|0;
    $140 = ((($139)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $142;
   } else {
    $143 = HEAP8[$135>>0]|0;
    $144 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($143)|0);
    $$0$i$i2$i$i = $144;
   }
   $145 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $146 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$145)|0);
   if ($146) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($152) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($152) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $147 = HEAP32[$4>>2]|0;
  $148 = $147 | 2;
  HEAP32[$4>>2] = $148;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = tempRet0;
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  L7: do {
   if ($17) {
    $18 = ($13|0)==(34);
    do {
     if ($18) {
      HEAP32[$2>>2] = 4;
      $29 = ($11|0)>(0);
      $30 = ($10>>>0)>(0);
      $31 = ($11|0)==(0);
      $32 = $31 & $30;
      $33 = $29 | $32;
      if ($33) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $19 = ($11|0)<(-1);
      $20 = ($10>>>0)<(2147483648);
      $21 = ($11|0)==(-1);
      $22 = $21 & $20;
      $23 = $19 | $22;
      if ($23) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $24 = ($11|0)>(0);
      $25 = ($10>>>0)>(2147483647);
      $26 = ($11|0)==(0);
      $27 = $26 & $25;
      $28 = $24 | $27;
      if ($28) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $10;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i118 = 0, $$0101 = 0, $$0107 = 0, $$0108 = 0, $$0108138 = 0, $$088 = 0, $$089 = 0, $$090$off0 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$097 = 0, $$1102 = 0, $$195 = 0;
 var $$198 = 0, $$2$off0 = 0, $$2103 = 0, $$296 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$3104 = 0, $$5 = 0, $$5106 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0, $$pre$i4$i$i120 = 0, $$sroa$0125$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0107 = $13;$$sroa$0125$0 = $13;
  }
 } else {
  $$0107 = $7;$$sroa$0125$0 = 0;
 }
 $$0101 = $11;$$093 = $2;$$094 = $$0107;$$097 = 0;
 while(1) {
  $15 = ($$093|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$093)) + 11|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)<(0);
  if ($18) {
   $19 = ((($$093)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $22 = $20;
  } else {
   $21 = $17&255;
   $22 = $21;
  }
  $23 = ($22|0)==(0);
  if ($23) {
   HEAP8[$$094>>0] = 2;
   $24 = (($$0101) + -1)|0;
   $25 = (($$097) + 1)|0;
   $$1102 = $24;$$198 = $25;
  } else {
   HEAP8[$$094>>0] = 1;
   $$1102 = $$0101;$$198 = $$097;
  }
  $26 = ((($$093)) + 12|0);
  $27 = ((($$094)) + 1|0);
  $$0101 = $$1102;$$093 = $26;$$094 = $27;$$097 = $$198;
 }
 $$092 = 0;$$2103 = $$0101;$$299 = $$097;
 L17: while(1) {
  $28 = HEAP32[$0>>2]|0;
  $29 = ($28|0)==(0|0);
  do {
   if ($29) {
    $60 = 1;
   } else {
    $30 = ((($28)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($28)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31|0)==($33|0);
    if ($34) {
     $35 = HEAP32[$28>>2]|0;
     $36 = ((($35)) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (FUNCTION_TABLE_ii[$37 & 511]($28)|0);
     $$0$i$i$i$i = $38;
    } else {
     $39 = HEAP8[$31>>0]|0;
     $40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($39)|0);
     $$0$i$i$i$i = $40;
    }
    $41 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $42 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$41)|0);
    if ($42) {
     HEAP32[$0>>2] = 0;
     $60 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $60 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $43 = HEAP32[$1>>2]|0;
  $44 = ($43|0)==(0|0);
  if ($44) {
   $$pre$i4$i$i120 = 0;$59 = 1;
  } else {
   $45 = ((($43)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($43)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   if ($49) {
    $50 = HEAP32[$43>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
    $$0$i$i2$i$i = $53;
   } else {
    $54 = HEAP8[$46>>0]|0;
    $55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
    $$0$i$i2$i$i = $55;
   }
   $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $57 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$56)|0);
   if ($57) {
    HEAP32[$1>>2] = 0;
    $$pre$i4$i$i120 = 0;$59 = 1;
   } else {
    $$pre$i4$i$i120 = $43;$59 = 0;
   }
  }
  $58 = $60 ^ $59;
  $61 = ($$2103|0)!=(0);
  $62 = $61 & $58;
  $63 = HEAP32[$0>>2]|0;
  if (!($62)) {
   break;
  }
  $92 = ((($63)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($63)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($93|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$63>>2]|0;
   $98 = ((($97)) + 36|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (FUNCTION_TABLE_ii[$99 & 511]($63)|0);
   $$0$i$i = $100;
  } else {
   $101 = HEAP8[$93>>0]|0;
   $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
   $$0$i$i = $102;
  }
  $103 = $$0$i$i&255;
  if ($6) {
   $$091 = $103;
  } else {
   $104 = HEAP32[$4>>2]|0;
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_iii[$106 & 511]($4,$103)|0);
   $$091 = $107;
  }
  $108 = (($$092) + 1)|0;
  $$089 = $2;$$090$off0 = 0;$$195 = $$0107;$$3100 = $$299;$$3104 = $$2103;
  while(1) {
   $109 = ($$089|0)==($3|0);
   if ($109) {
    break;
   }
   $110 = HEAP8[$$195>>0]|0;
   $111 = ($110<<24>>24)==(1);
   do {
    if ($111) {
     $112 = ((($$089)) + 11|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)<(0);
     if ($114) {
      $115 = HEAP32[$$089>>2]|0;
      $117 = $115;
     } else {
      $117 = $$089;
     }
     $116 = (($117) + ($$092)|0);
     $118 = HEAP8[$116>>0]|0;
     if ($6) {
      $$088 = $118;
     } else {
      $119 = HEAP32[$4>>2]|0;
      $120 = ((($119)) + 12|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (FUNCTION_TABLE_iii[$121 & 511]($4,$118)|0);
      $$088 = $122;
     }
     $123 = ($$091<<24>>24)==($$088<<24>>24);
     if (!($123)) {
      HEAP8[$$195>>0] = 0;
      $133 = (($$3104) + -1)|0;
      $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $133;
      break;
     }
     $124 = HEAP8[$112>>0]|0;
     $125 = ($124<<24>>24)<(0);
     if ($125) {
      $126 = ((($$089)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $129 = $127;
     } else {
      $128 = $124&255;
      $129 = $128;
     }
     $130 = ($129|0)==($108|0);
     if ($130) {
      $131 = (($$3104) + -1)|0;
      $132 = (($$3100) + 1)|0;
      HEAP8[$$195>>0] = 2;
      $$2$off0 = 1;$$5 = $132;$$5106 = $131;
     } else {
      $$2$off0 = 1;$$5 = $$3100;$$5106 = $$3104;
     }
    } else {
     $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $$3104;
    }
   } while(0);
   $134 = ((($$089)) + 12|0);
   $135 = ((($$195)) + 1|0);
   $$089 = $134;$$090$off0 = $$2$off0;$$195 = $135;$$3100 = $$5;$$3104 = $$5106;
  }
  if (!($$090$off0)) {
   $$092 = $108;$$2103 = $$3104;$$299 = $$3100;
   continue;
  }
  $136 = HEAP32[$0>>2]|0;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($136)) + 16|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($138|0)==($140|0);
  if ($141) {
   $142 = HEAP32[$136>>2]|0;
   $143 = ((($142)) + 40|0);
   $144 = HEAP32[$143>>2]|0;
   (FUNCTION_TABLE_ii[$144 & 511]($136)|0);
  } else {
   $145 = ((($138)) + 1|0);
   HEAP32[$137>>2] = $145;
   $146 = HEAP8[$138>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($146)|0);
  }
  $147 = (($$3100) + ($$3104))|0;
  $148 = ($147>>>0)>(1);
  if ($148) {
   $$0 = $2;$$296 = $$0107;$$6 = $$3100;
  } else {
   $$092 = $108;$$2103 = $$3104;$$299 = $$3100;
   continue;
  }
  while(1) {
   $149 = ($$0|0)==($3|0);
   if ($149) {
    $$092 = $108;$$2103 = $$3104;$$299 = $$6;
    continue L17;
   }
   $150 = HEAP8[$$296>>0]|0;
   $151 = ($150<<24>>24)==(2);
   if ($151) {
    $152 = ((($$0)) + 11|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = ($153<<24>>24)<(0);
    if ($154) {
     $155 = ((($$0)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $158 = $156;
    } else {
     $157 = $153&255;
     $158 = $157;
    }
    $159 = ($158|0)==($108|0);
    if ($159) {
     $$7 = $$6;
    } else {
     $160 = (($$6) + -1)|0;
     HEAP8[$$296>>0] = 0;
     $$7 = $160;
    }
   } else {
    $$7 = $$6;
   }
   $161 = ((($$0)) + 12|0);
   $162 = ((($$296)) + 1|0);
   $$0 = $161;$$296 = $162;$$6 = $$7;
  }
 }
 $64 = ($63|0)==(0|0);
 do {
  if ($64) {
   $172 = 1;
  } else {
   $65 = ((($63)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($63)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$63>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 511]($63)|0);
    $$0$i$i$i$i112 = $73;
   } else {
    $74 = HEAP8[$66>>0]|0;
    $75 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($74)|0);
    $$0$i$i$i$i112 = $75;
   }
   $76 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $77 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i112,$76)|0);
   if ($77) {
    HEAP32[$0>>2] = 0;
    $172 = 1;
    break;
   } else {
    $$pre$i$i$i114 = HEAP32[$0>>2]|0;
    $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0|0);
    $172 = $phitmp$i$i$i115;
    break;
   }
  }
 } while(0);
 $78 = ($$pre$i4$i$i120|0)==(0|0);
 do {
  if ($78) {
   label = 41;
  } else {
   $79 = ((($$pre$i4$i$i120)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($$pre$i4$i$i120)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($80|0)==($82|0);
   if ($83) {
    $84 = HEAP32[$$pre$i4$i$i120>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i4$i$i120)|0);
    $$0$i$i2$i$i118 = $87;
   } else {
    $88 = HEAP8[$80>>0]|0;
    $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
    $$0$i$i2$i$i118 = $89;
   }
   $90 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $91 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i118,$90)|0);
   if ($91) {
    HEAP32[$1>>2] = 0;
    label = 41;
    break;
   } else {
    if ($172) {
     $$0108 = $2;$$3 = $$0107;
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($172) {
   label = 77;
  } else {
   $$0108 = $2;$$3 = $$0107;
  }
 }
 if ((label|0) == 77) {
  $163 = HEAP32[$5>>2]|0;
  $164 = $163 | 2;
  HEAP32[$5>>2] = $164;
  $$0108 = $2;$$3 = $$0107;
 }
 while(1) {
  $165 = ($$0108|0)==($3|0);
  if ($165) {
   label = 81;
   break;
  }
  $166 = HEAP8[$$3>>0]|0;
  $167 = ($166<<24>>24)==(2);
  if ($167) {
   $$0108138 = $$0108;
   break;
  }
  $168 = ((($$0108)) + 12|0);
  $169 = ((($$3)) + 1|0);
  $$0108 = $168;$$3 = $169;
 }
 if ((label|0) == 81) {
  $170 = HEAP32[$5>>2]|0;
  $171 = $170 | 4;
  HEAP32[$5>>2] = $171;
  $$0108138 = $3;
 }
 _free($$sroa$0125$0);
 STACKTOP = sp;return ($$0108138|0);
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$6>>2] = -1;
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $20;
  $21 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
  $22 = (FUNCTION_TABLE_iiiiiii[$19 & 255]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
  HEAP32[$1>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  switch ($23|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,20588)|0);
  __ZNSt3__26localeD2Ev($9);
  __ZNKSt3__28ios_base6getlocEv($10,$3);
  $25 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,20596)|0);
  __ZNSt3__26localeD2Ev($10);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 511]($11,$25);
  $29 = ((($11)) + 12|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 511]($29,$25);
  $33 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $33;
  $34 = ((($11)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
  $35 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$11,$34,$24,$4,1)|0);
  $36 = ($35|0)==($11|0);
  $37 = $36&1;
  HEAP8[$5>>0] = $37;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $39 = $34;
  while(1) {
   $38 = ((($39)) + -12|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($38);
   $40 = ($38|0)==($11|0);
   if ($40) {
    break;
   } else {
    $39 = $38;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i22 = 0, $$0$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i28 = 0, $$0$i$i38 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i24 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i20 = 0, $phitmp$i = 0;
 var $phitmp$i35 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20588)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 511]($16,15172,(15198),$6)|0);
 __ZNSt3__26localeD2Ev($8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $20 = (($9) + ($$0$i$i19<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i19) + 1)|0;
  $$0$i$i19 = $21;
 }
 $22 = ((($9)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($9)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$9>>2]|0;
 $32 = $30 ? $31 : $9;
 HEAP32[$10>>2] = $32;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $33 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$$pre$i$i$i24 = $$pre;$144 = $$pre;
 L12: while(1) {
  $34 = ($$pre$i$i$i24|0)==(0|0);
  if ($34) {
   $$pre$i$i$i = 0;$120 = 0;$145 = 1;
  } else {
   $35 = ((($$pre$i$i$i24)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($$pre$i$i$i24)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$$pre$i$i$i24>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 511]($$pre$i$i$i24)|0);
    $$0$i$i$i$i22 = $43;
   } else {
    $44 = HEAP32[$36>>2]|0;
    $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
    $$0$i$i$i$i22 = $45;
   }
   $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i22,$46)|0);
   if ($47) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$120 = 0;$145 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i24;$120 = $144;$145 = 0;
   }
  }
  $48 = HEAP32[$2>>2]|0;
  $49 = ($48|0)==(0|0);
  do {
   if ($49) {
    label = 22;
   } else {
    $50 = ((($48)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($48)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if ($54) {
     $55 = HEAP32[$48>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_ii[$57 & 511]($48)|0);
     $$0$i$i2$i$i28 = $58;
    } else {
     $59 = HEAP32[$51>>2]|0;
     $60 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($59)|0);
     $$0$i$i2$i$i28 = $60;
    }
    $61 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $62 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i28,$61)|0);
    if ($62) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    } else {
     if ($145) {
      $146 = $48;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $48;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($145) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $146 = 0;
   }
  }
  $63 = HEAP32[$10>>2]|0;
  $64 = HEAP8[$22>>0]|0;
  $65 = ($64<<24>>24)<(0);
  $66 = HEAP32[$33>>2]|0;
  $67 = $64&255;
  $68 = $65 ? $66 : $67;
  $69 = (($$0) + ($68)|0);
  $70 = ($63|0)==($69|0);
  if ($70) {
   $71 = $68 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$22>>0]|0;
   $73 = ($72<<24>>24)<(0);
   if ($73) {
    $74 = HEAP32[$25>>2]|0;
    $75 = $74 & 2147483647;
    $phitmp$i35 = (($75) + -1)|0;
    $76 = $phitmp$i35;
   } else {
    $76 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$76,0);
   $77 = HEAP8[$22>>0]|0;
   $78 = ($77<<24>>24)<(0);
   $79 = HEAP32[$9>>2]|0;
   $80 = $78 ? $79 : $9;
   $81 = (($80) + ($68)|0);
   HEAP32[$10>>2] = $81;
   $$1 = $80;
  } else {
   $$1 = $$0;
  }
  $82 = ((($$pre$i$i$i)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($$pre$i$i$i)) + 16|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($83|0)==($85|0);
  if ($86) {
   $87 = HEAP32[$$pre$i$i$i>>2]|0;
   $88 = ((($87)) + 36|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (FUNCTION_TABLE_ii[$89 & 511]($$pre$i$i$i)|0);
   $$0$i$i38 = $90;
  } else {
   $91 = HEAP32[$83>>2]|0;
   $92 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($91)|0);
   $$0$i$i38 = $92;
  }
  $93 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i38,16,$$1,$10,$13,0,$7,$11,$12,$6)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$2 = $$1;$$pre$i4$i$i = $146;
   break;
  }
  $95 = HEAP32[$82>>2]|0;
  $96 = HEAP32[$84>>2]|0;
  $97 = ($95|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$$pre$i$i$i>>2]|0;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i24 = $$pre$i$i$i;$144 = $120;
   continue;
  } else {
   $101 = ((($95)) + 4|0);
   HEAP32[$82>>2] = $101;
   $102 = HEAP32[$95>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($102)|0);
   $$0 = $$1;$$pre$i$i$i24 = $$pre$i$i$i;$144 = $120;
   continue;
  }
 }
 $103 = HEAP32[$10>>2]|0;
 $104 = $$2;
 $105 = (($103) - ($104))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$105,0);
 $106 = HEAP8[$22>>0]|0;
 $107 = ($106<<24>>24)<(0);
 $108 = HEAP32[$9>>2]|0;
 $109 = $107 ? $108 : $9;
 $110 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $111 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($109,$110,15205,$vararg_buffer)|0);
 $112 = ($111|0)==(1);
 if (!($112)) {
  HEAP32[$4>>2] = 4;
 }
 $113 = ($$pre$i$i$i|0)==(0|0);
 if ($113) {
  $147 = 1;
 } else {
  $114 = ((($$pre$i$i$i)) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($$pre$i$i$i)) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$120>>2]|0;
   $121 = ((($119)) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $123;
  } else {
   $124 = HEAP32[$115>>2]|0;
   $125 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($124)|0);
   $$0$i$i$i$i = $125;
  }
  $126 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $127 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$126)|0);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $147 = 1;
  } else {
   $147 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 49;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $139 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($138)|0);
    $$0$i$i2$i$i = $139;
   }
   $140 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $141 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$140)|0);
   if ($141) {
    HEAP32[$2>>2] = 0;
    label = 49;
    break;
   } else {
    if ($147) {
     break;
    } else {
     label = 51;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 49) {
  if ($147) {
   label = 51;
  }
 }
 if ((label|0) == 51) {
  $142 = HEAP32[$4>>2]|0;
  $143 = $142 | 2;
  HEAP32[$4>>2] = $143;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($43|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(88);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $54 = (15172 + ($43)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $56;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = (15172 + ($43)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $59;
    HEAP8[$10>>0] = $58;
    $60 = HEAP32[$4>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$4>>2] = $61;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$153 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$129 = 0;$154 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$129 = 0;$154 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$129 = $153;$154 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP32[$80>>2]|0;
   $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = HEAP32[$7>>2]|0;
  $91 = HEAP32[$8>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$90,$91,$9,$12,$13,$14,$6)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$$pre$i4$i$i = $155;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$81>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$$pre$i$i$i>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  }
 }
 $102 = ((($9)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($9)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 $110 = HEAP8[$15>>0]|0;
 $111 = ($110<<24>>24)==(0);
 $or$cond = $109 | $111;
 if (!($or$cond)) {
  $112 = HEAP32[$13>>2]|0;
  $113 = $112;
  $114 = $12;
  $115 = (($113) - ($114))|0;
  $116 = ($115|0)<(160);
  if ($116) {
   $117 = HEAP32[$14>>2]|0;
   $118 = ((($112)) + 4|0);
   HEAP32[$13>>2] = $118;
   HEAP32[$112>>2] = $117;
  }
 }
 $119 = HEAP32[$11>>2]|0;
 $120 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$119,$4));
 HEAPF64[$5>>3] = $120;
 $121 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$121,$4);
 $122 = ($$pre$i$i$i|0)==(0|0);
 if ($122) {
  $156 = 1;
 } else {
  $123 = ((($$pre$i$i$i)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($$pre$i$i$i)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$129>>2]|0;
   $130 = ((($128)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_ii[$131 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $132;
  } else {
   $133 = HEAP32[$124>>2]|0;
   $134 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($133)|0);
   $$0$i$i$i$i = $134;
  }
  $135 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $136 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$135)|0);
  if ($136) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $137 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($137) {
   label = 47;
  } else {
   $138 = ((($$pre$i4$i$i)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($$pre$i4$i$i)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i4$i$i>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP32[$139>>2]|0;
    $148 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($156) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,20588)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 511]($6,15172,(15204),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,20596)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 511]($10)|0);
 HEAP32[$3>>2] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 511]($10)|0);
 HEAP32[$4>>2] = $18;
 $19 = HEAP32[$10>>2]|0;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 511]($0,$10);
 __ZNSt3__26localeD2Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP32[$$0$i$ptr>>2]|0;
    $53 = ($52|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = $56 >> 2;
   $58 = ($56|0)>(124);
   if ($58) {
    $$2 = -1;
   } else {
    $59 = (15172 + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    switch ($57|0) {
    case 24: case 25:  {
     $61 = HEAP32[$4>>2]|0;
     $62 = ($61|0)==($3|0);
     if (!($62)) {
      $63 = ((($61)) + -1|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64 & 95;
      $66 = HEAP8[$2>>0]|0;
      $67 = $66 & 127;
      $68 = ($65<<24>>24)==($67<<24>>24);
      if (!($68)) {
       $$2 = -1;
       break L1;
      }
     }
     $69 = ((($61)) + 1|0);
     HEAP32[$4>>2] = $69;
     HEAP8[$61>>0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $70 = $60 & 95;
     $71 = $70&255;
     $72 = HEAP8[$2>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = $71 | 128;
      $76 = $75&255;
      HEAP8[$2>>0] = $76;
      $77 = HEAP8[$1>>0]|0;
      $78 = ($77<<24>>24)==(0);
      if (!($78)) {
       HEAP8[$1>>0] = 0;
       $79 = ((($7)) + 11|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = ($80<<24>>24)<(0);
       $82 = ((($7)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $80&255;
       $85 = $81 ? $83 : $84;
       $86 = ($85|0)==(0);
       if (!($86)) {
        $87 = HEAP32[$9>>2]|0;
        $88 = $87;
        $89 = $8;
        $90 = (($88) - ($89))|0;
        $91 = ($90|0)<(160);
        if ($91) {
         $92 = HEAP32[$10>>2]|0;
         $93 = ((($87)) + 4|0);
         HEAP32[$9>>2] = $93;
         HEAP32[$87>>2] = $92;
        }
       }
      }
     }
    }
    }
    $94 = HEAP32[$4>>2]|0;
    $95 = ((($94)) + 1|0);
    HEAP32[$4>>2] = $95;
    HEAP8[$94>>0] = $60;
    $96 = ($56|0)>(84);
    if ($96) {
     $$2 = 0;
    } else {
     $97 = HEAP32[$10>>2]|0;
     $98 = (($97) + 1)|0;
     HEAP32[$10>>2] = $98;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$153 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$129 = 0;$154 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$129 = 0;$154 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$129 = $153;$154 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP32[$80>>2]|0;
   $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = HEAP32[$7>>2]|0;
  $91 = HEAP32[$8>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$90,$91,$9,$12,$13,$14,$6)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$$pre$i4$i$i = $155;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$81>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$$pre$i$i$i>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  }
 }
 $102 = ((($9)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($9)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 $110 = HEAP8[$15>>0]|0;
 $111 = ($110<<24>>24)==(0);
 $or$cond = $109 | $111;
 if (!($or$cond)) {
  $112 = HEAP32[$13>>2]|0;
  $113 = $112;
  $114 = $12;
  $115 = (($113) - ($114))|0;
  $116 = ($115|0)<(160);
  if ($116) {
   $117 = HEAP32[$14>>2]|0;
   $118 = ((($112)) + 4|0);
   HEAP32[$13>>2] = $118;
   HEAP32[$112>>2] = $117;
  }
 }
 $119 = HEAP32[$11>>2]|0;
 $120 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$119,$4));
 HEAPF64[$5>>3] = $120;
 $121 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$121,$4);
 $122 = ($$pre$i$i$i|0)==(0|0);
 if ($122) {
  $156 = 1;
 } else {
  $123 = ((($$pre$i$i$i)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($$pre$i$i$i)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$129>>2]|0;
   $130 = ((($128)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_ii[$131 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $132;
  } else {
   $133 = HEAP32[$124>>2]|0;
   $134 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($133)|0);
   $$0$i$i$i$i = $134;
  }
  $135 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $136 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$135)|0);
  if ($136) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $137 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($137) {
   label = 47;
  } else {
   $138 = ((($$pre$i4$i$i)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($$pre$i4$i$i)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i4$i$i>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP32[$139>>2]|0;
    $148 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($156) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i31 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;$153 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$129 = 0;$154 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 511]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $42 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
    $$0$i$i$i$i15 = $42;
   }
   $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $44 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i15,$43)|0);
   if ($44) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$129 = 0;$154 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$129 = $153;$154 = 0;
   }
  }
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)==(0|0);
  do {
   if ($46) {
    label = 19;
   } else {
    $47 = ((($45)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($48|0)==($50|0);
    if ($51) {
     $52 = HEAP32[$45>>2]|0;
     $53 = ((($52)) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_ii[$54 & 511]($45)|0);
     $$0$i$i2$i$i21 = $55;
    } else {
     $56 = HEAP32[$48>>2]|0;
     $57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
     $$0$i$i2$i$i21 = $57;
    }
    $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $59 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i21,$58)|0);
    if ($59) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $45;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $45;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $60 = HEAP32[$11>>2]|0;
  $61 = HEAP8[$19>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = HEAP32[$30>>2]|0;
  $64 = $61&255;
  $65 = $62 ? $63 : $64;
  $66 = (($$0) + ($65)|0);
  $67 = ($60|0)==($66|0);
  if ($67) {
   $68 = $65 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = HEAP32[$22>>2]|0;
    $72 = $71 & 2147483647;
    $phitmp$i28 = (($72) + -1)|0;
    $73 = $phitmp$i28;
   } else {
    $73 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$73,0);
   $74 = HEAP8[$19>>0]|0;
   $75 = ($74<<24>>24)<(0);
   $76 = HEAP32[$10>>2]|0;
   $77 = $75 ? $76 : $10;
   $78 = (($77) + ($65)|0);
   HEAP32[$11>>2] = $78;
   $$1 = $77;
  } else {
   $$1 = $$0;
  }
  $79 = ((($$pre$i$i$i)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($$pre$i$i$i)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$$pre$i$i$i>>2]|0;
   $85 = ((($84)) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i$i$i)|0);
   $$0$i$i31 = $87;
  } else {
   $88 = HEAP32[$80>>2]|0;
   $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
   $$0$i$i31 = $89;
  }
  $90 = HEAP32[$7>>2]|0;
  $91 = HEAP32[$8>>2]|0;
  $92 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i31,$15,$16,$$1,$11,$90,$91,$9,$12,$13,$14,$6)|0);
  $93 = ($92|0)==(0);
  if (!($93)) {
   $$2 = $$1;$$pre$i4$i$i = $155;
   break;
  }
  $94 = HEAP32[$79>>2]|0;
  $95 = HEAP32[$81>>2]|0;
  $96 = ($94|0)==($95|0);
  if ($96) {
   $97 = HEAP32[$$pre$i$i$i>>2]|0;
   $98 = ((($97)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_ii[$99 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  } else {
   $100 = ((($94)) + 4|0);
   HEAP32[$79>>2] = $100;
   $101 = HEAP32[$94>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;$153 = $129;
   continue;
  }
 }
 $102 = ((($9)) + 11|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = ((($9)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103&255;
 $108 = $104 ? $106 : $107;
 $109 = ($108|0)==(0);
 $110 = HEAP8[$15>>0]|0;
 $111 = ($110<<24>>24)==(0);
 $or$cond = $109 | $111;
 if (!($or$cond)) {
  $112 = HEAP32[$13>>2]|0;
  $113 = $112;
  $114 = $12;
  $115 = (($113) - ($114))|0;
  $116 = ($115|0)<(160);
  if ($116) {
   $117 = HEAP32[$14>>2]|0;
   $118 = ((($112)) + 4|0);
   HEAP32[$13>>2] = $118;
   HEAP32[$112>>2] = $117;
  }
 }
 $119 = HEAP32[$11>>2]|0;
 $120 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$119,$4));
 HEAPF32[$5>>2] = $120;
 $121 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$121,$4);
 $122 = ($$pre$i$i$i|0)==(0|0);
 if ($122) {
  $156 = 1;
 } else {
  $123 = ((($$pre$i$i$i)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($$pre$i$i$i)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$129>>2]|0;
   $130 = ((($128)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_ii[$131 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $132;
  } else {
   $133 = HEAP32[$124>>2]|0;
   $134 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($133)|0);
   $$0$i$i$i$i = $134;
  }
  $135 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $136 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$135)|0);
  if ($136) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $137 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($137) {
   label = 47;
  } else {
   $138 = ((($$pre$i4$i$i)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($$pre$i4$i$i)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i4$i$i>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP32[$139>>2]|0;
    $148 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($156) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$153 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$129 = 0;$154 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$129 = 0;$154 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$129 = $153;$154 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $155;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$153 = $129;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$153 = $129;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 $116 = tempRet0;
 $117 = $5;
 $118 = $117;
 HEAP32[$118>>2] = $115;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = $116;
 $121 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$121,$4);
 $122 = ($$pre$i$i$i|0)==(0|0);
 if ($122) {
  $156 = 1;
 } else {
  $123 = ((($$pre$i$i$i)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($$pre$i$i$i)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$129>>2]|0;
   $130 = ((($128)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_ii[$131 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $132;
  } else {
   $133 = HEAP32[$124>>2]|0;
   $134 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($133)|0);
   $$0$i$i$i$i = $134;
  }
  $135 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $136 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$135)|0);
  if ($136) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $137 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($137) {
   label = 47;
  } else {
   $138 = ((($$pre$i4$i$i)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($$pre$i4$i$i)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i4$i$i>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP32[$139>>2]|0;
    $148 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($156) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNKSt3__28ios_base6getlocEv($4,$1);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,20588)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 (FUNCTION_TABLE_iiiii[$8 & 511]($5,15172,(15198),$2)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,20596)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 HEAP32[$3>>2] = $13;
 $14 = HEAP32[$9>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vii[$16 & 511]($0,$9);
 __ZNSt3__26localeD2Ev($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$148 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$124 = 0;$149 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$124 = 0;$149 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$124 = $148;$149 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($149) {
      $150 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($149) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $150 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $150;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 HEAP32[$5>>2] = $115;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $151 = 1;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$124>>2]|0;
   $125 = ((($123)) + 36|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $127;
  } else {
   $128 = HEAP32[$119>>2]|0;
   $129 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   $$0$i$i$i$i = $129;
  }
  $130 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $131 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$130)|0);
  if ($131) {
   HEAP32[$1>>2] = 0;
   $151 = 1;
  } else {
   $151 = 0;
  }
 }
 $132 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($132) {
   label = 47;
  } else {
   $133 = ((($$pre$i4$i$i)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($$pre$i4$i$i)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   if ($137) {
    $138 = HEAP32[$$pre$i4$i$i>>2]|0;
    $139 = ((($138)) + 36|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $141;
   } else {
    $142 = HEAP32[$134>>2]|0;
    $143 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
    $$0$i$i2$i$i = $143;
   }
   $144 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $145 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$144)|0);
   if ($145) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($151) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($151) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $146 = HEAP32[$4>>2]|0;
  $147 = $146 | 2;
  HEAP32[$4>>2] = $147;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$148 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$124 = 0;$149 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$124 = 0;$149 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$124 = $148;$149 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($149) {
      $150 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($149) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $150 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $150;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 HEAP32[$5>>2] = $115;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $151 = 1;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$124>>2]|0;
   $125 = ((($123)) + 36|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $127;
  } else {
   $128 = HEAP32[$119>>2]|0;
   $129 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   $$0$i$i$i$i = $129;
  }
  $130 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $131 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$130)|0);
  if ($131) {
   HEAP32[$1>>2] = 0;
   $151 = 1;
  } else {
   $151 = 0;
  }
 }
 $132 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($132) {
   label = 47;
  } else {
   $133 = ((($$pre$i4$i$i)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($$pre$i4$i$i)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   if ($137) {
    $138 = HEAP32[$$pre$i4$i$i>>2]|0;
    $139 = ((($138)) + 36|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $141;
   } else {
    $142 = HEAP32[$134>>2]|0;
    $143 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
    $$0$i$i2$i$i = $143;
   }
   $144 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $145 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$144)|0);
   if ($145) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($151) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($151) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $146 = HEAP32[$4>>2]|0;
  $147 = $146 | 2;
  HEAP32[$4>>2] = $147;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$148 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$124 = 0;$149 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$124 = 0;$149 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$124 = $148;$149 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($149) {
      $150 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($149) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $150 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $150;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 HEAP16[$5>>1] = $115;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $151 = 1;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$124>>2]|0;
   $125 = ((($123)) + 36|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $127;
  } else {
   $128 = HEAP32[$119>>2]|0;
   $129 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   $$0$i$i$i$i = $129;
  }
  $130 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $131 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$130)|0);
  if ($131) {
   HEAP32[$1>>2] = 0;
   $151 = 1;
  } else {
   $151 = 0;
  }
 }
 $132 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($132) {
   label = 47;
  } else {
   $133 = ((($$pre$i4$i$i)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($$pre$i4$i$i)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   if ($137) {
    $138 = HEAP32[$$pre$i4$i$i>>2]|0;
    $139 = ((($138)) + 36|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $141;
   } else {
    $142 = HEAP32[$134>>2]|0;
    $143 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
    $$0$i$i2$i$i = $143;
   }
   $144 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $145 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$144)|0);
   if ($145) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($151) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($151) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $146 = HEAP32[$4>>2]|0;
  $147 = $146 | 2;
  HEAP32[$4>>2] = $147;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$153 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$129 = 0;$154 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$129 = 0;$154 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$129 = $153;$154 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($154) {
      $155 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($154) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $155 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $155;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$153 = $129;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$153 = $129;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 $116 = tempRet0;
 $117 = $5;
 $118 = $117;
 HEAP32[$118>>2] = $115;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = $116;
 $121 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$121,$4);
 $122 = ($$pre$i$i$i|0)==(0|0);
 if ($122) {
  $156 = 1;
 } else {
  $123 = ((($$pre$i$i$i)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($$pre$i$i$i)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$129>>2]|0;
   $130 = ((($128)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (FUNCTION_TABLE_ii[$131 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $132;
  } else {
   $133 = HEAP32[$124>>2]|0;
   $134 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($133)|0);
   $$0$i$i$i$i = $134;
  }
  $135 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $136 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$135)|0);
  if ($136) {
   HEAP32[$1>>2] = 0;
   $156 = 1;
  } else {
   $156 = 0;
  }
 }
 $137 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($137) {
   label = 47;
  } else {
   $138 = ((($$pre$i4$i$i)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($$pre$i4$i$i)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i4$i$i>>2]|0;
    $144 = ((($143)) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $146;
   } else {
    $147 = HEAP32[$139>>2]|0;
    $148 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
    $$0$i$i2$i$i = $148;
   }
   $149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$149)|0);
   if ($150) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($156) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($156) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $151 = HEAP32[$4>>2]|0;
  $152 = $151 | 2;
  HEAP32[$4>>2] = $152;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i35 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;$148 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$124 = 0;$149 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $40 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
    $$0$i$i$i$i19 = $40;
   }
   $41 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $42 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i19,$41)|0);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$124 = 0;$149 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$124 = $148;$149 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 511]($43)|0);
     $$0$i$i2$i$i25 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $55 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($54)|0);
     $$0$i$i2$i$i25 = $55;
    }
    $56 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $57 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i25,$56)|0);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($149) {
      $150 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($149) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $150 = 0;
   }
  }
  $58 = HEAP32[$10>>2]|0;
  $59 = HEAP8[$17>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$28>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$20>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i32 = (($70) + -1)|0;
    $71 = $phitmp$i32;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$71,0);
   $72 = HEAP8[$17>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$9>>2]|0;
   $75 = $73 ? $74 : $9;
   $76 = (($75) + ($63)|0);
   HEAP32[$10>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 511]($$pre$i$i$i)|0);
   $$0$i$i35 = $85;
  } else {
   $86 = HEAP32[$78>>2]|0;
   $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
   $$0$i$i35 = $87;
  }
  $88 = HEAP32[$7>>2]|0;
  $89 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i35,$14,$$1,$10,$13,$88,$8,$11,$12,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i4$i$i = $150;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 511]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  } else {
   $97 = ((($91)) + 4|0);
   HEAP32[$77>>2] = $97;
   $98 = HEAP32[$91>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($98)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;$148 = $124;
   continue;
  }
 }
 $99 = ((($8)) + 11|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = ((($8)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100&255;
 $105 = $101 ? $103 : $104;
 $106 = ($105|0)==(0);
 if (!($106)) {
  $107 = HEAP32[$12>>2]|0;
  $108 = $107;
  $109 = $11;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$13>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$12>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$10>>2]|0;
 $115 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$114,$4,$14)|0);
 HEAP32[$5>>2] = $115;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $151 = 1;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$124>>2]|0;
   $125 = ((($123)) + 36|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 511]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $127;
  } else {
   $128 = HEAP32[$119>>2]|0;
   $129 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   $$0$i$i$i$i = $129;
  }
  $130 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $131 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$130)|0);
  if ($131) {
   HEAP32[$1>>2] = 0;
   $151 = 1;
  } else {
   $151 = 0;
  }
 }
 $132 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($132) {
   label = 47;
  } else {
   $133 = ((($$pre$i4$i$i)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($$pre$i4$i$i)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($134|0)==($136|0);
   if ($137) {
    $138 = HEAP32[$$pre$i4$i$i>>2]|0;
    $139 = ((($138)) + 36|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $141;
   } else {
    $142 = HEAP32[$134>>2]|0;
    $143 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
    $$0$i$i2$i$i = $143;
   }
   $144 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $145 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$144)|0);
   if ($145) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($151) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($151) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $146 = HEAP32[$4>>2]|0;
  $147 = $146 | 2;
  HEAP32[$4>>2] = $147;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i116 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i122 = 0, $$0101 = 0, $$0105 = 0, $$0111 = 0, $$0112 = 0, $$0112142 = 0, $$092 = 0, $$093 = 0, $$094$off0 = 0, $$095 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$1102 = 0, $$1106 = 0;
 var $$199 = 0, $$2$off0 = 0, $$2100 = 0, $$2103 = 0, $$2107 = 0, $$3 = 0, $$3104 = 0, $$3108 = 0, $$5 = 0, $$5110 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i118 = 0, $$pre$i4$i$i124 = 0, $$sroa$0129$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0111 = $13;$$sroa$0129$0 = $13;
  }
 } else {
  $$0111 = $7;$$sroa$0129$0 = 0;
 }
 $$0101 = 0;$$0105 = $11;$$097 = $2;$$098 = $$0111;
 while(1) {
  $15 = ($$097|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$097)) + 8|0);
  $17 = ((($16)) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  if ($19) {
   $20 = ((($$097)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $23 = $21;
  } else {
   $22 = $18&255;
   $23 = $22;
  }
  $24 = ($23|0)==(0);
  if ($24) {
   HEAP8[$$098>>0] = 2;
   $25 = (($$0105) + -1)|0;
   $26 = (($$0101) + 1)|0;
   $$1102 = $26;$$1106 = $25;
  } else {
   HEAP8[$$098>>0] = 1;
   $$1102 = $$0101;$$1106 = $$0105;
  }
  $27 = ((($$097)) + 12|0);
  $28 = ((($$098)) + 1|0);
  $$0101 = $$1102;$$0105 = $$1106;$$097 = $27;$$098 = $28;
 }
 $$096 = 0;$$2103 = $$0101;$$2107 = $$0105;
 L17: while(1) {
  $29 = HEAP32[$0>>2]|0;
  $30 = ($29|0)==(0|0);
  do {
   if ($30) {
    $61 = 1;
   } else {
    $31 = ((($29)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($29)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32|0)==($34|0);
    if ($35) {
     $36 = HEAP32[$29>>2]|0;
     $37 = ((($36)) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (FUNCTION_TABLE_ii[$38 & 511]($29)|0);
     $$0$i$i$i$i = $39;
    } else {
     $40 = HEAP32[$32>>2]|0;
     $41 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($40)|0);
     $$0$i$i$i$i = $41;
    }
    $42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $43 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$42)|0);
    if ($43) {
     HEAP32[$0>>2] = 0;
     $61 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $61 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $44 = HEAP32[$1>>2]|0;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $$pre$i4$i$i124 = 0;$60 = 1;
  } else {
   $46 = ((($44)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($44)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)==($49|0);
   if ($50) {
    $51 = HEAP32[$44>>2]|0;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (FUNCTION_TABLE_ii[$53 & 511]($44)|0);
    $$0$i$i2$i$i = $54;
   } else {
    $55 = HEAP32[$47>>2]|0;
    $56 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($55)|0);
    $$0$i$i2$i$i = $56;
   }
   $57 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $58 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$57)|0);
   if ($58) {
    HEAP32[$1>>2] = 0;
    $$pre$i4$i$i124 = 0;$60 = 1;
   } else {
    $$pre$i4$i$i124 = $44;$60 = 0;
   }
  }
  $59 = $61 ^ $60;
  $62 = ($$2107|0)!=(0);
  $63 = $62 & $59;
  $64 = HEAP32[$0>>2]|0;
  if (!($63)) {
   break;
  }
  $93 = ((($64)) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($64)) + 16|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94|0)==($96|0);
  if ($97) {
   $98 = HEAP32[$64>>2]|0;
   $99 = ((($98)) + 36|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (FUNCTION_TABLE_ii[$100 & 511]($64)|0);
   $$0$i$i = $101;
  } else {
   $102 = HEAP32[$94>>2]|0;
   $103 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($102)|0);
   $$0$i$i = $103;
  }
  if ($6) {
   $$095 = $$0$i$i;
  } else {
   $104 = HEAP32[$4>>2]|0;
   $105 = ((($104)) + 28|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_iii[$106 & 511]($4,$$0$i$i)|0);
   $$095 = $107;
  }
  $108 = (($$096) + 1)|0;
  $$093 = $2;$$094$off0 = 0;$$199 = $$0111;$$3104 = $$2103;$$3108 = $$2107;
  while(1) {
   $109 = ($$093|0)==($3|0);
   if ($109) {
    break;
   }
   $110 = HEAP8[$$199>>0]|0;
   $111 = ($110<<24>>24)==(1);
   do {
    if ($111) {
     $112 = ((($$093)) + 8|0);
     $113 = ((($112)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)<(0);
     if ($115) {
      $116 = HEAP32[$$093>>2]|0;
      $118 = $116;
     } else {
      $118 = $$093;
     }
     $117 = (($118) + ($$096<<2)|0);
     $119 = HEAP32[$117>>2]|0;
     if ($6) {
      $$092 = $119;
     } else {
      $120 = HEAP32[$4>>2]|0;
      $121 = ((($120)) + 28|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_iii[$122 & 511]($4,$119)|0);
      $$092 = $123;
     }
     $124 = ($$095|0)==($$092|0);
     if (!($124)) {
      HEAP8[$$199>>0] = 0;
      $134 = (($$3108) + -1)|0;
      $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $134;
      break;
     }
     $125 = HEAP8[$113>>0]|0;
     $126 = ($125<<24>>24)<(0);
     if ($126) {
      $127 = ((($$093)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $130 = $128;
     } else {
      $129 = $125&255;
      $130 = $129;
     }
     $131 = ($130|0)==($108|0);
     if ($131) {
      $132 = (($$3108) + -1)|0;
      $133 = (($$3104) + 1)|0;
      HEAP8[$$199>>0] = 2;
      $$2$off0 = 1;$$5 = $133;$$5110 = $132;
     } else {
      $$2$off0 = 1;$$5 = $$3104;$$5110 = $$3108;
     }
    } else {
     $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $$3108;
    }
   } while(0);
   $135 = ((($$093)) + 12|0);
   $136 = ((($$199)) + 1|0);
   $$093 = $135;$$094$off0 = $$2$off0;$$199 = $136;$$3104 = $$5;$$3108 = $$5110;
  }
  if (!($$094$off0)) {
   $$096 = $108;$$2103 = $$3104;$$2107 = $$3108;
   continue;
  }
  $137 = HEAP32[$0>>2]|0;
  $138 = ((($137)) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($137)) + 16|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($139|0)==($141|0);
  if ($142) {
   $143 = HEAP32[$137>>2]|0;
   $144 = ((($143)) + 40|0);
   $145 = HEAP32[$144>>2]|0;
   (FUNCTION_TABLE_ii[$145 & 511]($137)|0);
  } else {
   $146 = ((($139)) + 4|0);
   HEAP32[$138>>2] = $146;
   $147 = HEAP32[$139>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($147)|0);
  }
  $148 = (($$3104) + ($$3108))|0;
  $149 = ($148>>>0)>(1);
  if ($149) {
   $$0 = $2;$$2100 = $$0111;$$6 = $$3104;
  } else {
   $$096 = $108;$$2103 = $$3104;$$2107 = $$3108;
   continue;
  }
  while(1) {
   $150 = ($$0|0)==($3|0);
   if ($150) {
    $$096 = $108;$$2103 = $$6;$$2107 = $$3108;
    continue L17;
   }
   $151 = HEAP8[$$2100>>0]|0;
   $152 = ($151<<24>>24)==(2);
   if ($152) {
    $153 = ((($$0)) + 8|0);
    $154 = ((($153)) + 3|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = ($155<<24>>24)<(0);
    if ($156) {
     $157 = ((($$0)) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $160 = $158;
    } else {
     $159 = $155&255;
     $160 = $159;
    }
    $161 = ($160|0)==($108|0);
    if ($161) {
     $$7 = $$6;
    } else {
     $162 = (($$6) + -1)|0;
     HEAP8[$$2100>>0] = 0;
     $$7 = $162;
    }
   } else {
    $$7 = $$6;
   }
   $163 = ((($$0)) + 12|0);
   $164 = ((($$2100)) + 1|0);
   $$0 = $163;$$2100 = $164;$$6 = $$7;
  }
 }
 $65 = ($64|0)==(0|0);
 do {
  if ($65) {
   $174 = 1;
  } else {
   $66 = ((($64)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($64)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)==($69|0);
   if ($70) {
    $71 = HEAP32[$64>>2]|0;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_ii[$73 & 511]($64)|0);
    $$0$i$i$i$i116 = $74;
   } else {
    $75 = HEAP32[$67>>2]|0;
    $76 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($75)|0);
    $$0$i$i$i$i116 = $76;
   }
   $77 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $78 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i116,$77)|0);
   if ($78) {
    HEAP32[$0>>2] = 0;
    $174 = 1;
    break;
   } else {
    $$pre$i$i$i118 = HEAP32[$0>>2]|0;
    $phitmp$i$i$i119 = ($$pre$i$i$i118|0)==(0|0);
    $174 = $phitmp$i$i$i119;
    break;
   }
  }
 } while(0);
 $79 = ($$pre$i4$i$i124|0)==(0|0);
 do {
  if ($79) {
   label = 41;
  } else {
   $80 = ((($$pre$i4$i$i124)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($$pre$i4$i$i124)) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)==($83|0);
   if ($84) {
    $85 = HEAP32[$$pre$i4$i$i124>>2]|0;
    $86 = ((($85)) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (FUNCTION_TABLE_ii[$87 & 511]($$pre$i4$i$i124)|0);
    $$0$i$i2$i$i122 = $88;
   } else {
    $89 = HEAP32[$81>>2]|0;
    $90 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($89)|0);
    $$0$i$i2$i$i122 = $90;
   }
   $91 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $92 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i122,$91)|0);
   if ($92) {
    HEAP32[$1>>2] = 0;
    label = 41;
    break;
   } else {
    if ($174) {
     $$0112 = $2;$$3 = $$0111;
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($174) {
   label = 77;
  } else {
   $$0112 = $2;$$3 = $$0111;
  }
 }
 if ((label|0) == 77) {
  $165 = HEAP32[$5>>2]|0;
  $166 = $165 | 2;
  HEAP32[$5>>2] = $166;
  $$0112 = $2;$$3 = $$0111;
 }
 while(1) {
  $167 = ($$0112|0)==($3|0);
  if ($167) {
   label = 81;
   break;
  }
  $168 = HEAP8[$$3>>0]|0;
  $169 = ($168<<24>>24)==(2);
  if ($169) {
   $$0112142 = $$0112;
   break;
  }
  $170 = ((($$0112)) + 12|0);
  $171 = ((($$3)) + 1|0);
  $$0112 = $170;$$3 = $171;
 }
 if ((label|0) == 81) {
  $172 = HEAP32[$5>>2]|0;
  $173 = $172 | 4;
  HEAP32[$5>>2] = $173;
  $$0112142 = $3;
 }
 _free($$sroa$0129$0);
 STACKTOP = sp;return ($$0112142|0);
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pr = 0, $$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $$sroa$09$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $15;
  $16 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
  $$sroa$0$0 = $17;
 } else {
  __ZNKSt3__28ios_base6getlocEv($6,$2);
  $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20572)|0);
  __ZNSt3__26localeD2Ev($6);
  $19 = HEAP32[$18>>2]|0;
  if ($4) {
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_vii[$21 & 511]($7,$18);
  } else {
   $22 = ((($19)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$23 & 511]($7,$18);
  }
  $24 = ((($7)) + 11|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  $27 = HEAP32[$7>>2]|0;
  $$sroa$09$0$ph = $26 ? $27 : $7;
  $28 = ((($7)) + 4|0);
  $$sroa$09$0 = $$sroa$09$0$ph;$29 = $25;$33 = $27;
  while(1) {
   $30 = ($29<<24>>24)<(0);
   $31 = HEAP32[$28>>2]|0;
   $32 = $29&255;
   $34 = $30 ? $33 : $7;
   $35 = $30 ? $31 : $32;
   $36 = (($34) + ($35)|0);
   $37 = ($$sroa$09$0|0)==($36|0);
   if ($37) {
    break;
   }
   $38 = HEAP8[$$sroa$09$0>>0]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = ((($39)) + 24|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($39)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($42|0)==($44|0);
    if ($45) {
     $46 = HEAP32[$39>>2]|0;
     $47 = ((($46)) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($38)|0);
     $50 = (FUNCTION_TABLE_iii[$48 & 511]($39,$49)|0);
     $$0$i$i = $50;
    } else {
     $51 = ((($42)) + 1|0);
     HEAP32[$41>>2] = $51;
     HEAP8[$42>>0] = $38;
     $52 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($38)|0);
     $$0$i$i = $52;
    }
    $53 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $54 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$53)|0);
    if ($54) {
     HEAP32[$1>>2] = 0;
    }
   }
   $55 = ((($$sroa$09$0)) + 1|0);
   $$pr = HEAP8[$24>>0]|0;
   $$pre = HEAP32[$7>>2]|0;
   $$sroa$09$0 = $55;$29 = $$pr;$33 = $$pre;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 47|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15426>>0]|0;HEAP8[$5+1>>0]=HEAP8[15426+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15426+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15426+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15426+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15426+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15432,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$18,$17,$7,$8,$9,$10);
 __ZNSt3__26localeD2Ev($10);
 $19 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $22 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$20,$21,$2,$3)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15423,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($7,$27,$26,$8,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $28;
 $29 = HEAP32[$9>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $31 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$29,$30,$2,$3)|0);
 STACKTOP = sp;return ($31|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15426>>0]|0;HEAP8[$5+1>>0]=HEAP8[15426+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15426+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15426+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15426+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15426+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15432,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$18,$17,$7,$8,$9,$10);
 __ZNSt3__26localeD2Ev($10);
 $19 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $22 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$20,$21,$2,$3)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15423,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($7,$27,$26,$8,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $28;
 $29 = HEAP32[$9>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $31 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$29,$30,$2,$3)|0);
 STACKTOP = sp;return ($31|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,24556,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$048$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 if ($37) {
  $$037 = $8;$$sroa$041$0 = 0;
 } else {
  $38 = $$2 << 1;
  $39 = (_malloc($38)|0);
  $40 = ($39|0)==(0|0);
  if ($40) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $39;$$sroa$041$0 = $39;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,15421,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$048$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 if ($37) {
  $$037 = $8;$$sroa$041$0 = 0;
 } else {
  $38 = $$2 << 1;
  $39 = (_malloc($38)|0);
  $40 = ($39|0)==(0|0);
  if ($40) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$037 = $39;$$sroa$041$0 = $39;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $5 = sp + 76|0;
 $6 = sp + 56|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15415>>0]|0;HEAP8[$5+1>>0]=HEAP8[15415+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15415+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15415+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15415+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15415+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20556)|0);
 __ZNSt3__26localeD2Ev($8);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 511]($14,$6,$12,$7)|0);
 $18 = (($7) + ($11)|0);
 $19 = ($13|0)==($12|0);
 $20 = $6;
 $21 = $13;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (___uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  (___uselocale($5)|0);
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $7 = ((($0)) + 1|0);
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $15 = ((($0)) + 2|0);
    $$0 = $15;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$027$off0$ph = 0, $$1 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $$sink1 = 0, $$sink1$sink = 0, $$sink2 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($10|0)!=(0);
 $12 = ($9|0)==(260);
 if ($12) {
  $$027$off0$ph = 0;$$2$ph = $$1;
 } else {
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $14 = ((($$1)) + 2|0);
  HEAP8[$13>>0] = 42;
  $$027$off0$ph = 1;$$2$ph = $14;
 }
 $$026 = $1;$$2 = $$2$ph;
 while(1) {
  $15 = HEAP8[$$026>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   break;
  }
  $17 = ((($$026)) + 1|0);
  $18 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $15;
  $$026 = $17;$$2 = $18;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $$sink = $11 ? 70 : 102;
   $$sink1$sink = $$sink;
   break;
  }
  case 256:  {
   $$sink1 = $11 ? 69 : 101;
   $$sink1$sink = $$sink1;
   break;
  }
  default: {
   if ($12) {
    $$sink2 = $11 ? 65 : 97;
    $$sink1$sink = $$sink2;
    break L14;
   } else {
    $$sink3 = $11 ? 71 : 103;
    $$sink1$sink = $$sink3;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$$2>>0] = $$sink1$sink;
 return ($$027$off0$ph|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vasprintf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0100 = 0, $$0102 = 0, $$0104 = 0, $$07$i$i = 0, $$07$i$i107 = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$1103 = 0, $$1105 = 0, $$2 = 0, $$2106 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20572)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 511]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 1|0);
  HEAP32[$5>>2] = $20;
  HEAP8[$19>>0] = $18;
  $$0102 = $14;
  break;
 }
 default: {
  $$0102 = $0;
 }
 }
 $21 = $2;
 $22 = $$0102;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0102>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0102)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     $$1105 = $$0102;
     label = 10;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 511]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 1|0);
    HEAP32[$5>>2] = $34;
    HEAP8[$33>>0] = $32;
    $35 = ((($$0102)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$5>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$0104 = $35;
    while(1) {
     $43 = ($$0104>>>0)<($2>>>0);
     if (!($43)) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $44 = HEAP8[$$0104>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $49 = ((($$0104)) + 1|0);
     $$0104 = $49;
    }
   } else {
    $$1105 = $$0102;
    label = 10;
   }
  } else {
   $$1105 = $$0102;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $50 = ($$1105>>>0)<($2>>>0);
    if (!($50)) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $51 = HEAP8[$$1105>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $56 = ((($$1105)) + 1|0);
    $$1105 = $56;
    label = 10;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L18: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 511]($8,$$1103,$$2106,$65)|0);
   $69 = $$2106;
   $70 = $$1103;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;
  } else {
   $74 = ($$1103|0)==($$2106|0);
   L21: do {
    if (!($74)) {
     $$0$i$i = $$2106;$$07$i$i = $$1103;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L21;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 511]($9)|0);
   $$0 = $$1103;$$0100 = 0;$$099 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2106>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$099)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0100|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 1|0);
     HEAP32[$5>>2] = $106;
     HEAP8[$105>>0] = $83;
     $107 = HEAP8[$57>>0]|0;
     $108 = ($107<<24>>24)<(0);
     $109 = HEAP32[$60>>2]|0;
     $110 = $107&255;
     $111 = $108 ? $109 : $110;
     $112 = (($111) + -1)|0;
     $113 = ($$099>>>0)<($112>>>0);
     $114 = $113&1;
     $$$099 = (($$099) + ($114))|0;
     $$1 = $$$099;$$1101 = 0;
    } else {
     $$1 = $$099;$$1101 = $$0100;
    }
    $115 = HEAP8[$$0>>0]|0;
    $116 = HEAP32[$8>>2]|0;
    $117 = ((($116)) + 28|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (FUNCTION_TABLE_iii[$118 & 511]($8,$115)|0);
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 1|0);
    HEAP32[$5>>2] = $121;
    HEAP8[$120>>0] = $119;
    $122 = (($$1101) + 1)|0;
    $123 = ((($$0)) + 1|0);
    $$0 = $123;$$0100 = $122;$$099 = $$1;
   }
   $85 = $$1103;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;
   } else {
    $$0$i$i108 = $89;$$07$i$i107 = $88;
    while(1) {
     $91 = ((($$0$i$i108)) + -1|0);
     $92 = ($$07$i$i107>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;
      break L18;
     }
     $93 = HEAP8[$$07$i$i107>>0]|0;
     $94 = HEAP8[$91>>0]|0;
     HEAP8[$$07$i$i107>>0] = $94;
     HEAP8[$91>>0] = $93;
     $95 = ((($$07$i$i107)) + 1|0);
     $$0$i$i108 = $91;$$07$i$i107 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2106;
 while(1) {
  $124 = ($$2>>>0)<($2>>>0);
  if (!($124)) {
   $$3 = $$2;
   break;
  }
  $125 = HEAP8[$$2>>0]|0;
  $126 = ($125<<24>>24)==(46);
  if ($126) {
   label = 29;
   break;
  }
  $134 = HEAP32[$$pre$phiZ2D>>2]|0;
  $135 = ((($134)) + 28|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iii[$136 & 511]($8,$125)|0);
  $138 = HEAP32[$5>>2]|0;
  $139 = ((($138)) + 1|0);
  HEAP32[$5>>2] = $139;
  HEAP8[$138>>0] = $137;
  $140 = ((($$2)) + 1|0);
  $$2 = $140;
 }
 if ((label|0) == 29) {
  $127 = HEAP32[$9>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 511]($9)|0);
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 1|0);
  HEAP32[$5>>2] = $132;
  HEAP8[$131>>0] = $130;
  $133 = ((($$2)) + 1|0);
  $$3 = $133;
 }
 $141 = HEAP32[$5>>2]|0;
 $142 = HEAP32[$8>>2]|0;
 $143 = ((($142)) + 32|0);
 $144 = HEAP32[$143>>2]|0;
 (FUNCTION_TABLE_iiiii[$144 & 511]($8,$$3,$2,$141)|0);
 $145 = $$3;
 $146 = (($21) - ($145))|0;
 $147 = HEAP32[$5>>2]|0;
 $148 = (($147) + ($146)|0);
 HEAP32[$5>>2] = $148;
 $149 = ($1|0)==($2|0);
 $150 = $1;
 $151 = $0;
 $152 = (($150) - ($151))|0;
 $153 = (($3) + ($152)|0);
 $storemerge = $149 ? $148 : $153;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$1 = 0, $$sink = 0, $$sink$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$014 = $1;$$1 = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$014 = $1;$$1 = $9;
 }
 while(1) {
  $10 = HEAP8[$$014>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$014)) + 1|0);
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $10;
  $$014 = $12;$$1 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink$sink = 111;
  break;
 }
 case 8:  {
  $15 = $3 & 16384;
  $16 = ($15|0)!=(0);
  $$sink = $16 ? 88 : 120;
  $$sink$sink = $$sink;
  break;
 }
 default: {
  $$sink1 = $2 ? 100 : 117;
  $$sink$sink = $$sink1;
 }
 }
 HEAP8[$$1>>0] = $$sink$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$070 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i76 = 0, $$07$i$i = 0, $$07$i$i75 = 0, $$070 = 0, $$071 = 0, $$073 = 0, $$1 = 0, $$172 = 0, $$174 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20572)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiiii[$23 & 511]($8,$0,$2,$3)|0);
  $24 = $2;
  $25 = $0;
  $26 = (($24) - ($25))|0;
  $27 = (($3) + ($26)|0);
  HEAP32[$5>>2] = $27;
  $$pre$phiZ2D = $25;$112 = $27;
 } else {
  HEAP32[$5>>2] = $3;
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 43: case 45:  {
   $29 = ((($0)) + 1|0);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 511]($8,$28)|0);
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 1|0);
   HEAP32[$5>>2] = $35;
   HEAP8[$34>>0] = $33;
   $$073 = $29;
   break;
  }
  default: {
   $$073 = $0;
  }
  }
  $36 = $2;
  $37 = $$073;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(1);
  L7: do {
   if ($39) {
    $40 = HEAP8[$$073>>0]|0;
    $41 = ($40<<24>>24)==(48);
    if ($41) {
     $42 = ((($$073)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     switch ($43<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $$174 = $$073;
      break L7;
     }
     }
     $44 = HEAP32[$8>>2]|0;
     $45 = ((($44)) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 511]($8,48)|0);
     $48 = HEAP32[$5>>2]|0;
     $49 = ((($48)) + 1|0);
     HEAP32[$5>>2] = $49;
     HEAP8[$48>>0] = $47;
     $50 = ((($$073)) + 2|0);
     $51 = HEAP8[$42>>0]|0;
     $52 = HEAP32[$8>>2]|0;
     $53 = ((($52)) + 28|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iii[$54 & 511]($8,$51)|0);
     $56 = HEAP32[$5>>2]|0;
     $57 = ((($56)) + 1|0);
     HEAP32[$5>>2] = $57;
     HEAP8[$56>>0] = $55;
     $$174 = $50;
    } else {
     $$174 = $$073;
    }
   } else {
    $$174 = $$073;
   }
  } while(0);
  $58 = ($$174|0)==($2|0);
  L12: do {
   if (!($58)) {
    $$0$i$i = $2;$$07$i$i = $$174;
    while(1) {
     $59 = ((($$0$i$i)) + -1|0);
     $60 = ($$07$i$i>>>0)<($59>>>0);
     if (!($60)) {
      break L12;
     }
     $61 = HEAP8[$$07$i$i>>0]|0;
     $62 = HEAP8[$59>>0]|0;
     HEAP8[$$07$i$i>>0] = $62;
     HEAP8[$59>>0] = $61;
     $63 = ((($$07$i$i)) + 1|0);
     $$0$i$i = $59;$$07$i$i = $63;
    }
   }
  } while(0);
  $64 = HEAP32[$9>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 511]($9)|0);
  $$0 = $$174;$$070 = 0;$$071 = 0;
  while(1) {
   $68 = ($$0>>>0)<($2>>>0);
   if (!($68)) {
    break;
   }
   $80 = HEAP8[$13>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = HEAP32[$7>>2]|0;
   $83 = $81 ? $82 : $7;
   $84 = (($83) + ($$070)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   $87 = $85 << 24 >> 24;
   $88 = ($$071|0)==($87|0);
   $or$cond = $86 & $88;
   if ($or$cond) {
    $89 = HEAP32[$5>>2]|0;
    $90 = ((($89)) + 1|0);
    HEAP32[$5>>2] = $90;
    HEAP8[$89>>0] = $67;
    $91 = HEAP8[$13>>0]|0;
    $92 = ($91<<24>>24)<(0);
    $93 = HEAP32[$16>>2]|0;
    $94 = $91&255;
    $95 = $92 ? $93 : $94;
    $96 = (($95) + -1)|0;
    $97 = ($$070>>>0)<($96>>>0);
    $98 = $97&1;
    $$$070 = (($$070) + ($98))|0;
    $$1 = $$$070;$$172 = 0;
   } else {
    $$1 = $$070;$$172 = $$071;
   }
   $99 = HEAP8[$$0>>0]|0;
   $100 = HEAP32[$8>>2]|0;
   $101 = ((($100)) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iii[$102 & 511]($8,$99)|0);
   $104 = HEAP32[$5>>2]|0;
   $105 = ((($104)) + 1|0);
   HEAP32[$5>>2] = $105;
   HEAP8[$104>>0] = $103;
   $106 = (($$172) + 1)|0;
   $107 = ((($$0)) + 1|0);
   $$0 = $107;$$070 = $$1;$$071 = $106;
  }
  $69 = $$174;
  $70 = $0;
  $71 = (($69) - ($70))|0;
  $72 = (($3) + ($71)|0);
  $73 = HEAP32[$5>>2]|0;
  $74 = ($72|0)==($73|0);
  if ($74) {
   $$pre$phiZ2D = $70;$112 = $72;
  } else {
   $$0$i$i76 = $73;$$07$i$i75 = $72;
   while(1) {
    $75 = ((($$0$i$i76)) + -1|0);
    $76 = ($$07$i$i75>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = HEAP8[$$07$i$i75>>0]|0;
    $78 = HEAP8[$75>>0]|0;
    HEAP8[$$07$i$i75>>0] = $78;
    HEAP8[$75>>0] = $77;
    $79 = ((($$07$i$i75)) + 1|0);
    $$0$i$i76 = $75;$$07$i$i75 = $79;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre$phiZ2D = $70;$112 = $$pre;
  }
 }
 $108 = ($1|0)==($2|0);
 $109 = $1;
 $110 = (($109) - ($$pre$phiZ2D))|0;
 $111 = (($3) + ($110)|0);
 $storemerge = $108 ? $112 : $111;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pr = 0, $$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $$sroa$09$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $15;
  $16 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
  $$sroa$0$0 = $17;
 } else {
  __ZNKSt3__28ios_base6getlocEv($6,$2);
  $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20596)|0);
  __ZNSt3__26localeD2Ev($6);
  $19 = HEAP32[$18>>2]|0;
  if ($4) {
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_vii[$21 & 511]($7,$18);
  } else {
   $22 = ((($19)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$23 & 511]($7,$18);
  }
  $24 = ((($7)) + 8|0);
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$7>>2]|0;
  $$sroa$09$0$ph = $27 ? $28 : $7;
  $29 = ((($7)) + 4|0);
  $$sroa$09$0 = $$sroa$09$0$ph;$30 = $26;$34 = $28;
  while(1) {
   $31 = ($30<<24>>24)<(0);
   $32 = HEAP32[$29>>2]|0;
   $33 = $30&255;
   $35 = $31 ? $34 : $7;
   $36 = $31 ? $32 : $33;
   $37 = (($35) + ($36<<2)|0);
   $38 = ($$sroa$09$0|0)==($37|0);
   if ($38) {
    break;
   }
   $39 = HEAP32[$$sroa$09$0>>2]|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $42 = ((($40)) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($40)) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if ($46) {
     $47 = HEAP32[$40>>2]|0;
     $48 = ((($47)) + 52|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
     $51 = (FUNCTION_TABLE_iii[$49 & 511]($40,$50)|0);
     $$0$i$i = $51;
    } else {
     $52 = ((($43)) + 4|0);
     HEAP32[$42>>2] = $52;
     HEAP32[$43>>2] = $39;
     $53 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
     $$0$i$i = $53;
    }
    $54 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $55 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i,$54)|0);
    if ($55) {
     HEAP32[$1>>2] = 0;
    }
   }
   $56 = ((($$sroa$09$0)) + 4|0);
   $$pr = HEAP8[$25>>0]|0;
   $$pre = HEAP32[$7>>2]|0;
   $$sroa$09$0 = $56;$30 = $$pr;$34 = $$pre;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 112|0;
 $vararg_buffer = sp;
 $5 = sp + 130|0;
 $6 = sp + 116|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15426>>0]|0;HEAP8[$5+1>>0]=HEAP8[15426+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15426+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15426+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15426+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15426+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15432,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$18,$17,$7,$8,$9,$10);
 __ZNSt3__26localeD2Ev($10);
 $19 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $22 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$20,$21,$2,$3)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15423,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($7,$27,$26,$8,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $28;
 $29 = HEAP32[$9>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $31 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$29,$30,$2,$3)|0);
 STACKTOP = sp;return ($31|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $5 = sp + 120|0;
 $6 = sp + 108|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15426>>0]|0;HEAP8[$5+1>>0]=HEAP8[15426+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15426+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15426+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15426+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15426+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15432,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$18,$17,$7,$8,$9,$10);
 __ZNSt3__26localeD2Ev($10);
 $19 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $22 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$20,$21,$2,$3)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15423,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($7,$27,$26,$8,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $28;
 $29 = HEAP32[$9>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $31 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$29,$30,$2,$3)|0);
 STACKTOP = sp;return ($31|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,24556,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$046$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 do {
  if ($37) {
   $$037 = $8;$$sroa$039$0 = 1;$45 = 0;
  } else {
   $38 = $$2 << 3;
   $39 = (_malloc($38)|0);
   $40 = ($39|0)==(0|0);
   if ($40) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$037 = $39;$$sroa$039$0 = 0;$45 = $39;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 HEAP32[$1>>2] = $44;
 if (!($$sroa$039$0)) {
  _free($45);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,15421,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 if ($26) {
  $27 = (__ZNSt3__26__clocEv()|0);
  if ($20) {
   $28 = ((($2)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer5)|0);
   $$1 = $30;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $31 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$27,$5,$vararg_buffer9)|0);
   $$1 = $31;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$2 = $$1;$$sroa$046$0 = $32;$35 = $32;
  }
 } else {
  $$pre = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$35 = $$pre;
 }
 $34 = (($35) + ($$2)|0);
 $36 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($35,$34,$2)|0);
 $37 = ($35|0)==($6|0);
 do {
  if ($37) {
   $$037 = $8;$$sroa$039$0 = 1;$45 = 0;
  } else {
   $38 = $$2 << 3;
   $39 = (_malloc($38)|0);
   $40 = ($39|0)==(0|0);
   if ($40) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$037 = $39;$$sroa$039$0 = 0;$45 = $39;
    break;
   }
  }
 } while(0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($35,$36,$34,$$037,$9,$10,$11);
 __ZNSt3__26localeD2Ev($11);
 $41 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $44 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$42,$43,$2,$3)|0);
 HEAP32[$1>>2] = $44;
 if (!($$sroa$039$0)) {
  _free($45);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($44|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $5 = sp + 184|0;
 $6 = sp + 164|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15415>>0]|0;HEAP8[$5+1>>0]=HEAP8[15415+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15415+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15415+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15415+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15415+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20588)|0);
 __ZNSt3__26localeD2Ev($8);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 511]($14,$6,$12,$7)|0);
 $18 = (($7) + ($11<<2)|0);
 $19 = ($13|0)==($12|0);
 $20 = $6;
 $21 = $13;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22<<2)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$038 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 12|0;
 $7 = sp;
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(0|0);
 L1: do {
  if ($9) {
   $$sroa$0$2 = 0;
  } else {
   $10 = $3;
   $11 = $1;
   $12 = (($10) - ($11))|0;
   $13 = $12 >> 2;
   $14 = ((($4)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>($13|0);
   $17 = (($15) - ($13))|0;
   $$038 = $16 ? $17 : 0;
   $18 = $2;
   $19 = (($18) - ($11))|0;
   $20 = $19 >> 2;
   $21 = ($19|0)>(0);
   if ($21) {
    $22 = HEAP32[$8>>2]|0;
    $23 = ((($22)) + 48|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_iiii[$24 & 511]($8,$1,$20)|0);
    $26 = ($25|0)==($20|0);
    if (!($26)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $27 = ($$038|0)>(0);
   do {
    if ($27) {
     ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     $28 = ($$038>>>0)>(1073741807);
     if ($28) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($7);
      // unreachable;
     }
     $29 = ($$038>>>0)<(2);
     do {
      if ($29) {
       $30 = $$038&255;
       $31 = ((($7)) + 8|0);
       $32 = ((($31)) + 3|0);
       HEAP8[$32>>0] = $30;
       $$0$i$i = $7;$$pre$phi41Z2D = $32;$$pre$phi43Z2D = $7;
      } else {
       $33 = (($$038) + 4)|0;
       $34 = $33 & -4;
       $35 = ($34>>>0)>(1073741823);
       if ($35) {
        _abort();
        // unreachable;
       } else {
        $36 = $34 << 2;
        $37 = (__Znwj($36)|0);
        HEAP32[$7>>2] = $37;
        $38 = $34 | -2147483648;
        $39 = ((($7)) + 8|0);
        HEAP32[$39>>2] = $38;
        $40 = ((($7)) + 4|0);
        HEAP32[$40>>2] = $$038;
        $$pre40 = ((($39)) + 3|0);
        $$0$i$i = $37;$$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $7;
        break;
       }
      }
     } while(0);
     (__ZNSt3__211char_traitsIwE6assignEPwjw($$0$i$i,$$038,$5)|0);
     $41 = (($$0$i$i) + ($$038<<2)|0);
     HEAP32[$6>>2] = 0;
     __ZNSt3__211char_traitsIwE6assignERwRKw($41,$6);
     $42 = HEAP8[$$pre$phi41Z2D>>0]|0;
     $43 = ($42<<24>>24)<(0);
     $44 = HEAP32[$7>>2]|0;
     $45 = $43 ? $44 : $$pre$phi43Z2D;
     $46 = HEAP32[$8>>2]|0;
     $47 = ((($46)) + 48|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (FUNCTION_TABLE_iiii[$48 & 511]($8,$45,$$038)|0);
     $50 = ($49|0)==($$038|0);
     if ($50) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $51 = (($10) - ($18))|0;
   $52 = $51 >> 2;
   $53 = ($51|0)>(0);
   if ($53) {
    $54 = HEAP32[$8>>2]|0;
    $55 = ((($54)) + 48|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (FUNCTION_TABLE_iiii[$56 & 511]($8,$2,$52)|0);
    $58 = ($57|0)==($52|0);
    if (!($58)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$14>>2] = 0;
   $$sroa$0$2 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0101 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i110 = 0, $$0101 = 0, $$0102 = 0, $$0104 = 0, $$0106 = 0, $$07$i$i = 0, $$07$i$i109 = 0, $$1 = 0, $$1103 = 0, $$1105 = 0, $$1107 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20596)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 511]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 4|0);
  HEAP32[$5>>2] = $20;
  HEAP32[$19>>2] = $18;
  $$0104 = $14;
  break;
 }
 default: {
  $$0104 = $0;
 }
 }
 $21 = $2;
 $22 = $$0104;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0104>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0104)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     $$1107 = $$0104;
     label = 10;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 511]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$5>>2] = $34;
    HEAP32[$33>>2] = $32;
    $35 = ((($$0104)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$5>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$0106 = $35;
    while(1) {
     $43 = ($$0106>>>0)<($2>>>0);
     if (!($43)) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $44 = HEAP8[$$0106>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $49 = ((($$0106)) + 1|0);
     $$0106 = $49;
    }
   } else {
    $$1107 = $$0104;
    label = 10;
   }
  } else {
   $$1107 = $$0104;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $50 = ($$1107>>>0)<($2>>>0);
    if (!($50)) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $51 = HEAP8[$$1107>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $56 = ((($$1107)) + 1|0);
    $$1107 = $56;
    label = 10;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L18: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 48|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 511]($8,$$1105,$$2108,$65)|0);
   $69 = $$2108;
   $70 = $$1105;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71<<2)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;$154 = $73;
  } else {
   $74 = ($$1105|0)==($$2108|0);
   L21: do {
    if (!($74)) {
     $$0$i$i = $$2108;$$07$i$i = $$1105;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L21;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 511]($9)|0);
   $$0 = $$1105;$$0101 = 0;$$0102 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2108>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$0101)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0102|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 4|0);
     HEAP32[$5>>2] = $106;
     HEAP32[$105>>2] = $83;
     $107 = HEAP8[$57>>0]|0;
     $108 = ($107<<24>>24)<(0);
     $109 = HEAP32[$60>>2]|0;
     $110 = $107&255;
     $111 = $108 ? $109 : $110;
     $112 = (($111) + -1)|0;
     $113 = ($$0101>>>0)<($112>>>0);
     $114 = $113&1;
     $$$0101 = (($$0101) + ($114))|0;
     $$1 = $$$0101;$$1103 = 0;
    } else {
     $$1 = $$0101;$$1103 = $$0102;
    }
    $115 = HEAP8[$$0>>0]|0;
    $116 = HEAP32[$8>>2]|0;
    $117 = ((($116)) + 44|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (FUNCTION_TABLE_iii[$118 & 511]($8,$115)|0);
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 4|0);
    HEAP32[$5>>2] = $121;
    HEAP32[$120>>2] = $119;
    $122 = (($$1103) + 1)|0;
    $123 = ((($$0)) + 1|0);
    $$0 = $123;$$0101 = $$1;$$0102 = $122;
   }
   $85 = $$1105;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87<<2)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;$154 = $88;
   } else {
    $$0$i$i110 = $89;$$07$i$i109 = $88;
    while(1) {
     $91 = ((($$0$i$i110)) + -4|0);
     $92 = ($$07$i$i109>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;$154 = $89;
      break L18;
     }
     $93 = HEAP32[$$07$i$i109>>2]|0;
     $94 = HEAP32[$91>>2]|0;
     HEAP32[$$07$i$i109>>2] = $94;
     HEAP32[$91>>2] = $93;
     $95 = ((($$07$i$i109)) + 4|0);
     $$0$i$i110 = $91;$$07$i$i109 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2108;$155 = $154;
 while(1) {
  $124 = ($$2>>>0)<($2>>>0);
  if (!($124)) {
   $$3 = $$2;$144 = $155;
   break;
  }
  $125 = HEAP8[$$2>>0]|0;
  $126 = ($125<<24>>24)==(46);
  if ($126) {
   label = 29;
   break;
  }
  $134 = HEAP32[$$pre$phiZ2D>>2]|0;
  $135 = ((($134)) + 44|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iii[$136 & 511]($8,$125)|0);
  $138 = HEAP32[$5>>2]|0;
  $139 = ((($138)) + 4|0);
  HEAP32[$5>>2] = $139;
  HEAP32[$138>>2] = $137;
  $140 = ((($$2)) + 1|0);
  $$2 = $140;$155 = $139;
 }
 if ((label|0) == 29) {
  $127 = HEAP32[$9>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 511]($9)|0);
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 4|0);
  HEAP32[$5>>2] = $132;
  HEAP32[$131>>2] = $130;
  $133 = ((($$2)) + 1|0);
  $$3 = $133;$144 = $132;
 }
 $141 = HEAP32[$8>>2]|0;
 $142 = ((($141)) + 48|0);
 $143 = HEAP32[$142>>2]|0;
 (FUNCTION_TABLE_iiiii[$143 & 511]($8,$$3,$2,$144)|0);
 $145 = $$3;
 $146 = (($21) - ($145))|0;
 $147 = HEAP32[$5>>2]|0;
 $148 = (($147) + ($146<<2)|0);
 HEAP32[$5>>2] = $148;
 $149 = ($1|0)==($2|0);
 $150 = $1;
 $151 = $0;
 $152 = (($150) - ($151))|0;
 $153 = (($3) + ($152<<2)|0);
 $storemerge = $149 ? $148 : $153;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$072 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i78 = 0, $$07$i$i = 0, $$07$i$i77 = 0, $$072 = 0, $$073 = 0, $$075 = 0, $$1 = 0, $$174 = 0, $$176 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20596)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 511]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiiii[$23 & 511]($8,$0,$2,$3)|0);
  $24 = $2;
  $25 = $0;
  $26 = (($24) - ($25))|0;
  $27 = (($3) + ($26<<2)|0);
  HEAP32[$5>>2] = $27;
  $$pre$phiZ2D = $25;$112 = $27;
 } else {
  HEAP32[$5>>2] = $3;
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 43: case 45:  {
   $29 = ((($0)) + 1|0);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 511]($8,$28)|0);
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 4|0);
   HEAP32[$5>>2] = $35;
   HEAP32[$34>>2] = $33;
   $$075 = $29;
   break;
  }
  default: {
   $$075 = $0;
  }
  }
  $36 = $2;
  $37 = $$075;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(1);
  L7: do {
   if ($39) {
    $40 = HEAP8[$$075>>0]|0;
    $41 = ($40<<24>>24)==(48);
    if ($41) {
     $42 = ((($$075)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     switch ($43<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $$176 = $$075;
      break L7;
     }
     }
     $44 = HEAP32[$8>>2]|0;
     $45 = ((($44)) + 44|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 511]($8,48)|0);
     $48 = HEAP32[$5>>2]|0;
     $49 = ((($48)) + 4|0);
     HEAP32[$5>>2] = $49;
     HEAP32[$48>>2] = $47;
     $50 = ((($$075)) + 2|0);
     $51 = HEAP8[$42>>0]|0;
     $52 = HEAP32[$8>>2]|0;
     $53 = ((($52)) + 44|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iii[$54 & 511]($8,$51)|0);
     $56 = HEAP32[$5>>2]|0;
     $57 = ((($56)) + 4|0);
     HEAP32[$5>>2] = $57;
     HEAP32[$56>>2] = $55;
     $$176 = $50;
    } else {
     $$176 = $$075;
    }
   } else {
    $$176 = $$075;
   }
  } while(0);
  $58 = ($$176|0)==($2|0);
  L12: do {
   if (!($58)) {
    $$0$i$i = $2;$$07$i$i = $$176;
    while(1) {
     $59 = ((($$0$i$i)) + -1|0);
     $60 = ($$07$i$i>>>0)<($59>>>0);
     if (!($60)) {
      break L12;
     }
     $61 = HEAP8[$$07$i$i>>0]|0;
     $62 = HEAP8[$59>>0]|0;
     HEAP8[$$07$i$i>>0] = $62;
     HEAP8[$59>>0] = $61;
     $63 = ((($$07$i$i)) + 1|0);
     $$0$i$i = $59;$$07$i$i = $63;
    }
   }
  } while(0);
  $64 = HEAP32[$9>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 511]($9)|0);
  $$0 = $$176;$$072 = 0;$$073 = 0;
  while(1) {
   $68 = ($$0>>>0)<($2>>>0);
   if (!($68)) {
    break;
   }
   $80 = HEAP8[$13>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = HEAP32[$7>>2]|0;
   $83 = $81 ? $82 : $7;
   $84 = (($83) + ($$072)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   $87 = $85 << 24 >> 24;
   $88 = ($$073|0)==($87|0);
   $or$cond = $86 & $88;
   if ($or$cond) {
    $89 = HEAP32[$5>>2]|0;
    $90 = ((($89)) + 4|0);
    HEAP32[$5>>2] = $90;
    HEAP32[$89>>2] = $67;
    $91 = HEAP8[$13>>0]|0;
    $92 = ($91<<24>>24)<(0);
    $93 = HEAP32[$16>>2]|0;
    $94 = $91&255;
    $95 = $92 ? $93 : $94;
    $96 = (($95) + -1)|0;
    $97 = ($$072>>>0)<($96>>>0);
    $98 = $97&1;
    $$$072 = (($$072) + ($98))|0;
    $$1 = $$$072;$$174 = 0;
   } else {
    $$1 = $$072;$$174 = $$073;
   }
   $99 = HEAP8[$$0>>0]|0;
   $100 = HEAP32[$8>>2]|0;
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iii[$102 & 511]($8,$99)|0);
   $104 = HEAP32[$5>>2]|0;
   $105 = ((($104)) + 4|0);
   HEAP32[$5>>2] = $105;
   HEAP32[$104>>2] = $103;
   $106 = (($$174) + 1)|0;
   $107 = ((($$0)) + 1|0);
   $$0 = $107;$$072 = $$1;$$073 = $106;
  }
  $69 = $$176;
  $70 = $0;
  $71 = (($69) - ($70))|0;
  $72 = (($3) + ($71<<2)|0);
  $73 = HEAP32[$5>>2]|0;
  $74 = ($72|0)==($73|0);
  if ($74) {
   $$pre$phiZ2D = $70;$112 = $72;
  } else {
   $$0$i$i78 = $73;$$07$i$i77 = $72;
   while(1) {
    $75 = ((($$0$i$i78)) + -4|0);
    $76 = ($$07$i$i77>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = HEAP32[$$07$i$i77>>2]|0;
    $78 = HEAP32[$75>>2]|0;
    HEAP32[$$07$i$i77>>2] = $78;
    HEAP32[$75>>2] = $77;
    $79 = ((($$07$i$i77)) + 4|0);
    $$0$i$i78 = $75;$$07$i$i77 = $79;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre$phiZ2D = $70;$112 = $$pre;
  }
 }
 $108 = ($1|0)==($2|0);
 $109 = $1;
 $110 = (($109) - ($$pre$phiZ2D))|0;
 $111 = (($3) + ($110<<2)|0);
 $storemerge = $108 ? $112 : $111;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,15951,(15959))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = ((($12)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $16&255;
 $22 = $17 ? $18 : $12;
 $23 = $17 ? $20 : $21;
 $24 = (($22) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$22,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20556)|0);
 __ZNSt3__26localeD2Ev($8);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $43;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$42,$1,$$byval_copy,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $45;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 511]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $52;
   $53 = ((($50)) + 11|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)<(0);
   $56 = HEAP32[$50>>2]|0;
   $57 = ((($50)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $54&255;
   $60 = $55 ? $56 : $50;
   $61 = $55 ? $58 : $59;
   $62 = (($60) + ($61)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $63 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$60,$62)|0);
   HEAP32[$1>>2] = $63;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $64 = ((($5)) + 12|0);
   $65 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$64,$1,$$byval_copy4,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $66 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $66;
   $67 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $68 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,15911,(15919))|0);
   HEAP32[$1>>2] = $68;
   label = 26;
   break;
  }
  case 70:  {
   $69 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $69;
   $70 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $71 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,15919,(15927))|0);
   HEAP32[$1>>2] = $71;
   label = 26;
   break;
  }
  case 72:  {
   $72 = ((($5)) + 8|0);
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$72,$1,$$byval_copy9,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $74 = ((($5)) + 8|0);
   $75 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$74,$1,$$byval_copy10,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $76 = ((($5)) + 28|0);
   $77 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$76,$1,$$byval_copy11,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $78 = ((($5)) + 16|0);
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$78,$1,$$byval_copy12,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $80 = ((($5)) + 4|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$80,$1,$$byval_copy13,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy14,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $83 = ((($5)) + 8|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy15,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $85 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $85;
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $87 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,15927,(15938))|0);
   HEAP32[$1>>2] = $87;
   label = 26;
   break;
  }
  case 82:  {
   $88 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $88;
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $90 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,15938,(15943))|0);
   HEAP32[$1>>2] = $90;
   label = 26;
   break;
  }
  case 83:  {
   $91 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $92 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $92;
   $93 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $94 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,15943,(15951))|0);
   HEAP32[$1>>2] = $94;
   label = 26;
   break;
  }
  case 119:  {
   $95 = ((($5)) + 24|0);
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$95,$1,$$byval_copy23,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $97 = HEAP32[$0>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $100;
   $101 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 255]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$095$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($0)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 511]($103)|0);
   $108 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $108;
   $109 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $109;
   $110 = ((($107)) + 11|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = ($111<<24>>24)<(0);
   $113 = HEAP32[$107>>2]|0;
   $114 = ((($107)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $111&255;
   $117 = $112 ? $113 : $107;
   $118 = $112 ? $115 : $116;
   $119 = (($117) + ($118)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $120 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$117,$119)|0);
   HEAP32[$1>>2] = $120;
   label = 26;
   break;
  }
  case 121:  {
   $121 = ((($5)) + 20|0);
   $122 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $122;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$121,$1,$$byval_copy28,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $124;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$123,$1,$$byval_copy29,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $125 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $125;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $126 = HEAP32[$4>>2]|0;
   $127 = $126 | 4;
   HEAP32[$4>>2] = $127;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18240]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18240)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L10init_weeksEv();
   HEAP32[5357] = 21260;
  }
 }
 $5 = HEAP32[5357]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18224]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18224)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_monthsEv();
   HEAP32[5314] = 20968;
  }
 }
 $5 = HEAP32[5314]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18208]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18208)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L10init_am_pmEv();
   HEAP32[5241] = 20676;
  }
 }
 $5 = HEAP32[5241]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18200]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18200)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[20664>>2]=0|0;HEAP32[20664+4>>2]=0|0;HEAP32[20664+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15669)|0);
   $7 = ($6>>>0)>(4294967279);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(20664);
    // unreachable;
   }
   $8 = ($6>>>0)<(11);
   if ($8) {
    $9 = $6&255;
    HEAP8[(20675)>>0] = $9;
    $$0$i$i = 20664;
   } else {
    $10 = (($6) + 16)|0;
    $11 = $10 & -16;
    $12 = (__Znwj($11)|0);
    HEAP32[5166] = $12;
    $13 = $11 | -2147483648;
    HEAP32[(20672)>>2] = $13;
    HEAP32[(20668)>>2] = $6;
    $$0$i$i = $12;
   }
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,15669,$6)|0);
   $14 = (($$0$i$i) + ($6)|0);
   HEAP8[$1>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$1);
  }
 }
 STACKTOP = sp;return (20664|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18192]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18192)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[20652>>2]=0|0;HEAP32[20652+4>>2]=0|0;HEAP32[20652+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15657)|0);
   $7 = ($6>>>0)>(4294967279);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(20652);
    // unreachable;
   }
   $8 = ($6>>>0)<(11);
   if ($8) {
    $9 = $6&255;
    HEAP8[(20663)>>0] = $9;
    $$0$i$i = 20652;
   } else {
    $10 = (($6) + 16)|0;
    $11 = $10 & -16;
    $12 = (__Znwj($11)|0);
    HEAP32[5163] = $12;
    $13 = $11 | -2147483648;
    HEAP32[(20660)>>2] = $13;
    HEAP32[(20656)>>2] = $6;
    $$0$i$i = $12;
   }
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,15657,$6)|0);
   $14 = (($$0$i$i) + ($6)|0);
   HEAP8[$1>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$1);
  }
 }
 STACKTOP = sp;return (20652|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18184]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18184)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[20640>>2]=0|0;HEAP32[20640+4>>2]=0|0;HEAP32[20640+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15648)|0);
   $7 = ($6>>>0)>(4294967279);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(20640);
    // unreachable;
   }
   $8 = ($6>>>0)<(11);
   if ($8) {
    $9 = $6&255;
    HEAP8[(20651)>>0] = $9;
    $$0$i$i = 20640;
   } else {
    $10 = (($6) + 16)|0;
    $11 = $10 & -16;
    $12 = (__Znwj($11)|0);
    HEAP32[5160] = $12;
    $13 = $11 | -2147483648;
    HEAP32[(20648)>>2] = $13;
    HEAP32[(20644)>>2] = $6;
    $$0$i$i = $12;
   }
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,15648,$6)|0);
   $14 = (($$0$i$i) + ($6)|0);
   HEAP8[$1>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$1);
  }
 }
 STACKTOP = sp;return (20640|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18176]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18176)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[20628>>2]=0|0;HEAP32[20628+4>>2]=0|0;HEAP32[20628+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15639)|0);
   $7 = ($6>>>0)>(4294967279);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(20628);
    // unreachable;
   }
   $8 = ($6>>>0)<(11);
   if ($8) {
    $9 = $6&255;
    HEAP8[(20639)>>0] = $9;
    $$0$i$i = 20628;
   } else {
    $10 = (($6) + 16)|0;
    $11 = $10 & -16;
    $12 = (__Znwj($11)|0);
    HEAP32[5157] = $12;
    $13 = $11 | -2147483648;
    HEAP32[(20636)>>2] = $13;
    HEAP32[(20632)>>2] = $6;
    $$0$i$i = $12;
   }
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,15639,$6)|0);
   $14 = (($$0$i$i) + ($6)|0);
   HEAP8[$1>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$1);
  }
 }
 STACKTOP = sp;return (20628|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18216]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18216)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 20676;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((20964)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20676,15690)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20688),15693)|0);
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18232]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18232)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 20968;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21256)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20968,15696)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20980),15704)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20992),15713)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21004),15719)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21016),15725)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21028),15729)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21040),15734)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21052),15739)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21064),15746)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21076),15756)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21088),15764)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21100),15773)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21112),15782)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21124),15786)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21136),15790)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21148),15794)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21160),15725)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21172),15798)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21184),15802)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21196),15806)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21208),15810)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21220),15814)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21232),15818)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21244),15822)|0);
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18248]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18248)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21260;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21428)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(21260,15826)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21272),15833)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21284),15840)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21296),15848)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21308),15858)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21320),15867)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21332),15874)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21344),15883)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21356),15887)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21368),15891)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21380),15895)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21392),15899)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21404),15903)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21416),15907)|0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i53 = 0, $$0$i$i$i$i68 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i59 = 0, $$0$i$i2$i$i74 = 0, $$0$i$i65 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i55 = 0;
 var $$pre$i$i$i70 = 0, $$pre$i4$i$i61 = 0, $$pre$i4$i$i6192 = 0, $$pre$i4$i$i6193 = 0, $$pre$pre = 0, $$sroa$047$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp$i5$i$i62 = 0, $sext = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20556)|0);
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $12 = ((($11)) + 8|0);
 $$0$ph = $6;$$pre = 0;
 L1: while(1) {
  $13 = ($$0$ph|0)!=($7|0);
  $14 = $$pre;
  while(1) {
   $15 = ($14|0)==(0);
   $or$cond = $13 & $15;
   $16 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i70 = $16;
    break L1;
   }
   $17 = ($16|0)==(0|0);
   $18 = $16;
   if ($17) {
    $152 = 0;$214 = 1;$71 = $18;
   } else {
    $19 = ((($16)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($16)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)==($22|0);
    if ($23) {
     $24 = HEAP32[$16>>2]|0;
     $25 = ((($24)) + 36|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_ii[$26 & 511]($16)|0);
     $$0$i$i$i$i = $27;
    } else {
     $28 = HEAP8[$20>>0]|0;
     $29 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($28)|0);
     $$0$i$i$i$i = $29;
    }
    $30 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $31 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$30)|0);
    if ($31) {
     HEAP32[$1>>2] = 0;
     $152 = 0;$214 = 1;$71 = 0;
    } else {
     $152 = $16;$214 = 0;$71 = $18;
    }
   }
   $32 = HEAP32[$2>>2]|0;
   $33 = ($32|0)==(0|0);
   $34 = $32;
   do {
    if ($33) {
     $$ph = $34;
     label = 16;
    } else {
     $35 = ((($32)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($32)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)==($38|0);
     if ($39) {
      $40 = HEAP32[$32>>2]|0;
      $41 = ((($40)) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_ii[$42 & 511]($32)|0);
      $$0$i$i2$i$i = $43;
     } else {
      $44 = HEAP8[$36>>0]|0;
      $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
      $$0$i$i2$i$i = $45;
     }
     $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$46)|0);
     if ($47) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 16;
      break;
     } else {
      if ($214) {
       $215 = $32;$72 = $34;
       break;
      } else {
       label = 62;
       break L1;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    if ($214) {
     label = 62;
     break L1;
    } else {
     $215 = 0;$72 = $$ph;
    }
   }
   $48 = HEAP8[$$0$ph>>0]|0;
   $49 = HEAP32[$11>>2]|0;
   $50 = ((($49)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 511]($11,$48,0)|0);
   $53 = ($52<<24>>24)==(37);
   if ($53) {
    label = 19;
    break;
   }
   $76 = HEAP8[$$0$ph>>0]|0;
   $77 = ($76<<24>>24)>(-1);
   if ($77) {
    $78 = $76 << 24 >> 24;
    $79 = HEAP32[$12>>2]|0;
    $80 = (($79) + ($78<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81 & 8192;
    $83 = ($82<<16>>16)==(0);
    if (!($83)) {
     $$0$pn = $$0$ph;
     label = 26;
     break;
    }
   }
   $151 = ((($152)) + 12|0);
   $153 = HEAP32[$151>>2]|0;
   $154 = ((($152)) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($153|0)==($155|0);
   if ($156) {
    $157 = HEAP32[$152>>2]|0;
    $158 = ((($157)) + 36|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (FUNCTION_TABLE_ii[$159 & 511]($152)|0);
    $$0$i$i65 = $160;
   } else {
    $161 = HEAP8[$153>>0]|0;
    $162 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($161)|0);
    $$0$i$i65 = $162;
   }
   $163 = $$0$i$i65&255;
   $164 = HEAP32[$11>>2]|0;
   $165 = ((($164)) + 12|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (FUNCTION_TABLE_iii[$166 & 511]($11,$163)|0);
   $168 = HEAP8[$$0$ph>>0]|0;
   $169 = HEAP32[$11>>2]|0;
   $170 = ((($169)) + 12|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (FUNCTION_TABLE_iii[$171 & 511]($11,$168)|0);
   $173 = ($167<<24>>24)==($172<<24>>24);
   if ($173) {
    label = 56;
    break;
   }
   HEAP32[$4>>2] = 4;
   $14 = 4;
  }
  L35: do {
   if ((label|0) == 19) {
    label = 0;
    $54 = ((($$0$ph)) + 1|0);
    $55 = ($54|0)==($7|0);
    if ($55) {
     label = 62;
     break L1;
    }
    $56 = HEAP8[$54>>0]|0;
    $57 = HEAP32[$11>>2]|0;
    $58 = ((($57)) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_iiii[$59 & 511]($11,$56,0)|0);
    switch ($60<<24>>24) {
    case 48: case 69:  {
     $61 = ((($$0$ph)) + 2|0);
     $62 = ($61|0)==($7|0);
     if ($62) {
      label = 62;
      break L1;
     }
     $63 = HEAP8[$61>>0]|0;
     $64 = HEAP32[$11>>2]|0;
     $65 = ((($64)) + 36|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (FUNCTION_TABLE_iiii[$66 & 511]($11,$63,0)|0);
     $$049 = $60;$$050 = $67;$75 = $54;
     break;
    }
    default: {
     $$049 = 0;$$050 = $60;$75 = $$0$ph;
    }
    }
    $68 = HEAP32[$0>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$9>>2] = $71;
    HEAP32[$10>>2] = $72;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $73 = (FUNCTION_TABLE_iiiiiiiii[$70 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $73;
    $74 = ((($75)) + 2|0);
    $$0$ph$be = $74;
   }
   else if ((label|0) == 26) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 1|0);
     $84 = ($$3|0)==($7|0);
     if ($84) {
      $$3$lcssa = $7;
      break;
     }
     $85 = HEAP8[$$3>>0]|0;
     $86 = ($85<<24>>24)>(-1);
     if (!($86)) {
      $$3$lcssa = $$3;
      break;
     }
     $87 = $85 << 24 >> 24;
     $88 = (($79) + ($87<<1)|0);
     $89 = HEAP16[$88>>1]|0;
     $90 = $89 & 8192;
     $91 = ($90<<16>>16)==(0);
     if ($91) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
      label = 26;
     }
    }
    $$pre$i$i$i55 = $152;$$pre$i4$i$i61 = $215;$106 = $215;
    while(1) {
     $92 = ($$pre$i$i$i55|0)==(0|0);
     if ($92) {
      $122 = 1;$124 = 0;
     } else {
      $93 = ((($$pre$i$i$i55)) + 12|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ((($$pre$i$i$i55)) + 16|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($94|0)==($96|0);
      if ($97) {
       $98 = HEAP32[$$pre$i$i$i55>>2]|0;
       $99 = ((($98)) + 36|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i55)|0);
       $$0$i$i$i$i53 = $101;
      } else {
       $102 = HEAP8[$94>>0]|0;
       $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
       $$0$i$i$i$i53 = $103;
      }
      $104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i53,$104)|0);
      if ($105) {
       HEAP32[$1>>2] = 0;
       $122 = 1;$124 = 0;
      } else {
       $122 = 0;$124 = $$pre$i$i$i55;
      }
     }
     $107 = ($106|0)==(0|0);
     do {
      if ($107) {
       $$pre$i4$i$i6193 = $$pre$i4$i$i61;
       label = 42;
      } else {
       $108 = ((($106)) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ((($106)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$106>>2]|0;
        $114 = ((($113)) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 511]($106)|0);
        $$0$i$i2$i$i59 = $116;
       } else {
        $117 = HEAP8[$109>>0]|0;
        $118 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($117)|0);
        $$0$i$i2$i$i59 = $118;
       }
       $119 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $120 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i59,$119)|0);
       if ($120) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i6193 = 0;
        label = 42;
        break;
       } else {
        $phitmp$i5$i$i62 = ($$pre$i4$i$i61|0)==(0|0);
        $121 = $122 ^ $phitmp$i5$i$i62;
        if ($121) {
         $$pre$i4$i$i6192 = $$pre$i4$i$i61;$216 = $$pre$i4$i$i61;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L35;
        }
       }
      }
     } while(0);
     if ((label|0) == 42) {
      label = 0;
      if ($122) {
       $$0$ph$be = $$3$lcssa;
       break L35;
      } else {
       $$pre$i4$i$i6192 = $$pre$i4$i$i6193;$216 = 0;
      }
     }
     $123 = ((($124)) + 12|0);
     $125 = HEAP32[$123>>2]|0;
     $126 = ((($124)) + 16|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($125|0)==($127|0);
     if ($128) {
      $129 = HEAP32[$124>>2]|0;
      $130 = ((($129)) + 36|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (FUNCTION_TABLE_ii[$131 & 511]($124)|0);
      $$0$i$i = $132;
     } else {
      $133 = HEAP8[$125>>0]|0;
      $134 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($133)|0);
      $$0$i$i = $134;
     }
     $135 = $$0$i$i&255;
     $136 = ($135<<24>>24)>(-1);
     if (!($136)) {
      $$0$ph$be = $$3$lcssa;
      break L35;
     }
     $sext = $$0$i$i << 24;
     $137 = $sext >> 24;
     $138 = HEAP32[$12>>2]|0;
     $139 = (($138) + ($137<<1)|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140 & 8192;
     $142 = ($141<<16>>16)==(0);
     if ($142) {
      $$0$ph$be = $$3$lcssa;
      break L35;
     }
     $143 = HEAP32[$123>>2]|0;
     $144 = HEAP32[$126>>2]|0;
     $145 = ($143|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$124>>2]|0;
      $147 = ((($146)) + 40|0);
      $148 = HEAP32[$147>>2]|0;
      (FUNCTION_TABLE_ii[$148 & 511]($124)|0);
      $$pre$i$i$i55 = $124;$$pre$i4$i$i61 = $$pre$i4$i$i6192;$106 = $216;
      continue;
     } else {
      $149 = ((($143)) + 1|0);
      HEAP32[$123>>2] = $149;
      $150 = HEAP8[$143>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($150)|0);
      $$pre$i$i$i55 = $124;$$pre$i4$i$i61 = $$pre$i4$i$i6192;$106 = $216;
      continue;
     }
    }
   }
   else if ((label|0) == 56) {
    label = 0;
    $174 = HEAP32[$151>>2]|0;
    $175 = HEAP32[$154>>2]|0;
    $176 = ($174|0)==($175|0);
    if ($176) {
     $177 = HEAP32[$152>>2]|0;
     $178 = ((($177)) + 40|0);
     $179 = HEAP32[$178>>2]|0;
     (FUNCTION_TABLE_ii[$179 & 511]($152)|0);
    } else {
     $180 = ((($174)) + 1|0);
     HEAP32[$151>>2] = $180;
     $181 = HEAP8[$174>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($181)|0);
    }
    $182 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $182;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 62) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i70 = $152;
 }
 $183 = ($$pre$i$i$i70|0)==(0|0);
 if ($183) {
  $$sroa$047$0$copyload = 0;$217 = 1;
 } else {
  $184 = ((($$pre$i$i$i70)) + 12|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($$pre$i$i$i70)) + 16|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($185|0)==($187|0);
  if ($188) {
   $189 = HEAP32[$$pre$i$i$i70>>2]|0;
   $190 = ((($189)) + 36|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (FUNCTION_TABLE_ii[$191 & 511]($$pre$i$i$i70)|0);
   $$0$i$i$i$i68 = $192;
  } else {
   $193 = HEAP8[$185>>0]|0;
   $194 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($193)|0);
   $$0$i$i$i$i68 = $194;
  }
  $195 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $196 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i68,$195)|0);
  if ($196) {
   HEAP32[$1>>2] = 0;
   $$sroa$047$0$copyload = 0;$217 = 1;
  } else {
   $$sroa$047$0$copyload = $$pre$i$i$i70;$217 = 0;
  }
 }
 $197 = HEAP32[$2>>2]|0;
 $198 = ($197|0)==(0|0);
 do {
  if ($198) {
   label = 75;
  } else {
   $199 = ((($197)) + 12|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($197)) + 16|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($200|0)==($202|0);
   if ($203) {
    $204 = HEAP32[$197>>2]|0;
    $205 = ((($204)) + 36|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = (FUNCTION_TABLE_ii[$206 & 511]($197)|0);
    $$0$i$i2$i$i74 = $207;
   } else {
    $208 = HEAP8[$200>>0]|0;
    $209 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($208)|0);
    $$0$i$i2$i$i74 = $209;
   }
   $210 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $211 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i74,$210)|0);
   if ($211) {
    HEAP32[$2>>2] = 0;
    label = 75;
    break;
   } else {
    if ($217) {
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 75) {
  if ($217) {
   label = 77;
  }
 }
 if ((label|0) == 77) {
  $212 = HEAP32[$4>>2]|0;
  $213 = $212 | 2;
  HEAP32[$4>>2] = $213;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $98 = 1;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 511]($6)|0);
     $$0$i$i$i$i = $16;
    } else {
     $17 = HEAP8[$9>>0]|0;
     $18 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
     $$0$i$i$i$i = $18;
    }
    $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $20 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$19)|0);
    if ($20) {
     HEAP32[$1>>2] = 0;
     $98 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $98 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    label = 15;
   } else {
    $23 = ((($21)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = ((($28)) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 511]($21)|0);
     $$0$i$i2$i$i = $31;
    } else {
     $32 = HEAP8[$24>>0]|0;
     $33 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
     $$0$i$i2$i$i = $33;
    }
    $34 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $35 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$34)|0);
    if ($35) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($98) {
      $99 = $21;
      break;
     } else {
      $$pre$i4$i$i15 = $21;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($98) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $99 = 0;
   }
  }
  $36 = HEAP32[$1>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($36)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = HEAP32[$36>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_ii[$44 & 511]($36)|0);
   $$0$i$i = $45;
  } else {
   $46 = HEAP8[$38>>0]|0;
   $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
   $$0$i$i = $47;
  }
  $48 = $$0$i$i&255;
  $49 = ($48<<24>>24)>(-1);
  if (!($49)) {
   $$pre$i4$i$i15 = $99;
   break;
  }
  $sext = $$0$i$i << 24;
  $50 = $sext >> 24;
  $51 = HEAP32[$5>>2]|0;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 & 8192;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   $$pre$i4$i$i15 = $99;
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($56)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($58|0)==($60|0);
  if ($61) {
   $62 = HEAP32[$56>>2]|0;
   $63 = ((($62)) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   (FUNCTION_TABLE_ii[$64 & 511]($56)|0);
   continue;
  } else {
   $65 = ((($58)) + 1|0);
   HEAP32[$57>>2] = $65;
   $66 = HEAP8[$58>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
   continue;
  }
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ($67|0)==(0|0);
 do {
  if ($68) {
   $100 = 1;
  } else {
   $69 = ((($67)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($67)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$67>>2]|0;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (FUNCTION_TABLE_ii[$76 & 511]($67)|0);
    $$0$i$i$i$i7 = $77;
   } else {
    $78 = HEAP8[$70>>0]|0;
    $79 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($78)|0);
    $$0$i$i$i$i7 = $79;
   }
   $80 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $81 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7,$80)|0);
   if ($81) {
    HEAP32[$1>>2] = 0;
    $100 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $100 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $82 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($82) {
   label = 38;
  } else {
   $83 = ((($$pre$i4$i$i15)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($$pre$i4$i$i15)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($84|0)==($86|0);
   if ($87) {
    $88 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $89 = ((($88)) + 36|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (FUNCTION_TABLE_ii[$90 & 511]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $91;
   } else {
    $92 = HEAP8[$84>>0]|0;
    $93 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($92)|0);
    $$0$i$i2$i$i13 = $93;
   }
   $94 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $95 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13,$94)|0);
   if ($95) {
    HEAP32[$2>>2] = 0;
    label = 38;
    break;
   } else {
    if ($100) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($100) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $96 = HEAP32[$3>>2]|0;
  $97 = $96 | 2;
  HEAP32[$3>>2] = $97;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $27 = $16;
 } else {
  $17 = $13&255;
  $27 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $28 = ($27|0)==($25|0);
 do {
  if ($28) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i4$i$i1923 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $95 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 511]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $95 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $95 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 511]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($95) {
     $$pre$i4$i$i1923 = $20;
     label = 16;
     break;
    } else {
     $$sink3 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($95) {
   $$sink3 = 6;
   label = 38;
  } else {
   $$pre$i4$i$i1923 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$1>>2]|0;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 511]($35)|0);
    $$0$i$i = $44;
   } else {
    $45 = HEAP8[$37>>0]|0;
    $46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($45)|0);
    $$0$i$i = $46;
   }
   $47 = $$0$i$i&255;
   $48 = HEAP32[$4>>2]|0;
   $49 = ((($48)) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_iiii[$50 & 511]($4,$47,0)|0);
   $52 = ($51<<24>>24)==(37);
   if ($52) {
    $53 = HEAP32[$1>>2]|0;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($53)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $59 = HEAP32[$53>>2]|0;
     $60 = ((($59)) + 40|0);
     $61 = HEAP32[$60>>2]|0;
     (FUNCTION_TABLE_ii[$61 & 511]($53)|0);
    } else {
     $62 = ((($55)) + 1|0);
     HEAP32[$54>>2] = $62;
     $63 = HEAP8[$55>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
    }
    $64 = HEAP32[$1>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $96 = 1;
     } else {
      $66 = ((($64)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($64)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = ((($71)) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_ii[$73 & 511]($64)|0);
       $$0$i$i$i$i11 = $74;
      } else {
       $75 = HEAP8[$67>>0]|0;
       $76 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
       $$0$i$i$i$i11 = $76;
      }
      $77 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $78 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i11,$77)|0);
      if ($78) {
       HEAP32[$1>>2] = 0;
       $96 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$1>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $96 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $79 = ($$pre$i4$i$i1923|0)==(0|0);
    do {
     if (!($79)) {
      $80 = ((($$pre$i4$i$i1923)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($$pre$i4$i$i1923)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if ($84) {
       $85 = HEAP32[$$pre$i4$i$i1923>>2]|0;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_ii[$87 & 511]($$pre$i4$i$i1923)|0);
       $$0$i$i2$i$i17 = $88;
      } else {
       $89 = HEAP8[$81>>0]|0;
       $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
       $$0$i$i2$i$i17 = $90;
      }
      $91 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $92 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i17,$91)|0);
      if ($92) {
       HEAP32[$2>>2] = 0;
       break;
      } else {
       if ($96) {
        break L22;
       } else {
        $$sink3 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($96) {
     $$sink3 = 2;
     label = 38;
    }
   } else {
    $$sink3 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $93 = HEAP32[$3>>2]|0;
  $94 = $93 | $$sink3;
  HEAP32[$3>>2] = $94;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i$i$i42 = 0, $$pre$i4$i$i33 = 0, $$pre$i4$i$i48 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i28 = 0, $phitmp$i$i$i43 = 0, $phitmp$i5$i$i34 = 0;
 var $sext = 0, $sext52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $179 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 511]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $179 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $179 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 511]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($179) {
     $180 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($179) {
   label = 16;
  } else {
   $180 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 511]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = ($49<<24>>24)>(-1);
   if ($50) {
    $sext = $$0$i$i << 24;
    $51 = $sext >> 24;
    $52 = ((($3)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 & 2048;
    $57 = ($56<<16>>16)==(0);
    if (!($57)) {
     $60 = HEAP32[$3>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iiii[$62 & 511]($3,$49,0)|0);
     $64 = $63 << 24 >> 24;
     $65 = HEAP32[$0>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      (FUNCTION_TABLE_ii[$73 & 511]($65)|0);
      $$0$in = $64;$$023$in = $4;$$pre$i4$i$i33 = $180;$91 = $180;
     } else {
      $74 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $74;
      $75 = HEAP8[$67>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
      $$0$in = $64;$$023$in = $4;$$pre$i4$i$i33 = $180;$91 = $180;
     }
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(0|0);
      do {
       if ($77) {
        $108 = 1;
       } else {
        $78 = ((($76)) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ((($76)) + 16|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($79|0)==($81|0);
        if ($82) {
         $83 = HEAP32[$76>>2]|0;
         $84 = ((($83)) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (FUNCTION_TABLE_ii[$85 & 511]($76)|0);
         $$0$i$i$i$i25 = $86;
        } else {
         $87 = HEAP8[$79>>0]|0;
         $88 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
         $$0$i$i$i$i25 = $88;
        }
        $89 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $90 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$89)|0);
        if ($90) {
         HEAP32[$0>>2] = 0;
         $108 = 1;
         break;
        } else {
         $$pre$i$i$i27 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i28 = ($$pre$i$i$i27|0)==(0|0);
         $108 = $phitmp$i$i$i28;
         break;
        }
       }
      } while(0);
      $92 = ($91|0)==(0|0);
      do {
       if ($92) {
        $$pre$i4$i$i48 = $$pre$i4$i$i33;$107 = 1;$181 = 0;
       } else {
        $93 = ((($91)) + 12|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ((($91)) + 16|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($94|0)==($96|0);
        if ($97) {
         $98 = HEAP32[$91>>2]|0;
         $99 = ((($98)) + 36|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (FUNCTION_TABLE_ii[$100 & 511]($91)|0);
         $$0$i$i2$i$i31 = $101;
        } else {
         $102 = HEAP8[$94>>0]|0;
         $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
         $$0$i$i2$i$i31 = $103;
        }
        $104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$104)|0);
        if ($105) {
         HEAP32[$1>>2] = 0;
         $$pre$i4$i$i48 = 0;$107 = 1;$181 = 0;
         break;
        } else {
         $phitmp$i5$i$i34 = ($$pre$i4$i$i33|0)==(0|0);
         $$pre$i4$i$i48 = $$pre$i4$i$i33;$107 = $phitmp$i5$i$i34;$181 = $$pre$i4$i$i33;
         break;
        }
       }
      } while(0);
      $106 = $108 ^ $107;
      $109 = ($$023$in|0)>(1);
      $110 = $109 & $106;
      $111 = HEAP32[$0>>2]|0;
      if (!($110)) {
       break;
      }
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($111)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($113|0)==($115|0);
      if ($116) {
       $117 = HEAP32[$111>>2]|0;
       $118 = ((($117)) + 36|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (FUNCTION_TABLE_ii[$119 & 511]($111)|0);
       $$0$i$i36 = $120;
      } else {
       $121 = HEAP8[$113>>0]|0;
       $122 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
       $$0$i$i36 = $122;
      }
      $123 = $$0$i$i36&255;
      $124 = ($123<<24>>24)>(-1);
      if (!($124)) {
       $$2 = $$0;
       break L22;
      }
      $sext52 = $$0$i$i36 << 24;
      $125 = $sext52 >> 24;
      $126 = HEAP32[$52>>2]|0;
      $127 = (($126) + ($125<<1)|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128 & 2048;
      $130 = ($129<<16>>16)==(0);
      if ($130) {
       $$2 = $$0;
       break L22;
      }
      $131 = ($$0*10)|0;
      $132 = HEAP32[$3>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_iiii[$134 & 511]($3,$123,0)|0);
      $136 = $135 << 24 >> 24;
      $137 = (($131) + ($136))|0;
      $138 = HEAP32[$0>>2]|0;
      $139 = ((($138)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($138)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$138>>2]|0;
       $145 = ((($144)) + 40|0);
       $146 = HEAP32[$145>>2]|0;
       (FUNCTION_TABLE_ii[$146 & 511]($138)|0);
       $$0$in = $137;$$023$in = $$023;$$pre$i4$i$i33 = $$pre$i4$i$i48;$91 = $181;
       continue;
      } else {
       $147 = ((($140)) + 1|0);
       HEAP32[$139>>2] = $147;
       $148 = HEAP8[$140>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
       $$0$in = $137;$$023$in = $$023;$$pre$i4$i$i33 = $$pre$i4$i$i48;$91 = $181;
       continue;
      }
     }
     $149 = ($111|0)==(0|0);
     do {
      if ($149) {
       $182 = 1;
      } else {
       $150 = ((($111)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($111)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$111>>2]|0;
        $156 = ((($155)) + 36|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_ii[$157 & 511]($111)|0);
        $$0$i$i$i$i40 = $158;
       } else {
        $159 = HEAP8[$151>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i40 = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40,$161)|0);
       if ($162) {
        HEAP32[$0>>2] = 0;
        $182 = 1;
        break;
       } else {
        $$pre$i$i$i42 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i43 = ($$pre$i$i$i42|0)==(0|0);
        $182 = $phitmp$i$i$i43;
        break;
       }
      }
     } while(0);
     $163 = ($$pre$i4$i$i48|0)==(0|0);
     do {
      if ($163) {
       label = 62;
      } else {
       $164 = ((($$pre$i4$i$i48)) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ((($$pre$i4$i$i48)) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$$pre$i4$i$i48>>2]|0;
        $170 = ((($169)) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (FUNCTION_TABLE_ii[$171 & 511]($$pre$i4$i$i48)|0);
        $$0$i$i2$i$i46 = $172;
       } else {
        $173 = HEAP8[$165>>0]|0;
        $174 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($173)|0);
        $$0$i$i2$i$i46 = $174;
       }
       $175 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $176 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46,$175)|0);
       if ($176) {
        HEAP32[$1>>2] = 0;
        label = 62;
        break;
       } else {
        if ($182) {
         $$2 = $$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 62) {
      if (!($182)) {
       $$2 = $$0;
       break;
      }
     }
     $177 = HEAP32[$2>>2]|0;
     $178 = $177 | 2;
     HEAP32[$2>>2] = $178;
     $$2 = $$0;
     break;
    }
   }
   $58 = HEAP32[$2>>2]|0;
   $59 = $58 | 4;
   HEAP32[$2>>2] = $59;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,8080,(8112))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $17&255;
 $23 = $18 ? $19 : $12;
 $24 = $18 ? $21 : $22;
 $25 = (($23) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$23,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 __ZNSt3__26localeD2Ev($6);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20588)|0);
 __ZNSt3__26localeD2Ev($8);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $43;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$42,$1,$$byval_copy,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $45;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 511]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $52;
   $53 = ((($50)) + 8|0);
   $54 = ((($53)) + 3|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)<(0);
   $57 = HEAP32[$50>>2]|0;
   $58 = ((($50)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $55&255;
   $61 = $56 ? $57 : $50;
   $62 = $56 ? $59 : $60;
   $63 = (($61) + ($62<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $64 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$61,$63)|0);
   HEAP32[$1>>2] = $64;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $65 = ((($5)) + 12|0);
   $66 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$65,$1,$$byval_copy4,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $67 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $67;
   $68 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $69 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,7920,(7952))|0);
   HEAP32[$1>>2] = $69;
   label = 26;
   break;
  }
  case 70:  {
   $70 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $70;
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $72 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,7952,(7984))|0);
   HEAP32[$1>>2] = $72;
   label = 26;
   break;
  }
  case 72:  {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$73,$1,$$byval_copy9,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $75 = ((($5)) + 8|0);
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$75,$1,$$byval_copy10,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $77 = ((($5)) + 28|0);
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$77,$1,$$byval_copy11,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $79 = ((($5)) + 16|0);
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$79,$1,$$byval_copy12,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $81 = ((($5)) + 4|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$81,$1,$$byval_copy13,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy14,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $84 = ((($5)) + 8|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy15,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $86 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $86;
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $88 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,7984,(8028))|0);
   HEAP32[$1>>2] = $88;
   label = 26;
   break;
  }
  case 82:  {
   $89 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $89;
   $90 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $91 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,8028,(8048))|0);
   HEAP32[$1>>2] = $91;
   label = 26;
   break;
  }
  case 83:  {
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $93 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $93;
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $95 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,8048,(8080))|0);
   HEAP32[$1>>2] = $95;
   label = 26;
   break;
  }
  case 119:  {
   $96 = ((($5)) + 24|0);
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$96,$1,$$byval_copy23,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $98 = HEAP32[$0>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $101;
   $102 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 255]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$095$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($0)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 511]($104)|0);
   $109 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $109;
   $110 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $110;
   $111 = ((($108)) + 8|0);
   $112 = ((($111)) + 3|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = ($113<<24>>24)<(0);
   $115 = HEAP32[$108>>2]|0;
   $116 = ((($108)) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $113&255;
   $119 = $114 ? $115 : $108;
   $120 = $114 ? $117 : $118;
   $121 = (($119) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $122 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$119,$121)|0);
   HEAP32[$1>>2] = $122;
   label = 26;
   break;
  }
  case 121:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$123,$1,$$byval_copy28,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $125 = ((($5)) + 20|0);
   $126 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$125,$1,$$byval_copy29,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $128 = HEAP32[$4>>2]|0;
   $129 = $128 | 4;
   HEAP32[$4>>2] = $129;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18320]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18320)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_wweeksEv();
   HEAP32[5560] = 22072;
  }
 }
 $5 = HEAP32[5560]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18304]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18304)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L12init_wmonthsEv();
   HEAP32[5517] = 21780;
  }
 }
 $5 = HEAP32[5517]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18288]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(18288)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   __ZNSt3__2L11init_wam_pmEv();
   HEAP32[5444] = 21488;
  }
 }
 $5 = HEAP32[5444]|0;
 return ($5|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18280]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18280)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[21476>>2]=0|0;HEAP32[21476+4>>2]=0|0;HEAP32[21476+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIwE6lengthEPKw(6952)|0);
   $7 = ($6>>>0)>(1073741807);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(21476);
    // unreachable;
   }
   $8 = ($6>>>0)<(2);
   do {
    if ($8) {
     $9 = $6&255;
     HEAP8[((((21484)) + 3|0))>>0] = $9;
     $$0$i$i = 21476;
    } else {
     $10 = (($6) + 4)|0;
     $11 = $10 & -4;
     $12 = ($11>>>0)>(1073741823);
     if ($12) {
      _abort();
      // unreachable;
     } else {
      $13 = $11 << 2;
      $14 = (__Znwj($13)|0);
      HEAP32[5369] = $14;
      $15 = $11 | -2147483648;
      HEAP32[(21484)>>2] = $15;
      HEAP32[(21480)>>2] = $6;
      $$0$i$i = $14;
      break;
     }
    }
   } while(0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,6952,$6)|0);
   $16 = (($$0$i$i) + ($6<<2)|0);
   HEAP32[$1>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($16,$1);
  }
 }
 STACKTOP = sp;return (21476|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18272]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18272)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[21464>>2]=0|0;HEAP32[21464+4>>2]=0|0;HEAP32[21464+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIwE6lengthEPKw(6904)|0);
   $7 = ($6>>>0)>(1073741807);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(21464);
    // unreachable;
   }
   $8 = ($6>>>0)<(2);
   do {
    if ($8) {
     $9 = $6&255;
     HEAP8[((((21472)) + 3|0))>>0] = $9;
     $$0$i$i = 21464;
    } else {
     $10 = (($6) + 4)|0;
     $11 = $10 & -4;
     $12 = ($11>>>0)>(1073741823);
     if ($12) {
      _abort();
      // unreachable;
     } else {
      $13 = $11 << 2;
      $14 = (__Znwj($13)|0);
      HEAP32[5366] = $14;
      $15 = $11 | -2147483648;
      HEAP32[(21472)>>2] = $15;
      HEAP32[(21468)>>2] = $6;
      $$0$i$i = $14;
      break;
     }
    }
   } while(0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,6904,$6)|0);
   $16 = (($$0$i$i) + ($6<<2)|0);
   HEAP32[$1>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($16,$1);
  }
 }
 STACKTOP = sp;return (21464|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18264]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18264)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[21452>>2]=0|0;HEAP32[21452+4>>2]=0|0;HEAP32[21452+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIwE6lengthEPKw(6868)|0);
   $7 = ($6>>>0)>(1073741807);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(21452);
    // unreachable;
   }
   $8 = ($6>>>0)<(2);
   do {
    if ($8) {
     $9 = $6&255;
     HEAP8[((((21460)) + 3|0))>>0] = $9;
     $$0$i$i = 21452;
    } else {
     $10 = (($6) + 4)|0;
     $11 = $10 & -4;
     $12 = ($11>>>0)>(1073741823);
     if ($12) {
      _abort();
      // unreachable;
     } else {
      $13 = $11 << 2;
      $14 = (__Znwj($13)|0);
      HEAP32[5363] = $14;
      $15 = $11 | -2147483648;
      HEAP32[(21460)>>2] = $15;
      HEAP32[(21456)>>2] = $6;
      $$0$i$i = $14;
      break;
     }
    }
   } while(0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,6868,$6)|0);
   $16 = (($$0$i$i) + ($6<<2)|0);
   HEAP32[$1>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($16,$1);
  }
 }
 STACKTOP = sp;return (21452|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP8[18256]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire(18256)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   ;HEAP32[21440>>2]=0|0;HEAP32[21440+4>>2]=0|0;HEAP32[21440+8>>2]=0|0;
   $6 = (__ZNSt3__211char_traitsIwE6lengthEPKw(6832)|0);
   $7 = ($6>>>0)>(1073741807);
   if ($7) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(21440);
    // unreachable;
   }
   $8 = ($6>>>0)<(2);
   do {
    if ($8) {
     $9 = $6&255;
     HEAP8[((((21448)) + 3|0))>>0] = $9;
     $$0$i$i = 21440;
    } else {
     $10 = (($6) + 4)|0;
     $11 = $10 & -4;
     $12 = ($11>>>0)>(1073741823);
     if ($12) {
      _abort();
      // unreachable;
     } else {
      $13 = $11 << 2;
      $14 = (__Znwj($13)|0);
      HEAP32[5360] = $14;
      $15 = $11 | -2147483648;
      HEAP32[(21448)>>2] = $15;
      HEAP32[(21444)>>2] = $6;
      $$0$i$i = $14;
      break;
     }
    }
   } while(0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,6832,$6)|0);
   $16 = (($$0$i$i) + ($6<<2)|0);
   HEAP32[$1>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($16,$1);
  }
 }
 STACKTOP = sp;return (21440|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($0)|0);
 return ($1|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18296]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18296)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21488;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21776)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21488,7036)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21500),7048)|0);
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18312]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18312)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21780;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((22068)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21780,7060)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21792),7092)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21804),7128)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21816),7152)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21828),7176)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21840),7192)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21852),7212)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21864),7232)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21876),7260)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21888),7300)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21900),7332)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21912),7368)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21924),7404)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21936),7420)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21948),7436)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21960),7452)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21972),7176)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21984),7468)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21996),7484)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22008),7500)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22020),7516)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22032),7532)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22044),7548)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22056),7564)|0);
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18328]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18328)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 22072;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((22240)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(22072,7580)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22084),7608)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22096),7636)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22108),7668)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22120),7708)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22132),7744)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22144),7772)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22156),7808)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22168),7824)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22180),7840)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22192),7856)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22204),7872)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22216),7888)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((22228),7904)|0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i52 = 0, $$0$i$i$i$i66 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i58 = 0, $$0$i$i2$i$i72 = 0, $$0$i$i63 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i54 = 0;
 var $$pre$i$i$i68 = 0, $$pre$i4$i$i60 = 0, $$pre$i4$i$i6092 = 0, $$pre$i4$i$i6093 = 0, $$pre$pre = 0, $$sroa$047$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp$i5$i$i61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,20588)|0);
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $$0$ph = $6;$$pre = 0;
 L1: while(1) {
  $12 = ($$0$ph|0)!=($7|0);
  $13 = $$pre;
  while(1) {
   $14 = ($13|0)==(0);
   $or$cond = $12 & $14;
   $15 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i68 = $15;
    break L1;
   }
   $16 = ($15|0)==(0|0);
   $17 = $15;
   if ($16) {
    $142 = 0;$203 = 1;$70 = $17;
   } else {
    $18 = ((($15)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($15)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    if ($22) {
     $23 = HEAP32[$15>>2]|0;
     $24 = ((($23)) + 36|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (FUNCTION_TABLE_ii[$25 & 511]($15)|0);
     $$0$i$i$i$i = $26;
    } else {
     $27 = HEAP32[$19>>2]|0;
     $28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($27)|0);
     $$0$i$i$i$i = $28;
    }
    $29 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $30 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$29)|0);
    if ($30) {
     HEAP32[$1>>2] = 0;
     $142 = 0;$203 = 1;$70 = 0;
    } else {
     $142 = $15;$203 = 0;$70 = $17;
    }
   }
   $31 = HEAP32[$2>>2]|0;
   $32 = ($31|0)==(0|0);
   $33 = $31;
   do {
    if ($32) {
     $$ph = $33;
     label = 16;
    } else {
     $34 = ((($31)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($31)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($35|0)==($37|0);
     if ($38) {
      $39 = HEAP32[$31>>2]|0;
      $40 = ((($39)) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (FUNCTION_TABLE_ii[$41 & 511]($31)|0);
      $$0$i$i2$i$i = $42;
     } else {
      $43 = HEAP32[$35>>2]|0;
      $44 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
      $$0$i$i2$i$i = $44;
     }
     $45 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $46 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$45)|0);
     if ($46) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 16;
      break;
     } else {
      if ($203) {
       $204 = $31;$71 = $33;
       break;
      } else {
       label = 59;
       break L1;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    if ($203) {
     label = 59;
     break L1;
    } else {
     $204 = 0;$71 = $$ph;
    }
   }
   $47 = HEAP32[$$0$ph>>2]|0;
   $48 = HEAP32[$11>>2]|0;
   $49 = ((($48)) + 52|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_iiii[$50 & 511]($11,$47,0)|0);
   $52 = ($51<<24>>24)==(37);
   if ($52) {
    label = 19;
    break;
   }
   $75 = HEAP32[$$0$ph>>2]|0;
   $76 = HEAP32[$11>>2]|0;
   $77 = ((($76)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (FUNCTION_TABLE_iiii[$78 & 511]($11,8192,$75)|0);
   if ($79) {
    $$0$pn = $$0$ph;
    label = 25;
    break;
   }
   $141 = ((($142)) + 12|0);
   $143 = HEAP32[$141>>2]|0;
   $144 = ((($142)) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143|0)==($145|0);
   if ($146) {
    $147 = HEAP32[$142>>2]|0;
    $148 = ((($147)) + 36|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (FUNCTION_TABLE_ii[$149 & 511]($142)|0);
    $$0$i$i63 = $150;
   } else {
    $151 = HEAP32[$143>>2]|0;
    $152 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($151)|0);
    $$0$i$i63 = $152;
   }
   $153 = HEAP32[$11>>2]|0;
   $154 = ((($153)) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (FUNCTION_TABLE_iii[$155 & 511]($11,$$0$i$i63)|0);
   $157 = HEAP32[$$0$ph>>2]|0;
   $158 = HEAP32[$11>>2]|0;
   $159 = ((($158)) + 28|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (FUNCTION_TABLE_iii[$160 & 511]($11,$157)|0);
   $162 = ($156|0)==($161|0);
   if ($162) {
    label = 53;
    break;
   }
   HEAP32[$4>>2] = 4;
   $13 = 4;
  }
  L33: do {
   if ((label|0) == 19) {
    label = 0;
    $53 = ((($$0$ph)) + 4|0);
    $54 = ($53|0)==($7|0);
    if ($54) {
     label = 59;
     break L1;
    }
    $55 = HEAP32[$53>>2]|0;
    $56 = HEAP32[$11>>2]|0;
    $57 = ((($56)) + 52|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (FUNCTION_TABLE_iiii[$58 & 511]($11,$55,0)|0);
    switch ($59<<24>>24) {
    case 48: case 69:  {
     $60 = ((($$0$ph)) + 8|0);
     $61 = ($60|0)==($7|0);
     if ($61) {
      label = 59;
      break L1;
     }
     $62 = HEAP32[$60>>2]|0;
     $63 = HEAP32[$11>>2]|0;
     $64 = ((($63)) + 52|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiii[$65 & 511]($11,$62,0)|0);
     $$049 = $59;$$050 = $66;$74 = $53;
     break;
    }
    default: {
     $$049 = 0;$$050 = $59;$74 = $$0$ph;
    }
    }
    $67 = HEAP32[$0>>2]|0;
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    HEAP32[$9>>2] = $70;
    HEAP32[$10>>2] = $71;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $72 = (FUNCTION_TABLE_iiiiiiiii[$69 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $72;
    $73 = ((($74)) + 8|0);
    $$0$ph$be = $73;
   }
   else if ((label|0) == 25) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 4|0);
     $80 = ($$3|0)==($7|0);
     if ($80) {
      $$3$lcssa = $7;
      break;
     }
     $81 = HEAP32[$$3>>2]|0;
     $82 = HEAP32[$11>>2]|0;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iiii[$84 & 511]($11,8192,$81)|0);
     if ($85) {
      $$0$pn = $$3;
      label = 25;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$i$i54 = $142;$$pre$i4$i$i60 = $204;$100 = $204;
    while(1) {
     $86 = ($$pre$i$i$i54|0)==(0|0);
     if ($86) {
      $116 = 1;$118 = 0;
     } else {
      $87 = ((($$pre$i$i$i54)) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ((($$pre$i$i$i54)) + 16|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($88|0)==($90|0);
      if ($91) {
       $92 = HEAP32[$$pre$i$i$i54>>2]|0;
       $93 = ((($92)) + 36|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (FUNCTION_TABLE_ii[$94 & 511]($$pre$i$i$i54)|0);
       $$0$i$i$i$i52 = $95;
      } else {
       $96 = HEAP32[$88>>2]|0;
       $97 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($96)|0);
       $$0$i$i$i$i52 = $97;
      }
      $98 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $99 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i52,$98)|0);
      if ($99) {
       HEAP32[$1>>2] = 0;
       $116 = 1;$118 = 0;
      } else {
       $116 = 0;$118 = $$pre$i$i$i54;
      }
     }
     $101 = ($100|0)==(0|0);
     do {
      if ($101) {
       $$pre$i4$i$i6093 = $$pre$i4$i$i60;
       label = 40;
      } else {
       $102 = ((($100)) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ((($100)) + 16|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($103|0)==($105|0);
       if ($106) {
        $107 = HEAP32[$100>>2]|0;
        $108 = ((($107)) + 36|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = (FUNCTION_TABLE_ii[$109 & 511]($100)|0);
        $$0$i$i2$i$i58 = $110;
       } else {
        $111 = HEAP32[$103>>2]|0;
        $112 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($111)|0);
        $$0$i$i2$i$i58 = $112;
       }
       $113 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $114 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i58,$113)|0);
       if ($114) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i6093 = 0;
        label = 40;
        break;
       } else {
        $phitmp$i5$i$i61 = ($$pre$i4$i$i60|0)==(0|0);
        $115 = $116 ^ $phitmp$i5$i$i61;
        if ($115) {
         $$pre$i4$i$i6092 = $$pre$i4$i$i60;$205 = $$pre$i4$i$i60;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L33;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      label = 0;
      if ($116) {
       $$0$ph$be = $$3$lcssa;
       break L33;
      } else {
       $$pre$i4$i$i6092 = $$pre$i4$i$i6093;$205 = 0;
      }
     }
     $117 = ((($118)) + 12|0);
     $119 = HEAP32[$117>>2]|0;
     $120 = ((($118)) + 16|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($119|0)==($121|0);
     if ($122) {
      $123 = HEAP32[$118>>2]|0;
      $124 = ((($123)) + 36|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (FUNCTION_TABLE_ii[$125 & 511]($118)|0);
      $$0$i$i = $126;
     } else {
      $127 = HEAP32[$119>>2]|0;
      $128 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($127)|0);
      $$0$i$i = $128;
     }
     $129 = HEAP32[$11>>2]|0;
     $130 = ((($129)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (FUNCTION_TABLE_iiii[$131 & 511]($11,8192,$$0$i$i)|0);
     if (!($132)) {
      $$0$ph$be = $$3$lcssa;
      break L33;
     }
     $133 = HEAP32[$117>>2]|0;
     $134 = HEAP32[$120>>2]|0;
     $135 = ($133|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$118>>2]|0;
      $137 = ((($136)) + 40|0);
      $138 = HEAP32[$137>>2]|0;
      (FUNCTION_TABLE_ii[$138 & 511]($118)|0);
      $$pre$i$i$i54 = $118;$$pre$i4$i$i60 = $$pre$i4$i$i6092;$100 = $205;
      continue;
     } else {
      $139 = ((($133)) + 4|0);
      HEAP32[$117>>2] = $139;
      $140 = HEAP32[$133>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($140)|0);
      $$pre$i$i$i54 = $118;$$pre$i4$i$i60 = $$pre$i4$i$i6092;$100 = $205;
      continue;
     }
    }
   }
   else if ((label|0) == 53) {
    label = 0;
    $163 = HEAP32[$141>>2]|0;
    $164 = HEAP32[$144>>2]|0;
    $165 = ($163|0)==($164|0);
    if ($165) {
     $166 = HEAP32[$142>>2]|0;
     $167 = ((($166)) + 40|0);
     $168 = HEAP32[$167>>2]|0;
     (FUNCTION_TABLE_ii[$168 & 511]($142)|0);
    } else {
     $169 = ((($163)) + 4|0);
     HEAP32[$141>>2] = $169;
     $170 = HEAP32[$163>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($170)|0);
    }
    $171 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $171;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 59) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i68 = $142;
 }
 $172 = ($$pre$i$i$i68|0)==(0|0);
 if ($172) {
  $$sroa$047$0$copyload = 0;$206 = 1;
 } else {
  $173 = ((($$pre$i$i$i68)) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($$pre$i$i$i68)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174|0)==($176|0);
  if ($177) {
   $178 = HEAP32[$$pre$i$i$i68>>2]|0;
   $179 = ((($178)) + 36|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (FUNCTION_TABLE_ii[$180 & 511]($$pre$i$i$i68)|0);
   $$0$i$i$i$i66 = $181;
  } else {
   $182 = HEAP32[$174>>2]|0;
   $183 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($182)|0);
   $$0$i$i$i$i66 = $183;
  }
  $184 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $185 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i66,$184)|0);
  if ($185) {
   HEAP32[$1>>2] = 0;
   $$sroa$047$0$copyload = 0;$206 = 1;
  } else {
   $$sroa$047$0$copyload = $$pre$i$i$i68;$206 = 0;
  }
 }
 $186 = HEAP32[$2>>2]|0;
 $187 = ($186|0)==(0|0);
 do {
  if ($187) {
   label = 72;
  } else {
   $188 = ((($186)) + 12|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($186)) + 16|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($189|0)==($191|0);
   if ($192) {
    $193 = HEAP32[$186>>2]|0;
    $194 = ((($193)) + 36|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (FUNCTION_TABLE_ii[$195 & 511]($186)|0);
    $$0$i$i2$i$i72 = $196;
   } else {
    $197 = HEAP32[$189>>2]|0;
    $198 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($197)|0);
    $$0$i$i2$i$i72 = $198;
   }
   $199 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $200 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i72,$199)|0);
   if ($200) {
    HEAP32[$2>>2] = 0;
    label = 72;
    break;
   } else {
    if ($206) {
     break;
    } else {
     label = 74;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if ($206) {
   label = 74;
  }
 }
 if ((label|0) == 74) {
  $201 = HEAP32[$4>>2]|0;
  $202 = $201 | 2;
  HEAP32[$4>>2] = $202;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $93 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 511]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
     $$0$i$i$i$i = $17;
    }
    $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
    if ($19) {
     HEAP32[$1>>2] = 0;
     $93 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $93 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 15;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 511]($20)|0);
     $$0$i$i2$i$i = $30;
    } else {
     $31 = HEAP32[$23>>2]|0;
     $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
     $$0$i$i2$i$i = $32;
    }
    $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
    if ($34) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($93) {
      $94 = $20;
      break;
     } else {
      $$pre$i4$i$i15 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($93) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $94 = 0;
   }
  }
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($35)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)==($39|0);
  if ($40) {
   $41 = HEAP32[$35>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 511]($35)|0);
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$37>>2]|0;
   $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
   $$0$i$i = $46;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiii[$49 & 511]($4,8192,$$0$i$i)|0);
  if (!($50)) {
   $$pre$i4$i$i15 = $94;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 511]($51)|0);
   continue;
  } else {
   $60 = ((($53)) + 4|0);
   HEAP32[$52>>2] = $60;
   $61 = HEAP32[$53>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
   continue;
  }
 }
 $62 = HEAP32[$1>>2]|0;
 $63 = ($62|0)==(0|0);
 do {
  if ($63) {
   $95 = 1;
  } else {
   $64 = ((($62)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($62)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   if ($68) {
    $69 = HEAP32[$62>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 511]($62)|0);
    $$0$i$i$i$i7 = $72;
   } else {
    $73 = HEAP32[$65>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i$i$i7 = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7,$75)|0);
   if ($76) {
    HEAP32[$1>>2] = 0;
    $95 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $95 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $77 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($77) {
   label = 37;
  } else {
   $78 = ((($$pre$i4$i$i15)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($$pre$i4$i$i15)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($79|0)==($81|0);
   if ($82) {
    $83 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $84 = ((($83)) + 36|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (FUNCTION_TABLE_ii[$85 & 511]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $86;
   } else {
    $87 = HEAP32[$79>>2]|0;
    $88 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($87)|0);
    $$0$i$i2$i$i13 = $88;
   }
   $89 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $90 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13,$89)|0);
   if ($90) {
    HEAP32[$2>>2] = 0;
    label = 37;
    break;
   } else {
    if ($95) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($95) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $91 = HEAP32[$3>>2]|0;
  $92 = $91 | 2;
  HEAP32[$3>>2] = $92;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $28 = $17;
 } else {
  $18 = $14&255;
  $28 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $29 = ($28|0)==($26|0);
 do {
  if ($29) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i4$i$i1923 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $94 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 511]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $94 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $94 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 511]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($94) {
     $$pre$i4$i$i1923 = $20;
     label = 16;
     break;
    } else {
     $$sink3 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($94) {
   $$sink3 = 6;
   label = 38;
  } else {
   $$pre$i4$i$i1923 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$1>>2]|0;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 511]($35)|0);
    $$0$i$i = $44;
   } else {
    $45 = HEAP32[$37>>2]|0;
    $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
    $$0$i$i = $46;
   }
   $47 = HEAP32[$4>>2]|0;
   $48 = ((($47)) + 52|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_iiii[$49 & 511]($4,$$0$i$i,0)|0);
   $51 = ($50<<24>>24)==(37);
   if ($51) {
    $52 = HEAP32[$1>>2]|0;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($52)) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if ($57) {
     $58 = HEAP32[$52>>2]|0;
     $59 = ((($58)) + 40|0);
     $60 = HEAP32[$59>>2]|0;
     (FUNCTION_TABLE_ii[$60 & 511]($52)|0);
    } else {
     $61 = ((($54)) + 4|0);
     HEAP32[$53>>2] = $61;
     $62 = HEAP32[$54>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($62)|0);
    }
    $63 = HEAP32[$1>>2]|0;
    $64 = ($63|0)==(0|0);
    do {
     if ($64) {
      $95 = 1;
     } else {
      $65 = ((($63)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($63)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($66|0)==($68|0);
      if ($69) {
       $70 = HEAP32[$63>>2]|0;
       $71 = ((($70)) + 36|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (FUNCTION_TABLE_ii[$72 & 511]($63)|0);
       $$0$i$i$i$i11 = $73;
      } else {
       $74 = HEAP32[$66>>2]|0;
       $75 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($74)|0);
       $$0$i$i$i$i11 = $75;
      }
      $76 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $77 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i11,$76)|0);
      if ($77) {
       HEAP32[$1>>2] = 0;
       $95 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$1>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $95 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $78 = ($$pre$i4$i$i1923|0)==(0|0);
    do {
     if (!($78)) {
      $79 = ((($$pre$i4$i$i1923)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($$pre$i4$i$i1923)) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$$pre$i4$i$i1923>>2]|0;
       $85 = ((($84)) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (FUNCTION_TABLE_ii[$86 & 511]($$pre$i4$i$i1923)|0);
       $$0$i$i2$i$i17 = $87;
      } else {
       $88 = HEAP32[$80>>2]|0;
       $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
       $$0$i$i2$i$i17 = $89;
      }
      $90 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $91 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i17,$90)|0);
      if ($91) {
       HEAP32[$2>>2] = 0;
       break;
      } else {
       if ($95) {
        break L22;
       } else {
        $$sink3 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($95) {
     $$sink3 = 2;
     label = 38;
    }
   } else {
    $$sink3 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $92 = HEAP32[$3>>2]|0;
  $93 = $92 | $$sink3;
  HEAP32[$3>>2] = $93;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i43 = 0, $$pre$i4$i$i35 = 0, $$pre$i4$i$i49 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i44 = 0, $phitmp$i5$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $170 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 511]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $170 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $170 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 511]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($170) {
     $171 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($170) {
   label = 16;
  } else {
   $171 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 511]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$3>>2]|0;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 511]($3,2048,$$0$i$i)|0);
   if (!($52)) {
    $53 = HEAP32[$2>>2]|0;
    $54 = $53 | 4;
    HEAP32[$2>>2] = $54;
    $$2 = 0;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$57 & 511]($3,$$0$i$i,0)|0);
   $59 = $58 << 24 >> 24;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($60)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)==($64|0);
   if ($65) {
    $66 = HEAP32[$60>>2]|0;
    $67 = ((($66)) + 40|0);
    $68 = HEAP32[$67>>2]|0;
    (FUNCTION_TABLE_ii[$68 & 511]($60)|0);
    $$0$in = $59;$$025$in = $4;$$pre$i4$i$i35 = $171;$86 = $171;
   } else {
    $69 = ((($62)) + 4|0);
    HEAP32[$61>>2] = $69;
    $70 = HEAP32[$62>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($70)|0);
    $$0$in = $59;$$025$in = $4;$$pre$i4$i$i35 = $171;$86 = $171;
   }
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ($71|0)==(0|0);
    do {
     if ($72) {
      $103 = 1;
     } else {
      $73 = ((($71)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($71)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$71>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (FUNCTION_TABLE_ii[$80 & 511]($71)|0);
       $$0$i$i$i$i27 = $81;
      } else {
       $82 = HEAP32[$74>>2]|0;
       $83 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($82)|0);
       $$0$i$i$i$i27 = $83;
      }
      $84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27,$84)|0);
      if ($85) {
       HEAP32[$0>>2] = 0;
       $103 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $103 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $87 = ($86|0)==(0|0);
    do {
     if ($87) {
      $$pre$i4$i$i49 = $$pre$i4$i$i35;$102 = 1;$172 = 0;
     } else {
      $88 = ((($86)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($86)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       $93 = HEAP32[$86>>2]|0;
       $94 = ((($93)) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (FUNCTION_TABLE_ii[$95 & 511]($86)|0);
       $$0$i$i2$i$i33 = $96;
      } else {
       $97 = HEAP32[$89>>2]|0;
       $98 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($97)|0);
       $$0$i$i2$i$i33 = $98;
      }
      $99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33,$99)|0);
      if ($100) {
       HEAP32[$1>>2] = 0;
       $$pre$i4$i$i49 = 0;$102 = 1;$172 = 0;
       break;
      } else {
       $phitmp$i5$i$i36 = ($$pre$i4$i$i35|0)==(0|0);
       $$pre$i4$i$i49 = $$pre$i4$i$i35;$102 = $phitmp$i5$i$i36;$172 = $$pre$i4$i$i35;
       break;
      }
     }
    } while(0);
    $101 = $103 ^ $102;
    $104 = ($$025$in|0)>(1);
    $105 = $104 & $101;
    $106 = HEAP32[$0>>2]|0;
    if (!($105)) {
     break;
    }
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($106)) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($108|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$106>>2]|0;
     $113 = ((($112)) + 36|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (FUNCTION_TABLE_ii[$114 & 511]($106)|0);
     $$0$i$i38 = $115;
    } else {
     $116 = HEAP32[$108>>2]|0;
     $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
     $$0$i$i38 = $117;
    }
    $118 = HEAP32[$3>>2]|0;
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (FUNCTION_TABLE_iiii[$120 & 511]($3,2048,$$0$i$i38)|0);
    if (!($121)) {
     $$2 = $$0;
     break L22;
    }
    $122 = ($$0*10)|0;
    $123 = HEAP32[$3>>2]|0;
    $124 = ((($123)) + 52|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (FUNCTION_TABLE_iiii[$125 & 511]($3,$$0$i$i38,0)|0);
    $127 = $126 << 24 >> 24;
    $128 = (($122) + ($127))|0;
    $129 = HEAP32[$0>>2]|0;
    $130 = ((($129)) + 12|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ((($129)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($131|0)==($133|0);
    if ($134) {
     $135 = HEAP32[$129>>2]|0;
     $136 = ((($135)) + 40|0);
     $137 = HEAP32[$136>>2]|0;
     (FUNCTION_TABLE_ii[$137 & 511]($129)|0);
     $$0$in = $128;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i49;$86 = $172;
     continue;
    } else {
     $138 = ((($131)) + 4|0);
     HEAP32[$130>>2] = $138;
     $139 = HEAP32[$131>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($139)|0);
     $$0$in = $128;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i49;$86 = $172;
     continue;
    }
   }
   $140 = ($106|0)==(0|0);
   do {
    if ($140) {
     $173 = 1;
    } else {
     $141 = ((($106)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($106)) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$106>>2]|0;
      $147 = ((($146)) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (FUNCTION_TABLE_ii[$148 & 511]($106)|0);
      $$0$i$i$i$i41 = $149;
     } else {
      $150 = HEAP32[$142>>2]|0;
      $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
      $$0$i$i$i$i41 = $151;
     }
     $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41,$152)|0);
     if ($153) {
      HEAP32[$0>>2] = 0;
      $173 = 1;
      break;
     } else {
      $$pre$i$i$i43 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i44 = ($$pre$i$i$i43|0)==(0|0);
      $173 = $phitmp$i$i$i44;
      break;
     }
    }
   } while(0);
   $154 = ($$pre$i4$i$i49|0)==(0|0);
   do {
    if ($154) {
     label = 60;
    } else {
     $155 = ((($$pre$i4$i$i49)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$pre$i4$i$i49)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($156|0)==($158|0);
     if ($159) {
      $160 = HEAP32[$$pre$i4$i$i49>>2]|0;
      $161 = ((($160)) + 36|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (FUNCTION_TABLE_ii[$162 & 511]($$pre$i4$i$i49)|0);
      $$0$i$i2$i$i47 = $163;
     } else {
      $164 = HEAP32[$156>>2]|0;
      $165 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($164)|0);
      $$0$i$i2$i$i47 = $165;
     }
     $166 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $167 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47,$166)|0);
     if ($167) {
      HEAP32[$1>>2] = 0;
      label = 60;
      break;
     } else {
      if ($173) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($173)) {
     $$2 = $$0;
     break;
    }
   }
   $168 = HEAP32[$2>>2]|0;
   $169 = $168 | 2;
   HEAP32[$2>>2] = $169;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 4|0;
 $8 = sp;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 1|0);
    HEAP32[$16>>2] = $26;
    HEAP8[$17>>0] = $14;
    $27 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$28)|0);
   $$$sroa$04$0$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $30 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($1,$11)|0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (_strftime_l(($1|0),($12|0),($6|0),($3|0),($13|0))|0);
 $15 = (($1) + ($14)|0);
 HEAP32[$2>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__26__clocEv()|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  _freelocale($4);
 }
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $26;
    HEAP32[$17>>2] = $14;
    $27 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$28)|0);
   $$$sroa$04$0$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $30 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = sp + 8|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = (__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($1,$15)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (___uselocale($17)|0);
 $19 = (_mbsrtowcs($1,$9,$16,$8)|0);
 $20 = ($18|0)==(0|0);
 if (!($20)) {
  (___uselocale($18)|0);
 }
 $21 = ($19|0)==(-1);
 if ($21) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 } else {
  $22 = (($1) + ($19<<2)|0);
  HEAP32[$2>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 1;
 (__ZNSt3__211char_traitsIcE6assignEPcjc($0,1,45)|0);
 $4 = ((($0)) + 1|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $5 = $4&255;
  _memset(($0|0),($5|0),($1|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 11|0);
 HEAP8[$3>>0] = 1;
 (__ZNSt3__211char_traitsIcE6assignEPcjc($0,1,45)|0);
 $4 = ((($0)) + 1|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 HEAP8[$4>>0] = 1;
 (__ZNSt3__211char_traitsIwE6assignEPwjw($0,1,45)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($5,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 HEAP8[$4>>0] = 1;
 (__ZNSt3__211char_traitsIwE6assignEPwjw($0,1,45)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($5,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$028$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 140|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 138|0;
 $12 = sp + 4|0;
 $13 = sp + 128|0;
 $14 = sp + 28|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (347);
 $17 = ((($7)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,20556)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$17)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 511]($18,16476,(16486),$13)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(98);
  $30 = $27;
  $31 = $26;
  if ($29) {
   $32 = (($28) + 2)|0;
   $33 = (_malloc($32)|0);
   $34 = $33;
   $35 = ($33|0)==(0|0);
   if ($35) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$025 = $33;$$sroa$028$0 = $34;
   }
  } else {
   $$025 = $14;$$sroa$028$0 = 0;
  }
  $36 = HEAP8[$11>>0]|0;
  $37 = ($36<<24>>24)==(0);
  if ($37) {
   $$1 = $$025;
  } else {
   $38 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $38;
  }
  $39 = ((($13)) + 10|0);
  $40 = $13;
  $$0 = $30;$$2 = $$1;$42 = $31;
  while(1) {
   $41 = ($$0>>>0)<($42>>>0);
   if (!($41)) {
    break;
   }
   $45 = HEAP8[$$0>>0]|0;
   $$0$i = $13;
   while(1) {
    $46 = ($$0$i|0)==($39|0);
    if ($46) {
     $$0$lcssa$i = $39;
     break;
    }
    $47 = HEAP8[$$0$i>>0]|0;
    $48 = ($47<<24>>24)==($45<<24>>24);
    if ($48) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $49 = ((($$0$i)) + 1|0);
    $$0$i = $49;
   }
   $50 = $$0$lcssa$i;
   $51 = (($50) - ($40))|0;
   $52 = (16476 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   HEAP8[$$2>>0] = $53;
   $54 = ((($$0)) + 1|0);
   $55 = ((($$2)) + 1|0);
   $$pre = HEAP32[$9>>2]|0;
   $$0 = $54;$$2 = $55;$42 = $$pre;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  $43 = (_sscanf($14,16487,$vararg_buffer)|0);
  $44 = ($43|0)==(1);
  if (!($44)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $56 = ($$sroa$028$0|0)==(0);
  if (!($56)) {
   $57 = $$sroa$028$0;
   _free($57);
  }
 }
 $58 = HEAP32[$1>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $93 = 1;
  } else {
   $60 = ((($58)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($58)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = ((($65)) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 511]($58)|0);
    $$0$i$i$i$i = $68;
   } else {
    $69 = HEAP8[$61>>0]|0;
    $70 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
    $$0$i$i$i$i = $70;
   }
   $71 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $72 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$71)|0);
   if ($72) {
    HEAP32[$1>>2] = 0;
    $93 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $93 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $73 = HEAP32[$2>>2]|0;
 $74 = ($73|0)==(0|0);
 do {
  if ($74) {
   label = 32;
  } else {
   $75 = ((($73)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($73)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($76|0)==($78|0);
   if ($79) {
    $80 = HEAP32[$73>>2]|0;
    $81 = ((($80)) + 36|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (FUNCTION_TABLE_ii[$82 & 511]($73)|0);
    $$0$i$i2$i$i = $83;
   } else {
    $84 = HEAP8[$76>>0]|0;
    $85 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($84)|0);
    $$0$i$i2$i$i = $85;
   }
   $86 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $87 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$86)|0);
   if ($87) {
    HEAP32[$2>>2] = 0;
    label = 32;
    break;
   } else {
    if ($93) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($93) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $88 = HEAP32[$5>>2]|0;
  $89 = $88 | 2;
  HEAP32[$5>>2] = $89;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($10);
 $90 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $91 = ($90|0)==(0|0);
 if (!($91)) {
  $92 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$92 & 511]($90);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 24|0;
 $7 = sp + 133|0;
 $8 = sp + 132|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp + 28|0;
 $14 = sp;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (347);
 $17 = ((($9)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($12,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($12,20556)|0);
 HEAP8[$13>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$14>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
 $22 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$12,$21,$5,$13,$18,$10,$11,$17)|0);
 $23 = $19;
 if ($22) {
  $24 = ((($6)) + 11|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = HEAP32[$6>>2]|0;
   HEAP8[$7>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($27,$7);
   $28 = ((($6)) + 4|0);
   HEAP32[$28>>2] = 0;
  } else {
   HEAP8[$8>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$8);
   HEAP8[$24>>0] = 0;
  }
  $29 = HEAP8[$13>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   $31 = HEAP32[$18>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (FUNCTION_TABLE_iii[$33 & 511]($18,45)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$34);
  }
  $35 = HEAP32[$18>>2]|0;
  $36 = ((($35)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 511]($18,48)|0);
  $39 = HEAP32[$10>>2]|0;
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + -1|0);
  $$0 = $39;
  while(1) {
   $42 = ($$0>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = HEAP8[$$0>>0]|0;
   $44 = ($43<<24>>24)==($38<<24>>24);
   if (!($44)) {
    break;
   }
   $45 = ((($$0)) + 1|0);
   $$0 = $45;
  }
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($6,$$0,$40)|0);
 }
 $46 = HEAP32[$1>>2]|0;
 $47 = ($46|0)==(0|0);
 do {
  if ($47) {
   $81 = 1;
  } else {
   $48 = ((($46)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($46)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if ($52) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 511]($46)|0);
    $$0$i$i$i$i = $56;
   } else {
    $57 = HEAP8[$49>>0]|0;
    $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
    $$0$i$i$i$i = $58;
   }
   $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$59)|0);
   if ($60) {
    HEAP32[$1>>2] = 0;
    $81 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $81 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $61 = ($19|0)==(0);
 do {
  if ($61) {
   label = 25;
  } else {
   $62 = ((($23)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($23)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   if ($66) {
    $67 = $19;
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (FUNCTION_TABLE_ii[$70 & 511]($23)|0);
    $$0$i$i2$i$i = $71;
   } else {
    $72 = HEAP8[$63>>0]|0;
    $73 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($72)|0);
    $$0$i$i2$i$i = $73;
   }
   $74 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $75 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$74)|0);
   if ($75) {
    HEAP32[$2>>2] = 0;
    label = 25;
    break;
   } else {
    if ($81) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($81) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $76 = HEAP32[$5>>2]|0;
  $77 = $76 | 2;
  HEAP32[$5>>2] = $77;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($12);
 $78 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $79 = ($78|0)==(0|0);
 if (!($79)) {
  $80 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$80 & 511]($78);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0129 = 0, $$$0129139 = 0, $$$0129140 = 0, $$$0129141 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i162 = 0, $$0$i$i$i$i206 = 0, $$0$i$i$i$i222 = 0, $$0$i$i$i$i238 = 0, $$0$i$i$i$i255 = 0, $$0$i$i$i$i270 = 0, $$0$i$i148 = 0, $$0$i$i151 = 0, $$0$i$i154 = 0, $$0$i$i157 = 0, $$0$i$i160 = 0, $$0$i$i161 = 0, $$0$i$i174 = 0;
 var $$0$i$i177 = 0, $$0$i$i183 = 0, $$0$i$i190 = 0, $$0$i$i195 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i168 = 0, $$0$i$i2$i$i212 = 0, $$0$i$i2$i$i228 = 0, $$0$i$i2$i$i244 = 0, $$0$i$i2$i$i261 = 0, $$0$i$i2$i$i276 = 0, $$0$i$i203 = 0, $$0$i$i234 = 0, $$0$i$i250 = 0, $$0$i$i267 = 0, $$0$i$i282 = 0, $$0$i$i285 = 0, $$0124 = 0, $$0129 = 0, $$0131 = 0;
 var $$10 = 0, $$1130 = 0, $$2126$ph = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i164 = 0, $$pre$i$i$i208 = 0, $$pre$i$i$i224 = 0, $$pre$i$i$i240 = 0, $$pre$i$i$i257 = 0, $$pre$i$i$i272 = 0, $$pre$i4$i$i170 = 0, $$pre$i4$i$i170373 = 0, $$pre$i4$i$i170375 = 0, $$pre$i4$i$i230 = 0, $$pre$i4$i$i230370 = 0, $$pre$i4$i$i230371 = 0, $$pre$i4$i$i246 = 0, $$pre$i4$i$i246361 = 0;
 var $$pre$i4$i$i246363 = 0, $$pre$i4$i$i263 = 0, $$pre$i4$i$i278 = 0, $$pre$i4$i$i278366$ph = 0, $$pre$i4$i$i278366376 = 0, $$pre364 = 0, $$pre365 = 0, $$pre368 = 0, $$pre369 = 0, $$sink = 0, $$sink384 = 0, $$sroa$0294$0 = 0, $$sroa$0314$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond146 = 0, $exitcond$i$i = 0, $exitcond$i$i149 = 0, $exitcond$i$i152 = 0, $exitcond$i$i155 = 0, $exitcond$i$i158 = 0;
 var $or$cond = 0, $or$cond13 = 0, $or$cond143 = 0, $or$cond15 = 0, $or$cond383 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i165 = 0, $phitmp$i$i$i209 = 0, $phitmp$i$i$i225 = 0, $phitmp$i$i$i241 = 0, $phitmp$i$i$i258 = 0, $phitmp$i$i$i273 = 0, $phitmp$i5$i$i171 = 0, $phitmp$i5$i$i231 = 0, $phitmp$i5$i$i247 = 0, $phitmp$i5$i$i279 = 0, $sext = 0, $sext345 = 0, $sext346 = 0, $sext347 = 0;
 var $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 488|0;
 $12 = sp + 88|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 496|0;
 $17 = sp + 493|0;
 $18 = sp + 492|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (347);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i148 = 0;
 while(1) {
  $exitcond$i$i149 = ($$0$i$i148|0)==(3);
  if ($exitcond$i$i149) {
   break;
  }
  $31 = (($20) + ($$0$i$i148<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i148) + 1)|0;
  $$0$i$i148 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i151 = 0;
 while(1) {
  $exitcond$i$i152 = ($$0$i$i151|0)==(3);
  if ($exitcond$i$i152) {
   break;
  }
  $33 = (($21) + ($$0$i$i151<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i151) + 1)|0;
  $$0$i$i151 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i154 = 0;
 while(1) {
  $exitcond$i$i155 = ($$0$i$i154|0)==(3);
  if ($exitcond$i$i155) {
   break;
  }
  $35 = (($22) + ($$0$i$i154<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i154) + 1)|0;
  $$0$i$i154 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i157 = 0;
 while(1) {
  $exitcond$i$i158 = ($$0$i$i157|0)==(3);
  if ($exitcond$i$i158) {
   break;
  }
  $37 = (($23) + ($$0$i$i157<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i157) + 1)|0;
  $$0$i$i157 = $38;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($7)) + 8|0);
 $41 = ((($21)) + 11|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 11|0);
 $44 = ((($22)) + 4|0);
 $45 = $4 & 512;
 $46 = ($45|0)!=(0);
 $47 = ((($20)) + 11|0);
 $48 = ((($20)) + 4|0);
 $49 = ((($23)) + 11|0);
 $50 = ((($23)) + 4|0);
 $51 = ((($16)) + 3|0);
 $52 = ((($19)) + 11|0);
 $53 = ((($19)) + 4|0);
 $$0129 = 0;$$0131 = 0;
 L21: while(1) {
  $54 = ($$0131>>>0)<(4);
  if (!($54)) {
   label = 234;
   break;
  }
  $55 = HEAP32[$0>>2]|0;
  $56 = ($55|0)==(0|0);
  do {
   if ($56) {
    $782 = 1;
   } else {
    $57 = ((($55)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($55)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58|0)==($60|0);
    if ($61) {
     $62 = HEAP32[$55>>2]|0;
     $63 = ((($62)) + 36|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (FUNCTION_TABLE_ii[$64 & 511]($55)|0);
     $$0$i$i$i$i = $65;
    } else {
     $66 = HEAP8[$58>>0]|0;
     $67 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
     $$0$i$i$i$i = $67;
    }
    $68 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $69 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$68)|0);
    if ($69) {
     HEAP32[$0>>2] = 0;
     $782 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $782 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $70 = HEAP32[$1>>2]|0;
  $71 = ($70|0)==(0|0);
  do {
   if ($71) {
    label = 31;
   } else {
    $72 = ((($70)) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($70)) + 16|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($73|0)==($75|0);
    if ($76) {
     $77 = HEAP32[$70>>2]|0;
     $78 = ((($77)) + 36|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (FUNCTION_TABLE_ii[$79 & 511]($70)|0);
     $$0$i$i2$i$i = $80;
    } else {
     $81 = HEAP8[$73>>0]|0;
     $82 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($81)|0);
     $$0$i$i2$i$i = $82;
    }
    $83 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $84 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$83)|0);
    if ($84) {
     HEAP32[$1>>2] = 0;
     label = 31;
     break;
    } else {
     if ($782) {
      $783 = $70;
      break;
     } else {
      label = 234;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($782) {
    label = 234;
    break;
   } else {
    $783 = 0;
   }
  }
  $85 = (($16) + ($$0131)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  L46: do {
   switch ($87|0) {
   case 1:  {
    $cond146 = ($$0131|0)==(3);
    if ($cond146) {
     $$1130 = $$0129;
    } else {
     $88 = HEAP32[$0>>2]|0;
     $89 = ((($88)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($88)) + 16|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($90|0)==($92|0);
     if ($93) {
      $94 = HEAP32[$88>>2]|0;
      $95 = ((($94)) + 36|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (FUNCTION_TABLE_ii[$96 & 511]($88)|0);
      $$0$i$i160 = $97;
     } else {
      $98 = HEAP8[$90>>0]|0;
      $99 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($98)|0);
      $$0$i$i160 = $99;
     }
     $100 = $$0$i$i160&255;
     $101 = ($100<<24>>24)>(-1);
     if (!($101)) {
      label = 44;
      break L21;
     }
     $sext347 = $$0$i$i160 << 24;
     $102 = $sext347 >> 24;
     $103 = HEAP32[$40>>2]|0;
     $104 = (($103) + ($102<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = $105 & 8192;
     $107 = ($106<<16>>16)==(0);
     if ($107) {
      label = 44;
      break L21;
     }
     $108 = HEAP32[$0>>2]|0;
     $109 = ((($108)) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($108)) + 16|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($110|0)==($112|0);
     if ($113) {
      $114 = HEAP32[$108>>2]|0;
      $115 = ((($114)) + 40|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_ii[$116 & 511]($108)|0);
      $$0$i$i161 = $117;
     } else {
      $118 = ((($110)) + 1|0);
      HEAP32[$109>>2] = $118;
      $119 = HEAP8[$110>>0]|0;
      $120 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($119)|0);
      $$0$i$i161 = $120;
     }
     $121 = $$0$i$i161&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$121);
     $$pre$i4$i$i170 = $783;$140 = $783;
     label = 46;
    }
    break;
   }
   case 0:  {
    $124 = ($$0131|0)==(3);
    if ($124) {
     $$1130 = $$0129;
    } else {
     $$pre$i4$i$i170 = $783;$140 = $783;
     label = 46;
    }
    break;
   }
   case 3:  {
    $191 = HEAP8[$41>>0]|0;
    $192 = ($191<<24>>24)<(0);
    $193 = HEAP32[$42>>2]|0;
    $194 = $191&255;
    $195 = $192 ? $193 : $194;
    $196 = HEAP8[$43>>0]|0;
    $197 = ($196<<24>>24)<(0);
    $198 = HEAP32[$44>>2]|0;
    $199 = $196&255;
    $200 = $197 ? $198 : $199;
    $201 = (0 - ($200))|0;
    $202 = ($195|0)==($201|0);
    if ($202) {
     $$1130 = $$0129;
    } else {
     $203 = ($195|0)==(0);
     $204 = ($200|0)==(0);
     $or$cond383 = $203 | $204;
     $205 = HEAP32[$0>>2]|0;
     $206 = ((($205)) + 12|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($205)) + 16|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($207|0)==($209|0);
     if ($or$cond383) {
      if ($210) {
       $211 = HEAP32[$205>>2]|0;
       $212 = ((($211)) + 36|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = (FUNCTION_TABLE_ii[$213 & 511]($205)|0);
       $$0$i$i183 = $214;
      } else {
       $215 = HEAP8[$207>>0]|0;
       $216 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($215)|0);
       $$0$i$i183 = $216;
      }
      $217 = $$0$i$i183&255;
      if ($203) {
       $241 = HEAP8[$43>>0]|0;
       $242 = ($241<<24>>24)<(0);
       $243 = HEAP32[$22>>2]|0;
       $244 = $242 ? $243 : $22;
       $245 = HEAP8[$244>>0]|0;
       $246 = ($245<<24>>24)==($217<<24>>24);
       if (!($246)) {
        $$1130 = $$0129;
        break L46;
       }
       $247 = HEAP32[$0>>2]|0;
       $248 = ((($247)) + 12|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = ((($247)) + 16|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = ($249|0)==($251|0);
       if ($252) {
        $253 = HEAP32[$247>>2]|0;
        $254 = ((($253)) + 40|0);
        $255 = HEAP32[$254>>2]|0;
        (FUNCTION_TABLE_ii[$255 & 511]($247)|0);
       } else {
        $256 = ((($249)) + 1|0);
        HEAP32[$248>>2] = $256;
        $257 = HEAP8[$249>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($257)|0);
       }
       HEAP8[$6>>0] = 1;
       $258 = HEAP8[$43>>0]|0;
       $259 = ($258<<24>>24)<(0);
       $260 = HEAP32[$44>>2]|0;
       $261 = $258&255;
       $262 = $259 ? $260 : $261;
       $263 = ($262>>>0)>(1);
       $$$0129139 = $263 ? $22 : $$0129;
       $$1130 = $$$0129139;
       break L46;
      }
      $218 = HEAP8[$41>>0]|0;
      $219 = ($218<<24>>24)<(0);
      $220 = HEAP32[$21>>2]|0;
      $221 = $219 ? $220 : $21;
      $222 = HEAP8[$221>>0]|0;
      $223 = ($222<<24>>24)==($217<<24>>24);
      if (!($223)) {
       HEAP8[$6>>0] = 1;
       $$1130 = $$0129;
       break L46;
      }
      $224 = HEAP32[$0>>2]|0;
      $225 = ((($224)) + 12|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ((($224)) + 16|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = ($226|0)==($228|0);
      if ($229) {
       $230 = HEAP32[$224>>2]|0;
       $231 = ((($230)) + 40|0);
       $232 = HEAP32[$231>>2]|0;
       (FUNCTION_TABLE_ii[$232 & 511]($224)|0);
      } else {
       $233 = ((($226)) + 1|0);
       HEAP32[$225>>2] = $233;
       $234 = HEAP8[$226>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($234)|0);
      }
      $235 = HEAP8[$41>>0]|0;
      $236 = ($235<<24>>24)<(0);
      $237 = HEAP32[$42>>2]|0;
      $238 = $235&255;
      $239 = $236 ? $237 : $238;
      $240 = ($239>>>0)>(1);
      $$$0129 = $240 ? $21 : $$0129;
      $$1130 = $$$0129;
      break L46;
     }
     if ($210) {
      $264 = HEAP32[$205>>2]|0;
      $265 = ((($264)) + 36|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = (FUNCTION_TABLE_ii[$266 & 511]($205)|0);
      $$0$i$i190 = $267;
     } else {
      $268 = HEAP8[$207>>0]|0;
      $269 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($268)|0);
      $$0$i$i190 = $269;
     }
     $270 = $$0$i$i190&255;
     $271 = HEAP8[$41>>0]|0;
     $272 = ($271<<24>>24)<(0);
     $273 = HEAP32[$21>>2]|0;
     $274 = $272 ? $273 : $21;
     $275 = HEAP8[$274>>0]|0;
     $276 = ($275<<24>>24)==($270<<24>>24);
     $277 = HEAP32[$0>>2]|0;
     $278 = ((($277)) + 12|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($277)) + 16|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = ($279|0)==($281|0);
     if ($276) {
      if ($282) {
       $283 = HEAP32[$277>>2]|0;
       $284 = ((($283)) + 40|0);
       $285 = HEAP32[$284>>2]|0;
       (FUNCTION_TABLE_ii[$285 & 511]($277)|0);
      } else {
       $286 = ((($279)) + 1|0);
       HEAP32[$278>>2] = $286;
       $287 = HEAP8[$279>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($287)|0);
      }
      $288 = HEAP8[$41>>0]|0;
      $289 = ($288<<24>>24)<(0);
      $290 = HEAP32[$42>>2]|0;
      $291 = $288&255;
      $292 = $289 ? $290 : $291;
      $293 = ($292>>>0)>(1);
      $$$0129140 = $293 ? $21 : $$0129;
      $$1130 = $$$0129140;
      break L46;
     }
     if ($282) {
      $294 = HEAP32[$277>>2]|0;
      $295 = ((($294)) + 36|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (FUNCTION_TABLE_ii[$296 & 511]($277)|0);
      $$0$i$i195 = $297;
     } else {
      $298 = HEAP8[$279>>0]|0;
      $299 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($298)|0);
      $$0$i$i195 = $299;
     }
     $300 = $$0$i$i195&255;
     $301 = HEAP8[$43>>0]|0;
     $302 = ($301<<24>>24)<(0);
     $303 = HEAP32[$22>>2]|0;
     $304 = $302 ? $303 : $22;
     $305 = HEAP8[$304>>0]|0;
     $306 = ($305<<24>>24)==($300<<24>>24);
     if (!($306)) {
      label = 103;
      break L21;
     }
     $307 = HEAP32[$0>>2]|0;
     $308 = ((($307)) + 12|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ((($307)) + 16|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ($309|0)==($311|0);
     if ($312) {
      $313 = HEAP32[$307>>2]|0;
      $314 = ((($313)) + 40|0);
      $315 = HEAP32[$314>>2]|0;
      (FUNCTION_TABLE_ii[$315 & 511]($307)|0);
     } else {
      $316 = ((($309)) + 1|0);
      HEAP32[$308>>2] = $316;
      $317 = HEAP8[$309>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($317)|0);
     }
     HEAP8[$6>>0] = 1;
     $318 = HEAP8[$43>>0]|0;
     $319 = ($318<<24>>24)<(0);
     $320 = HEAP32[$44>>2]|0;
     $321 = $318&255;
     $322 = $319 ? $320 : $321;
     $323 = ($322>>>0)>(1);
     $$$0129141 = $323 ? $22 : $$0129;
     $$1130 = $$$0129141;
    }
    break;
   }
   case 2:  {
    $326 = ($$0129|0)!=(0|0);
    $327 = ($$0131>>>0)<(2);
    $or$cond = $327 | $326;
    if (!($or$cond)) {
     $328 = ($$0131|0)==(2);
     $329 = HEAP8[$51>>0]|0;
     $330 = ($329<<24>>24)!=(0);
     $331 = $328 & $330;
     $brmerge = $46 | $331;
     if (!($brmerge)) {
      $$1130 = 0;
      break L46;
     }
    }
    $332 = HEAP8[$47>>0]|0;
    $333 = ($332<<24>>24)<(0);
    $334 = HEAP32[$20>>2]|0;
    $335 = $333 ? $334 : $20;
    $336 = $335;
    $337 = ($$0131|0)==(0);
    L108: do {
     if ($337) {
      $$pre$i4$i$i230 = $783;$$sroa$0294$0 = $336;$379 = $332;$383 = $334;$404 = $783;
     } else {
      $338 = (($$0131) + -1)|0;
      $339 = (($16) + ($338)|0);
      $340 = HEAP8[$339>>0]|0;
      $switch = ($340&255)<(2);
      if ($switch) {
       $341 = HEAP32[$48>>2]|0;
       $342 = $332&255;
       $343 = $333 ? $341 : $342;
       $344 = (($335) + ($343)|0);
       $$sroa$0314$0 = $336;
       while(1) {
        $345 = $$sroa$0314$0;
        $346 = ($344|0)==($345|0);
        if ($346) {
         break;
        }
        $347 = HEAP8[$345>>0]|0;
        $348 = ($347<<24>>24)>(-1);
        if (!($348)) {
         break;
        }
        $349 = $347 << 24 >> 24;
        $350 = HEAP32[$40>>2]|0;
        $351 = (($350) + ($349<<1)|0);
        $352 = HEAP16[$351>>1]|0;
        $353 = $352 & 8192;
        $354 = ($353<<16>>16)==(0);
        if ($354) {
         break;
        }
        $355 = ((($345)) + 1|0);
        $356 = $355;
        $$sroa$0314$0 = $356;
       }
       $357 = (($$sroa$0314$0) - ($336))|0;
       $358 = HEAP8[$49>>0]|0;
       $359 = ($358<<24>>24)<(0);
       $360 = HEAP32[$50>>2]|0;
       $361 = $358&255;
       $362 = $359 ? $360 : $361;
       $363 = ($357>>>0)>($362>>>0);
       if ($363) {
        $$pre$i4$i$i230 = $783;$$sroa$0294$0 = $336;$379 = $332;$383 = $334;$404 = $783;
       } else {
        $364 = HEAP32[$23>>2]|0;
        $365 = (($364) + ($360)|0);
        $366 = (($23) + ($361)|0);
        $$sink384 = $359 ? $365 : $366;
        $367 = $359 ? $364 : $23;
        $368 = $359 ? $360 : $361;
        $369 = (0 - ($357))|0;
        $370 = (($$sink384) + ($369)|0);
        $371 = (($367) + ($368)|0);
        $$sink = $335;$372 = $370;
        while(1) {
         $373 = ($372|0)==($371|0);
         if ($373) {
          $$pre$i4$i$i230 = $783;$$sroa$0294$0 = $$sroa$0314$0;$379 = $332;$383 = $334;$404 = $783;
          break L108;
         }
         $374 = HEAP8[$372>>0]|0;
         $375 = HEAP8[$$sink>>0]|0;
         $376 = ($374<<24>>24)==($375<<24>>24);
         if (!($376)) {
          $$pre$i4$i$i230 = $783;$$sroa$0294$0 = $336;$379 = $332;$383 = $334;$404 = $783;
          break L108;
         }
         $377 = ((($372)) + 1|0);
         $378 = ((($$sink)) + 1|0);
         $$sink = $378;$372 = $377;
        }
       }
      } else {
       $$pre$i4$i$i230 = $783;$$sroa$0294$0 = $336;$379 = $332;$383 = $334;$404 = $783;
      }
     }
    } while(0);
    L122: while(1) {
     $380 = ($379<<24>>24)<(0);
     $381 = HEAP32[$48>>2]|0;
     $382 = $379&255;
     $384 = $380 ? $383 : $20;
     $385 = $380 ? $381 : $382;
     $386 = (($384) + ($385)|0);
     $387 = $$sroa$0294$0;
     $388 = ($386|0)==($387|0);
     if ($388) {
      $$lcssa = $386;
      break;
     }
     $389 = HEAP32[$0>>2]|0;
     $390 = ($389|0)==(0|0);
     do {
      if ($390) {
       $420 = 1;
      } else {
       $391 = ((($389)) + 12|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = ((($389)) + 16|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = ($392|0)==($394|0);
       if ($395) {
        $396 = HEAP32[$389>>2]|0;
        $397 = ((($396)) + 36|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (FUNCTION_TABLE_ii[$398 & 511]($389)|0);
        $$0$i$i$i$i222 = $399;
       } else {
        $400 = HEAP8[$392>>0]|0;
        $401 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($400)|0);
        $$0$i$i$i$i222 = $401;
       }
       $402 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $403 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i222,$402)|0);
       if ($403) {
        HEAP32[$0>>2] = 0;
        $420 = 1;
        break;
       } else {
        $$pre$i$i$i224 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i225 = ($$pre$i$i$i224|0)==(0|0);
        $420 = $phitmp$i$i$i225;
        break;
       }
      }
     } while(0);
     $405 = ($404|0)==(0|0);
     do {
      if ($405) {
       $$pre$i4$i$i230371 = $$pre$i4$i$i230;
       label = 132;
      } else {
       $406 = ((($404)) + 12|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = ((($404)) + 16|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = ($407|0)==($409|0);
       if ($410) {
        $411 = HEAP32[$404>>2]|0;
        $412 = ((($411)) + 36|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = (FUNCTION_TABLE_ii[$413 & 511]($404)|0);
        $$0$i$i2$i$i228 = $414;
       } else {
        $415 = HEAP8[$407>>0]|0;
        $416 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($415)|0);
        $$0$i$i2$i$i228 = $416;
       }
       $417 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $418 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i228,$417)|0);
       if ($418) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i230371 = 0;
        label = 132;
        break;
       } else {
        $phitmp$i5$i$i231 = ($$pre$i4$i$i230|0)==(0|0);
        $419 = $420 ^ $phitmp$i5$i$i231;
        if ($419) {
         $$pre$i4$i$i230370 = $$pre$i4$i$i230;$785 = $$pre$i4$i$i230;
         break;
        } else {
         $$lcssa = $387;
         break L122;
        }
       }
      }
     } while(0);
     if ((label|0) == 132) {
      label = 0;
      if ($420) {
       $$lcssa = $387;
       break;
      } else {
       $$pre$i4$i$i230370 = $$pre$i4$i$i230371;$785 = 0;
      }
     }
     $421 = HEAP32[$0>>2]|0;
     $422 = ((($421)) + 12|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ((($421)) + 16|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = ($423|0)==($425|0);
     if ($426) {
      $427 = HEAP32[$421>>2]|0;
      $428 = ((($427)) + 36|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = (FUNCTION_TABLE_ii[$429 & 511]($421)|0);
      $$0$i$i234 = $430;
     } else {
      $431 = HEAP8[$423>>0]|0;
      $432 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($431)|0);
      $$0$i$i234 = $432;
     }
     $433 = $$0$i$i234&255;
     $434 = HEAP8[$387>>0]|0;
     $435 = ($434<<24>>24)==($433<<24>>24);
     if (!($435)) {
      $$lcssa = $387;
      break;
     }
     $436 = HEAP32[$0>>2]|0;
     $437 = ((($436)) + 12|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ((($436)) + 16|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($438|0)==($440|0);
     if ($441) {
      $442 = HEAP32[$436>>2]|0;
      $443 = ((($442)) + 40|0);
      $444 = HEAP32[$443>>2]|0;
      (FUNCTION_TABLE_ii[$444 & 511]($436)|0);
     } else {
      $445 = ((($438)) + 1|0);
      HEAP32[$437>>2] = $445;
      $446 = HEAP8[$438>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($446)|0);
     }
     $447 = ((($387)) + 1|0);
     $448 = $447;
     $$pre368 = HEAP8[$47>>0]|0;
     $$pre369 = HEAP32[$20>>2]|0;
     $$pre$i4$i$i230 = $$pre$i4$i$i230370;$$sroa$0294$0 = $448;$379 = $$pre368;$383 = $$pre369;$404 = $785;
    }
    if ($46) {
     $449 = HEAP8[$47>>0]|0;
     $450 = ($449<<24>>24)<(0);
     $451 = HEAP32[$20>>2]|0;
     $452 = HEAP32[$48>>2]|0;
     $453 = $449&255;
     $454 = $450 ? $451 : $20;
     $455 = $450 ? $452 : $453;
     $456 = (($454) + ($455)|0);
     $457 = ($456|0)==($$lcssa|0);
     if ($457) {
      $$1130 = $$0129;
     } else {
      label = 144;
      break L21;
     }
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   case 4:  {
    $$0124 = 0;$$pre$i4$i$i246 = $783;$475 = $783;
    L158: while(1) {
     $460 = HEAP32[$0>>2]|0;
     $461 = ($460|0)==(0|0);
     do {
      if ($461) {
       $491 = 1;
      } else {
       $462 = ((($460)) + 12|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = ((($460)) + 16|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = ($463|0)==($465|0);
       if ($466) {
        $467 = HEAP32[$460>>2]|0;
        $468 = ((($467)) + 36|0);
        $469 = HEAP32[$468>>2]|0;
        $470 = (FUNCTION_TABLE_ii[$469 & 511]($460)|0);
        $$0$i$i$i$i238 = $470;
       } else {
        $471 = HEAP8[$463>>0]|0;
        $472 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($471)|0);
        $$0$i$i$i$i238 = $472;
       }
       $473 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $474 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i238,$473)|0);
       if ($474) {
        HEAP32[$0>>2] = 0;
        $491 = 1;
        break;
       } else {
        $$pre$i$i$i240 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i241 = ($$pre$i$i$i240|0)==(0|0);
        $491 = $phitmp$i$i$i241;
        break;
       }
      }
     } while(0);
     $476 = ($475|0)==(0|0);
     do {
      if ($476) {
       $$pre$i4$i$i246361 = $$pre$i4$i$i246;
       label = 158;
      } else {
       $477 = ((($475)) + 12|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ((($475)) + 16|0);
       $480 = HEAP32[$479>>2]|0;
       $481 = ($478|0)==($480|0);
       if ($481) {
        $482 = HEAP32[$475>>2]|0;
        $483 = ((($482)) + 36|0);
        $484 = HEAP32[$483>>2]|0;
        $485 = (FUNCTION_TABLE_ii[$484 & 511]($475)|0);
        $$0$i$i2$i$i244 = $485;
       } else {
        $486 = HEAP8[$478>>0]|0;
        $487 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($486)|0);
        $$0$i$i2$i$i244 = $487;
       }
       $488 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $489 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i244,$488)|0);
       if ($489) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i246361 = 0;
        label = 158;
        break;
       } else {
        $phitmp$i5$i$i247 = ($$pre$i4$i$i246|0)==(0|0);
        $490 = $491 ^ $phitmp$i5$i$i247;
        if ($490) {
         $$pre$i4$i$i246363 = $$pre$i4$i$i246;$786 = $$pre$i4$i$i246;
         break;
        } else {
         $$pre$i4$i$i263 = $$pre$i4$i$i246;
         break L158;
        }
       }
      }
     } while(0);
     if ((label|0) == 158) {
      label = 0;
      if ($491) {
       $$pre$i4$i$i263 = $$pre$i4$i$i246361;
       break;
      } else {
       $$pre$i4$i$i246363 = $$pre$i4$i$i246361;$786 = 0;
      }
     }
     $492 = HEAP32[$0>>2]|0;
     $493 = ((($492)) + 12|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = ((($492)) + 16|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = ($494|0)==($496|0);
     if ($497) {
      $498 = HEAP32[$492>>2]|0;
      $499 = ((($498)) + 36|0);
      $500 = HEAP32[$499>>2]|0;
      $501 = (FUNCTION_TABLE_ii[$500 & 511]($492)|0);
      $$0$i$i250 = $501;
     } else {
      $502 = HEAP8[$494>>0]|0;
      $503 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($502)|0);
      $$0$i$i250 = $503;
     }
     $504 = $$0$i$i250&255;
     $505 = ($504<<24>>24)>(-1);
     if ($505) {
      $sext345 = $$0$i$i250 << 24;
      $506 = $sext345 >> 24;
      $507 = HEAP32[$40>>2]|0;
      $508 = (($507) + ($506<<1)|0);
      $509 = HEAP16[$508>>1]|0;
      $510 = $509 & 2048;
      $511 = ($510<<16>>16)==(0);
      if ($511) {
       label = 168;
      } else {
       $512 = HEAP32[$9>>2]|0;
       $513 = HEAP32[$11>>2]|0;
       $514 = ($512|0)==($513|0);
       if ($514) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
        $$pre = HEAP32[$9>>2]|0;
        $516 = $$pre;
       } else {
        $516 = $512;
       }
       $515 = ((($516)) + 1|0);
       HEAP32[$9>>2] = $515;
       HEAP8[$516>>0] = $504;
       $517 = (($$0124) + 1)|0;
       $$2126$ph = $517;
      }
     } else {
      label = 168;
     }
     if ((label|0) == 168) {
      label = 0;
      $518 = HEAP8[$52>>0]|0;
      $519 = ($518<<24>>24)<(0);
      $520 = HEAP32[$53>>2]|0;
      $521 = $518&255;
      $522 = $519 ? $520 : $521;
      $523 = ($522|0)!=(0);
      $524 = ($$0124|0)!=(0);
      $or$cond13 = $524 & $523;
      $525 = HEAP8[$18>>0]|0;
      $526 = ($525<<24>>24)==($504<<24>>24);
      $or$cond143 = $526 & $or$cond13;
      if (!($or$cond143)) {
       $$pre$i4$i$i263 = $$pre$i4$i$i246363;
       break;
      }
      $527 = HEAP32[$14>>2]|0;
      $528 = HEAP32[$15>>2]|0;
      $529 = ($527|0)==($528|0);
      if ($529) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre364 = HEAP32[$14>>2]|0;
       $531 = $$pre364;
      } else {
       $531 = $527;
      }
      $530 = ((($531)) + 4|0);
      HEAP32[$14>>2] = $530;
      HEAP32[$531>>2] = $$0124;
      $$2126$ph = 0;
     }
     $532 = HEAP32[$0>>2]|0;
     $533 = ((($532)) + 12|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = ((($532)) + 16|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = ($534|0)==($536|0);
     if ($537) {
      $538 = HEAP32[$532>>2]|0;
      $539 = ((($538)) + 40|0);
      $540 = HEAP32[$539>>2]|0;
      (FUNCTION_TABLE_ii[$540 & 511]($532)|0);
      $$0124 = $$2126$ph;$$pre$i4$i$i246 = $$pre$i4$i$i246363;$475 = $786;
      continue;
     } else {
      $541 = ((($534)) + 1|0);
      HEAP32[$533>>2] = $541;
      $542 = HEAP8[$534>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($542)|0);
      $$0124 = $$2126$ph;$$pre$i4$i$i246 = $$pre$i4$i$i246363;$475 = $786;
      continue;
     }
    }
    $543 = HEAP32[$13>>2]|0;
    $544 = HEAP32[$14>>2]|0;
    $545 = ($543|0)!=($544|0);
    $546 = ($$0124|0)!=(0);
    $or$cond15 = $546 & $545;
    if ($or$cond15) {
     $547 = HEAP32[$15>>2]|0;
     $548 = ($544|0)==($547|0);
     if ($548) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre365 = HEAP32[$14>>2]|0;
      $550 = $$pre365;
     } else {
      $550 = $544;
     }
     $549 = ((($550)) + 4|0);
     HEAP32[$14>>2] = $549;
     HEAP32[$550>>2] = $$0124;
    }
    $551 = HEAP32[$24>>2]|0;
    $552 = ($551|0)>(0);
    L209: do {
     if ($552) {
      $553 = HEAP32[$0>>2]|0;
      $554 = ($553|0)==(0|0);
      do {
       if ($554) {
        $787 = 1;
       } else {
        $555 = ((($553)) + 12|0);
        $556 = HEAP32[$555>>2]|0;
        $557 = ((($553)) + 16|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = ($556|0)==($558|0);
        if ($559) {
         $560 = HEAP32[$553>>2]|0;
         $561 = ((($560)) + 36|0);
         $562 = HEAP32[$561>>2]|0;
         $563 = (FUNCTION_TABLE_ii[$562 & 511]($553)|0);
         $$0$i$i$i$i255 = $563;
        } else {
         $564 = HEAP8[$556>>0]|0;
         $565 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($564)|0);
         $$0$i$i$i$i255 = $565;
        }
        $566 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $567 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i255,$566)|0);
        if ($567) {
         HEAP32[$0>>2] = 0;
         $787 = 1;
         break;
        } else {
         $$pre$i$i$i257 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i258 = ($$pre$i$i$i257|0)==(0|0);
         $787 = $phitmp$i$i$i258;
         break;
        }
       }
      } while(0);
      $568 = ($$pre$i4$i$i263|0)==(0|0);
      do {
       if ($568) {
        label = 193;
       } else {
        $569 = ((($$pre$i4$i$i263)) + 12|0);
        $570 = HEAP32[$569>>2]|0;
        $571 = ((($$pre$i4$i$i263)) + 16|0);
        $572 = HEAP32[$571>>2]|0;
        $573 = ($570|0)==($572|0);
        if ($573) {
         $574 = HEAP32[$$pre$i4$i$i263>>2]|0;
         $575 = ((($574)) + 36|0);
         $576 = HEAP32[$575>>2]|0;
         $577 = (FUNCTION_TABLE_ii[$576 & 511]($$pre$i4$i$i263)|0);
         $$0$i$i2$i$i261 = $577;
        } else {
         $578 = HEAP8[$570>>0]|0;
         $579 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($578)|0);
         $$0$i$i2$i$i261 = $579;
        }
        $580 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $581 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i261,$580)|0);
        if ($581) {
         HEAP32[$1>>2] = 0;
         label = 193;
         break;
        } else {
         if ($787) {
          $788 = $$pre$i4$i$i263;
          break;
         } else {
          label = 232;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 193) {
       label = 0;
       if ($787) {
        label = 232;
        break L21;
       } else {
        $788 = 0;
       }
      }
      $582 = HEAP32[$0>>2]|0;
      $583 = ((($582)) + 12|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = ((($582)) + 16|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = ($584|0)==($586|0);
      if ($587) {
       $588 = HEAP32[$582>>2]|0;
       $589 = ((($588)) + 36|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (FUNCTION_TABLE_ii[$590 & 511]($582)|0);
       $$0$i$i267 = $591;
      } else {
       $592 = HEAP8[$584>>0]|0;
       $593 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($592)|0);
       $$0$i$i267 = $593;
      }
      $594 = $$0$i$i267&255;
      $595 = HEAP8[$17>>0]|0;
      $596 = ($595<<24>>24)==($594<<24>>24);
      if (!($596)) {
       label = 232;
       break L21;
      }
      $597 = HEAP32[$0>>2]|0;
      $598 = ((($597)) + 12|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = ((($597)) + 16|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = ($599|0)==($601|0);
      if ($602) {
       $603 = HEAP32[$597>>2]|0;
       $604 = ((($603)) + 40|0);
       $605 = HEAP32[$604>>2]|0;
       (FUNCTION_TABLE_ii[$605 & 511]($597)|0);
       $$pre$i4$i$i278 = $788;$625 = $788;
      } else {
       $606 = ((($599)) + 1|0);
       HEAP32[$598>>2] = $606;
       $607 = HEAP8[$599>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($607)|0);
       $$pre$i4$i$i278 = $788;$625 = $788;
      }
      while(1) {
       $608 = HEAP32[$24>>2]|0;
       $609 = ($608|0)>(0);
       if (!($609)) {
        break L209;
       }
       $610 = HEAP32[$0>>2]|0;
       $611 = ($610|0)==(0|0);
       do {
        if ($611) {
         $641 = 1;
        } else {
         $612 = ((($610)) + 12|0);
         $613 = HEAP32[$612>>2]|0;
         $614 = ((($610)) + 16|0);
         $615 = HEAP32[$614>>2]|0;
         $616 = ($613|0)==($615|0);
         if ($616) {
          $617 = HEAP32[$610>>2]|0;
          $618 = ((($617)) + 36|0);
          $619 = HEAP32[$618>>2]|0;
          $620 = (FUNCTION_TABLE_ii[$619 & 511]($610)|0);
          $$0$i$i$i$i270 = $620;
         } else {
          $621 = HEAP8[$613>>0]|0;
          $622 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($621)|0);
          $$0$i$i$i$i270 = $622;
         }
         $623 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $624 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i270,$623)|0);
         if ($624) {
          HEAP32[$0>>2] = 0;
          $641 = 1;
          break;
         } else {
          $$pre$i$i$i272 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i273 = ($$pre$i$i$i272|0)==(0|0);
          $641 = $phitmp$i$i$i273;
          break;
         }
        }
       } while(0);
       $626 = ($625|0)==(0|0);
       do {
        if ($626) {
         $$pre$i4$i$i278366$ph = $$pre$i4$i$i278;
         label = 216;
        } else {
         $627 = ((($625)) + 12|0);
         $628 = HEAP32[$627>>2]|0;
         $629 = ((($625)) + 16|0);
         $630 = HEAP32[$629>>2]|0;
         $631 = ($628|0)==($630|0);
         if ($631) {
          $632 = HEAP32[$625>>2]|0;
          $633 = ((($632)) + 36|0);
          $634 = HEAP32[$633>>2]|0;
          $635 = (FUNCTION_TABLE_ii[$634 & 511]($625)|0);
          $$0$i$i2$i$i276 = $635;
         } else {
          $636 = HEAP8[$628>>0]|0;
          $637 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($636)|0);
          $$0$i$i2$i$i276 = $637;
         }
         $638 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $639 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i276,$638)|0);
         if ($639) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i278366$ph = 0;
          label = 216;
          break;
         } else {
          $phitmp$i5$i$i279 = ($$pre$i4$i$i278|0)==(0|0);
          $640 = $641 ^ $phitmp$i5$i$i279;
          if ($640) {
           $$pre$i4$i$i278366376 = $$pre$i4$i$i278;$789 = $$pre$i4$i$i278;
           break;
          } else {
           label = 232;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 216) {
        label = 0;
        if ($641) {
         label = 232;
         break L21;
        } else {
         $$pre$i4$i$i278366376 = $$pre$i4$i$i278366$ph;$789 = 0;
        }
       }
       $642 = HEAP32[$0>>2]|0;
       $643 = ((($642)) + 12|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ((($642)) + 16|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ($644|0)==($646|0);
       if ($647) {
        $648 = HEAP32[$642>>2]|0;
        $649 = ((($648)) + 36|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = (FUNCTION_TABLE_ii[$650 & 511]($642)|0);
        $$0$i$i282 = $651;
       } else {
        $652 = HEAP8[$644>>0]|0;
        $653 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($652)|0);
        $$0$i$i282 = $653;
       }
       $654 = $$0$i$i282&255;
       $655 = ($654<<24>>24)>(-1);
       if (!($655)) {
        label = 232;
        break L21;
       }
       $sext = $$0$i$i282 << 24;
       $656 = $sext >> 24;
       $657 = HEAP32[$40>>2]|0;
       $658 = (($657) + ($656<<1)|0);
       $659 = HEAP16[$658>>1]|0;
       $660 = $659 & 2048;
       $661 = ($660<<16>>16)==(0);
       if ($661) {
        label = 232;
        break L21;
       }
       $662 = HEAP32[$9>>2]|0;
       $663 = HEAP32[$11>>2]|0;
       $664 = ($662|0)==($663|0);
       if ($664) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $665 = HEAP32[$0>>2]|0;
       $666 = ((($665)) + 12|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = ((($665)) + 16|0);
       $669 = HEAP32[$668>>2]|0;
       $670 = ($667|0)==($669|0);
       if ($670) {
        $671 = HEAP32[$665>>2]|0;
        $672 = ((($671)) + 36|0);
        $673 = HEAP32[$672>>2]|0;
        $674 = (FUNCTION_TABLE_ii[$673 & 511]($665)|0);
        $$0$i$i285 = $674;
       } else {
        $675 = HEAP8[$667>>0]|0;
        $676 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($675)|0);
        $$0$i$i285 = $676;
       }
       $677 = $$0$i$i285&255;
       $678 = HEAP32[$9>>2]|0;
       $679 = ((($678)) + 1|0);
       HEAP32[$9>>2] = $679;
       HEAP8[$678>>0] = $677;
       $680 = HEAP32[$24>>2]|0;
       $681 = (($680) + -1)|0;
       HEAP32[$24>>2] = $681;
       $682 = HEAP32[$0>>2]|0;
       $683 = ((($682)) + 12|0);
       $684 = HEAP32[$683>>2]|0;
       $685 = ((($682)) + 16|0);
       $686 = HEAP32[$685>>2]|0;
       $687 = ($684|0)==($686|0);
       if ($687) {
        $688 = HEAP32[$682>>2]|0;
        $689 = ((($688)) + 40|0);
        $690 = HEAP32[$689>>2]|0;
        (FUNCTION_TABLE_ii[$690 & 511]($682)|0);
        $$pre$i4$i$i278 = $$pre$i4$i$i278366376;$625 = $789;
        continue;
       } else {
        $691 = ((($684)) + 1|0);
        HEAP32[$683>>2] = $691;
        $692 = HEAP8[$684>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($692)|0);
        $$pre$i4$i$i278 = $$pre$i4$i$i278366376;$625 = $789;
        continue;
       }
      }
     }
    } while(0);
    $693 = HEAP32[$9>>2]|0;
    $694 = HEAP32[$8>>2]|0;
    $695 = ($693|0)==($694|0);
    if ($695) {
     label = 232;
     break L21;
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   default: {
    $$1130 = $$0129;
   }
   }
  } while(0);
  L283: do {
   if ((label|0) == 46) {
    while(1) {
     label = 0;
     $125 = HEAP32[$0>>2]|0;
     $126 = ($125|0)==(0|0);
     do {
      if ($126) {
       $156 = 1;
      } else {
       $127 = ((($125)) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ((($125)) + 16|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = ($128|0)==($130|0);
       if ($131) {
        $132 = HEAP32[$125>>2]|0;
        $133 = ((($132)) + 36|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = (FUNCTION_TABLE_ii[$134 & 511]($125)|0);
        $$0$i$i$i$i162 = $135;
       } else {
        $136 = HEAP8[$128>>0]|0;
        $137 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
        $$0$i$i$i$i162 = $137;
       }
       $138 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $139 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i162,$138)|0);
       if ($139) {
        HEAP32[$0>>2] = 0;
        $156 = 1;
        break;
       } else {
        $$pre$i$i$i164 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i165 = ($$pre$i$i$i164|0)==(0|0);
        $156 = $phitmp$i$i$i165;
        break;
       }
      }
     } while(0);
     $141 = ($140|0)==(0|0);
     do {
      if ($141) {
       $$pre$i4$i$i170373 = $$pre$i4$i$i170;
       label = 59;
      } else {
       $142 = ((($140)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($140)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$140>>2]|0;
        $148 = ((($147)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (FUNCTION_TABLE_ii[$149 & 511]($140)|0);
        $$0$i$i2$i$i168 = $150;
       } else {
        $151 = HEAP8[$143>>0]|0;
        $152 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($151)|0);
        $$0$i$i2$i$i168 = $152;
       }
       $153 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $154 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i168,$153)|0);
       if ($154) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i170373 = 0;
        label = 59;
        break;
       } else {
        $phitmp$i5$i$i171 = ($$pre$i4$i$i170|0)==(0|0);
        $155 = $156 ^ $phitmp$i5$i$i171;
        if ($155) {
         $$pre$i4$i$i170375 = $$pre$i4$i$i170;$784 = $$pre$i4$i$i170;
         break;
        } else {
         $$1130 = $$0129;
         break L283;
        }
       }
      }
     } while(0);
     if ((label|0) == 59) {
      label = 0;
      if ($156) {
       $$1130 = $$0129;
       break L283;
      } else {
       $$pre$i4$i$i170375 = $$pre$i4$i$i170373;$784 = 0;
      }
     }
     $157 = HEAP32[$0>>2]|0;
     $158 = ((($157)) + 12|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($157)) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     if ($162) {
      $163 = HEAP32[$157>>2]|0;
      $164 = ((($163)) + 36|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (FUNCTION_TABLE_ii[$165 & 511]($157)|0);
      $$0$i$i174 = $166;
     } else {
      $167 = HEAP8[$159>>0]|0;
      $168 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($167)|0);
      $$0$i$i174 = $168;
     }
     $169 = $$0$i$i174&255;
     $170 = ($169<<24>>24)>(-1);
     if (!($170)) {
      $$1130 = $$0129;
      break L283;
     }
     $sext346 = $$0$i$i174 << 24;
     $171 = $sext346 >> 24;
     $172 = HEAP32[$40>>2]|0;
     $173 = (($172) + ($171<<1)|0);
     $174 = HEAP16[$173>>1]|0;
     $175 = $174 & 8192;
     $176 = ($175<<16>>16)==(0);
     if ($176) {
      $$1130 = $$0129;
      break L283;
     }
     $177 = HEAP32[$0>>2]|0;
     $178 = ((($177)) + 12|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ((($177)) + 16|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($179|0)==($181|0);
     if ($182) {
      $183 = HEAP32[$177>>2]|0;
      $184 = ((($183)) + 40|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = (FUNCTION_TABLE_ii[$185 & 511]($177)|0);
      $$0$i$i177 = $186;
     } else {
      $187 = ((($179)) + 1|0);
      HEAP32[$178>>2] = $187;
      $188 = HEAP8[$179>>0]|0;
      $189 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($188)|0);
      $$0$i$i177 = $189;
     }
     $190 = $$0$i$i177&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$190);
     $$pre$i4$i$i170 = $$pre$i4$i$i170375;$140 = $784;
     label = 46;
    }
   }
  } while(0);
  $698 = (($$0131) + 1)|0;
  $$0129 = $$1130;$$0131 = $698;
 }
 L319: do {
  if ((label|0) == 44) {
   $122 = HEAP32[$5>>2]|0;
   $123 = $122 | 4;
   HEAP32[$5>>2] = $123;
   $$10 = 0;
  }
  else if ((label|0) == 103) {
   $324 = HEAP32[$5>>2]|0;
   $325 = $324 | 4;
   HEAP32[$5>>2] = $325;
   $$10 = 0;
  }
  else if ((label|0) == 144) {
   $458 = HEAP32[$5>>2]|0;
   $459 = $458 | 4;
   HEAP32[$5>>2] = $459;
   $$10 = 0;
  }
  else if ((label|0) == 232) {
   $696 = HEAP32[$5>>2]|0;
   $697 = $696 | 4;
   HEAP32[$5>>2] = $697;
   $$10 = 0;
  }
  else if ((label|0) == 234) {
   $699 = ($$0129|0)==(0|0);
   L321: do {
    if (!($699)) {
     $700 = ((($$0129)) + 11|0);
     $701 = ((($$0129)) + 4|0);
     $$0 = 1;
     L323: while(1) {
      $702 = HEAP8[$700>>0]|0;
      $703 = ($702<<24>>24)<(0);
      if ($703) {
       $704 = HEAP32[$701>>2]|0;
       $707 = $704;
      } else {
       $705 = $702&255;
       $707 = $705;
      }
      $706 = ($$0>>>0)<($707>>>0);
      if (!($706)) {
       break L321;
      }
      $708 = HEAP32[$0>>2]|0;
      $709 = ($708|0)==(0|0);
      do {
       if ($709) {
        $790 = 1;
       } else {
        $710 = ((($708)) + 12|0);
        $711 = HEAP32[$710>>2]|0;
        $712 = ((($708)) + 16|0);
        $713 = HEAP32[$712>>2]|0;
        $714 = ($711|0)==($713|0);
        if ($714) {
         $715 = HEAP32[$708>>2]|0;
         $716 = ((($715)) + 36|0);
         $717 = HEAP32[$716>>2]|0;
         $718 = (FUNCTION_TABLE_ii[$717 & 511]($708)|0);
         $$0$i$i$i$i206 = $718;
        } else {
         $719 = HEAP8[$711>>0]|0;
         $720 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($719)|0);
         $$0$i$i$i$i206 = $720;
        }
        $721 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $722 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i206,$721)|0);
        if ($722) {
         HEAP32[$0>>2] = 0;
         $790 = 1;
         break;
        } else {
         $$pre$i$i$i208 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i209 = ($$pre$i$i$i208|0)==(0|0);
         $790 = $phitmp$i$i$i209;
         break;
        }
       }
      } while(0);
      $723 = HEAP32[$1>>2]|0;
      $724 = ($723|0)==(0|0);
      do {
       if ($724) {
        label = 253;
       } else {
        $725 = ((($723)) + 12|0);
        $726 = HEAP32[$725>>2]|0;
        $727 = ((($723)) + 16|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = ($726|0)==($728|0);
        if ($729) {
         $730 = HEAP32[$723>>2]|0;
         $731 = ((($730)) + 36|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = (FUNCTION_TABLE_ii[$732 & 511]($723)|0);
         $$0$i$i2$i$i212 = $733;
        } else {
         $734 = HEAP8[$726>>0]|0;
         $735 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($734)|0);
         $$0$i$i2$i$i212 = $735;
        }
        $736 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $737 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i212,$736)|0);
        if ($737) {
         HEAP32[$1>>2] = 0;
         label = 253;
         break;
        } else {
         if ($790) {
          break;
         } else {
          break L323;
         }
        }
       }
      } while(0);
      if ((label|0) == 253) {
       label = 0;
       if ($790) {
        break;
       }
      }
      $738 = HEAP32[$0>>2]|0;
      $739 = ((($738)) + 12|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = ((($738)) + 16|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = ($740|0)==($742|0);
      if ($743) {
       $744 = HEAP32[$738>>2]|0;
       $745 = ((($744)) + 36|0);
       $746 = HEAP32[$745>>2]|0;
       $747 = (FUNCTION_TABLE_ii[$746 & 511]($738)|0);
       $$0$i$i203 = $747;
      } else {
       $748 = HEAP8[$740>>0]|0;
       $749 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($748)|0);
       $$0$i$i203 = $749;
      }
      $750 = $$0$i$i203&255;
      $751 = HEAP8[$700>>0]|0;
      $752 = ($751<<24>>24)<(0);
      if ($752) {
       $753 = HEAP32[$$0129>>2]|0;
       $755 = $753;
      } else {
       $755 = $$0129;
      }
      $754 = (($755) + ($$0)|0);
      $756 = HEAP8[$754>>0]|0;
      $757 = ($756<<24>>24)==($750<<24>>24);
      if (!($757)) {
       break;
      }
      $760 = (($$0) + 1)|0;
      $761 = HEAP32[$0>>2]|0;
      $762 = ((($761)) + 12|0);
      $763 = HEAP32[$762>>2]|0;
      $764 = ((($761)) + 16|0);
      $765 = HEAP32[$764>>2]|0;
      $766 = ($763|0)==($765|0);
      if ($766) {
       $767 = HEAP32[$761>>2]|0;
       $768 = ((($767)) + 40|0);
       $769 = HEAP32[$768>>2]|0;
       (FUNCTION_TABLE_ii[$769 & 511]($761)|0);
       $$0 = $760;
       continue;
      } else {
       $770 = ((($763)) + 1|0);
       HEAP32[$762>>2] = $770;
       $771 = HEAP8[$763>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($771)|0);
       $$0 = $760;
       continue;
      }
     }
     $758 = HEAP32[$5>>2]|0;
     $759 = $758 | 4;
     HEAP32[$5>>2] = $759;
     $$10 = 0;
     break L319;
    }
   } while(0);
   $772 = HEAP32[$13>>2]|0;
   $773 = HEAP32[$14>>2]|0;
   $774 = ($772|0)==($773|0);
   if ($774) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$772,$773,$25);
    $775 = HEAP32[$25>>2]|0;
    $776 = ($775|0)==(0);
    if ($776) {
     $$10 = 1;
     break;
    } else {
     $777 = HEAP32[$5>>2]|0;
     $778 = $777 | 4;
     HEAP32[$5>>2] = $778;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $779 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $780 = ($779|0)==(0|0);
 if (!($780)) {
  $781 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$781 & 511]($779);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep23$i$i = 0, $scevgep39 = 0, $scevgep40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp + 13|0;
 $5 = sp;
 $6 = sp + 12|0;
 $7 = ((($0)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 2147483647;
  $phitmp$i = (($15) + -1)|0;
  $50 = $12;$51 = $phitmp$i;
 } else {
  $10 = $8&255;
  $50 = $10;$51 = 10;
 }
 $16 = $2;
 $17 = (($16) - ($3))|0;
 $18 = ($17|0)==(0);
 do {
  if (!($18)) {
   if ($9) {
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($0)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $19;$25 = $21;
   } else {
    $22 = $8&255;
    $24 = $0;$25 = $22;
   }
   $23 = (($24) + ($25)|0);
   $26 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1,$24,$23)|0);
   if ($26) {
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    $27 = ($17>>>0)>(4294967279);
    if ($27) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5);
     // unreachable;
    }
    $28 = ($17>>>0)<(11);
    if ($28) {
     $29 = $17&255;
     $30 = ((($5)) + 11|0);
     HEAP8[$30>>0] = $29;
     $$021$ph$i$i = $5;
    } else {
     $31 = (($17) + 16)|0;
     $32 = $31 & -16;
     $33 = (__Znwj($32)|0);
     HEAP32[$5>>2] = $33;
     $34 = $32 | -2147483648;
     $35 = ((($5)) + 8|0);
     HEAP32[$35>>2] = $34;
     $36 = ((($5)) + 4|0);
     HEAP32[$36>>2] = $17;
     $$021$ph$i$i = $33;
    }
    $$0$i$i = $1;$$021$i$i = $$021$ph$i$i;
    while(1) {
     $37 = ($$0$i$i|0)==($2|0);
     if ($37) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i,$$0$i$i);
     $38 = ((($$0$i$i)) + 1|0);
     $39 = ((($$021$i$i)) + 1|0);
     $$0$i$i = $38;$$021$i$i = $39;
    }
    $scevgep23$i$i = (($$021$ph$i$i) + ($17)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23$i$i,$4);
    $40 = ((($5)) + 11|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)<(0);
    $43 = HEAP32[$5>>2]|0;
    $44 = ((($5)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $41&255;
    $47 = $42 ? $43 : $5;
    $48 = $42 ? $45 : $46;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$47,$48)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    break;
   }
   $49 = (($51) - ($50))|0;
   $52 = ($49>>>0)<($17>>>0);
   if ($52) {
    $53 = (($50) + ($17))|0;
    $54 = (($53) - ($51))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$51,$54,$50,$50,0,0);
   }
   $55 = HEAP8[$7>>0]|0;
   $56 = ($55<<24>>24)<(0);
   if ($56) {
    $57 = HEAP32[$0>>2]|0;
    $59 = $57;
   } else {
    $59 = $0;
   }
   $58 = (($59) + ($50)|0);
   $60 = (($50) - ($3))|0;
   $scevgep = (($2) + ($60)|0);
   $scevgep39 = $scevgep;
   $$0 = $58;$$034 = $1;
   while(1) {
    $61 = ($$034|0)==($2|0);
    if ($61) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$034);
    $62 = ((($$0)) + 1|0);
    $63 = ((($$034)) + 1|0);
    $$0 = $62;$$034 = $63;
   }
   $scevgep40 = (($59) + ($scevgep39)|0);
   HEAP8[$6>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep40,$6);
   $64 = (($50) + ($17))|0;
   $65 = HEAP8[$7>>0]|0;
   $66 = ($65<<24>>24)<(0);
   if ($66) {
    $67 = ((($0)) + 4|0);
    HEAP32[$67>>2] = $64;
    break;
   } else {
    $68 = $64&255;
    HEAP8[$7>>0] = $68;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $$ = $3 & $4;
 return ($$|0);
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i41 = 0, $$0$i$i$i47 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i71 = 0, $$0$i$i$i77 = 0, $$pre$phi$i$i39Z2D = 0, $$pre$phi$i$i45Z2D = 0, $$pre$phi$i$i51Z2D = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$i69Z2D = 0, $$pre$phi$i$i75Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i42 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i54 = 0;
 var $exitcond$i$i$i60 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i72 = 0, $exitcond$i$i$i78 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 119|0;
 $11 = sp + 118|0;
 $12 = sp + 117|0;
 $13 = sp + 116|0;
 $14 = sp + 115|0;
 $15 = sp + 114|0;
 $16 = sp + 113|0;
 $17 = sp + 112|0;
 $18 = sp + 111|0;
 $19 = sp + 110|0;
 $20 = sp + 109|0;
 $21 = sp + 108|0;
 $22 = sp + 107|0;
 $23 = sp + 106|0;
 $24 = sp + 105|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22276)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 511]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 511]($27,$36);
  $44 = ((($8)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  if ($46) {
   $47 = HEAP32[$8>>2]|0;
   HEAP8[$24>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($47,$24);
   $48 = ((($8)) + 4|0);
   HEAP32[$48>>2] = 0;
   $$pre$phi$i$iZ2D = $8;
  } else {
   HEAP8[$25>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
   HEAP8[$44>>0] = 0;
   $$pre$phi$i$iZ2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$27>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $49 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$49>>2] = 0;
   $50 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $50;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $51 = HEAP32[$36>>2]|0;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 511]($28,$36);
  $54 = ((($7)) + 11|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)<(0);
  if ($56) {
   $57 = HEAP32[$7>>2]|0;
   HEAP8[$22>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($57,$22);
   $58 = ((($7)) + 4|0);
   HEAP32[$58>>2] = 0;
   $$pre$phi$i$i39Z2D = $7;
  } else {
   HEAP8[$23>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$23);
   HEAP8[$54>>0] = 0;
   $$pre$phi$i$i39Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i39Z2D>>2]=HEAP32[$28>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i41 = 0;
  while(1) {
   $exitcond$i$i$i42 = ($$0$i$i$i41|0)==(3);
   if ($exitcond$i$i$i42) {
    break;
   }
   $59 = (($28) + ($$0$i$i$i41<<2)|0);
   HEAP32[$59>>2] = 0;
   $60 = (($$0$i$i$i41) + 1)|0;
   $$0$i$i$i41 = $60;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
  $61 = HEAP32[$36>>2]|0;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_ii[$63 & 511]($36)|0);
  HEAP8[$3>>0] = $64;
  $65 = HEAP32[$36>>2]|0;
  $66 = ((($65)) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (FUNCTION_TABLE_ii[$67 & 511]($36)|0);
  HEAP8[$4>>0] = $68;
  $69 = HEAP32[$36>>2]|0;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 511]($29,$36);
  $72 = ((($5)) + 11|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73<<24>>24)<(0);
  if ($74) {
   $75 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($75,$20);
   $76 = ((($5)) + 4|0);
   HEAP32[$76>>2] = 0;
   $$pre$phi$i$i45Z2D = $5;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$72>>0] = 0;
   $$pre$phi$i$i45Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i45Z2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $77 = (($29) + ($$0$i$i$i47<<2)|0);
   HEAP32[$77>>2] = 0;
   $78 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $78;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $79 = HEAP32[$36>>2]|0;
  $80 = ((($79)) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  FUNCTION_TABLE_vii[$81 & 511]($30,$36);
  $82 = ((($6)) + 11|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)<(0);
  if ($84) {
   $85 = HEAP32[$6>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($85,$18);
   $86 = ((($6)) + 4|0);
   HEAP32[$86>>2] = 0;
   $$pre$phi$i$i51Z2D = $6;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$19);
   HEAP8[$82>>0] = 0;
   $$pre$phi$i$i51Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i51Z2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $87 = (($30) + ($$0$i$i$i53<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $88;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $89 = HEAP32[$36>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 511]($36)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22268)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  FUNCTION_TABLE_vii[$96 & 511]($31,$93);
  $97 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$97&255;HEAP8[$2+1>>0]=($97>>8)&255;HEAP8[$2+2>>0]=($97>>16)&255;HEAP8[$2+3>>0]=$97>>24;
  $98 = HEAP32[$93>>2]|0;
  $99 = ((($98)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  FUNCTION_TABLE_vii[$100 & 511]($32,$93);
  $101 = ((($8)) + 11|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ($102<<24>>24)<(0);
  if ($103) {
   $104 = HEAP32[$8>>2]|0;
   HEAP8[$16>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($104,$16);
   $105 = ((($8)) + 4|0);
   HEAP32[$105>>2] = 0;
   $$pre$phi$i$i57Z2D = $8;
  } else {
   HEAP8[$17>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
   HEAP8[$101>>0] = 0;
   $$pre$phi$i$i57Z2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$32>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $106 = (($32) + ($$0$i$i$i59<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $107;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $108 = HEAP32[$93>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 511]($33,$93);
  $111 = ((($7)) + 11|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = ($112<<24>>24)<(0);
  if ($113) {
   $114 = HEAP32[$7>>2]|0;
   HEAP8[$14>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($114,$14);
   $115 = ((($7)) + 4|0);
   HEAP32[$115>>2] = 0;
   $$pre$phi$i$i63Z2D = $7;
  } else {
   HEAP8[$15>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$15);
   HEAP8[$111>>0] = 0;
   $$pre$phi$i$i63Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i63Z2D>>2]=HEAP32[$33>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $116 = (($33) + ($$0$i$i$i65<<2)|0);
   HEAP32[$116>>2] = 0;
   $117 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $117;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  $118 = HEAP32[$93>>2]|0;
  $119 = ((($118)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (FUNCTION_TABLE_ii[$120 & 511]($93)|0);
  HEAP8[$3>>0] = $121;
  $122 = HEAP32[$93>>2]|0;
  $123 = ((($122)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (FUNCTION_TABLE_ii[$124 & 511]($93)|0);
  HEAP8[$4>>0] = $125;
  $126 = HEAP32[$93>>2]|0;
  $127 = ((($126)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 511]($34,$93);
  $129 = ((($5)) + 11|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ($130<<24>>24)<(0);
  if ($131) {
   $132 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($132,$12);
   $133 = ((($5)) + 4|0);
   HEAP32[$133>>2] = 0;
   $$pre$phi$i$i69Z2D = $5;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$129>>0] = 0;
   $$pre$phi$i$i69Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i69Z2D>>2]=HEAP32[$34>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $134 = (($34) + ($$0$i$i$i71<<2)|0);
   HEAP32[$134>>2] = 0;
   $135 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $135;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $136 = HEAP32[$93>>2]|0;
  $137 = ((($136)) + 24|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 511]($35,$93);
  $139 = ((($6)) + 11|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ($140<<24>>24)<(0);
  if ($141) {
   $142 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($142,$10);
   $143 = ((($6)) + 4|0);
   HEAP32[$143>>2] = 0;
   $$pre$phi$i$i75Z2D = $6;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$11);
   HEAP8[$139>>0] = 0;
   $$pre$phi$i$i75Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i75Z2D>>2]=HEAP32[$35>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i77 = 0;
  while(1) {
   $exitcond$i$i$i78 = ($$0$i$i$i77|0)==(3);
   if ($exitcond$i$i$i78) {
    break;
   }
   $144 = (($35) + ($$0$i$i$i77<<2)|0);
   HEAP32[$144>>2] = 0;
   $145 = (($$0$i$i$i77) + 1)|0;
   $$0$i$i$i77 = $145;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
  $146 = HEAP32[$93>>2]|0;
  $147 = ((($146)) + 36|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (FUNCTION_TABLE_ii[$148 & 511]($93)|0);
  $storemerge = $149;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(347|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 1 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = $7;
 $14 = (($12) - ($7))|0;
 $15 = $5 ? $13 : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $23 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $23 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 511]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $23 = $$pre;
  }
 }
 HEAP32[$3>>2] = (348);
 $22 = (($23) + ($14)|0);
 HEAP32[$1>>2] = $22;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$2>>2] = $25;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(347|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $24 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $24 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 511]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $24 = $$pre;
  }
 }
 HEAP32[$3>>2] = (348);
 $22 = $$ >>> 2;
 $23 = (($24) + ($14<<2)|0);
 HEAP32[$1>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$2>>2] = $26;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$027$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $7 = sp + 72|0;
 $8 = sp + 64|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 576|0;
 $12 = sp + 48|0;
 $13 = sp + 8|0;
 $14 = sp + 476|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (347);
 $17 = ((($7)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,20588)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$17)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 511]($18,16586,(16596),$13)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(392);
  $30 = $27;
  $31 = $26;
  if ($29) {
   $32 = $28 >>> 2;
   $33 = (($32) + 2)|0;
   $34 = (_malloc($33)|0);
   $35 = $34;
   $36 = ($34|0)==(0|0);
   if ($36) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $$025 = $34;$$sroa$027$0 = $35;
   }
  } else {
   $$025 = $14;$$sroa$027$0 = 0;
  }
  $37 = HEAP8[$11>>0]|0;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $$1 = $$025;
  } else {
   $39 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $39;
  }
  $40 = ((($13)) + 40|0);
  $41 = $13;
  $$0 = $30;$$2 = $$1;$43 = $31;
  while(1) {
   $42 = ($$0>>>0)<($43>>>0);
   if (!($42)) {
    break;
   }
   $46 = HEAP32[$$0>>2]|0;
   $$0$i = $13;
   while(1) {
    $47 = ($$0$i|0)==($40|0);
    if ($47) {
     $$0$lcssa$i = $40;
     break;
    }
    $48 = HEAP32[$$0$i>>2]|0;
    $49 = ($48|0)==($46|0);
    if ($49) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $50 = ((($$0$i)) + 4|0);
    $$0$i = $50;
   }
   $51 = $$0$lcssa$i;
   $52 = (($51) - ($41))|0;
   $53 = $52 >> 2;
   $54 = (16586 + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   HEAP8[$$2>>0] = $55;
   $56 = ((($$0)) + 4|0);
   $57 = ((($$2)) + 1|0);
   $$pre = HEAP32[$9>>2]|0;
   $$0 = $56;$$2 = $57;$43 = $$pre;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  $44 = (_sscanf($14,16487,$vararg_buffer)|0);
  $45 = ($44|0)==(1);
  if (!($45)) {
   __ZNSt3__221__throw_runtime_errorEPKc(0);
   // unreachable;
  }
  $58 = ($$sroa$027$0|0)==(0);
  if (!($58)) {
   $59 = $$sroa$027$0;
   _free($59);
  }
 }
 $60 = HEAP32[$1>>2]|0;
 $61 = ($60|0)==(0|0);
 do {
  if ($61) {
   $95 = 1;
  } else {
   $62 = ((($60)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($60)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   if ($66) {
    $67 = HEAP32[$60>>2]|0;
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (FUNCTION_TABLE_ii[$69 & 511]($60)|0);
    $$0$i$i$i$i = $70;
   } else {
    $71 = HEAP32[$63>>2]|0;
    $72 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
    $$0$i$i$i$i = $72;
   }
   $73 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $74 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$73)|0);
   if ($74) {
    HEAP32[$1>>2] = 0;
    $95 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $95 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $75 = HEAP32[$2>>2]|0;
 $76 = ($75|0)==(0|0);
 do {
  if ($76) {
   label = 32;
  } else {
   $77 = ((($75)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($75)) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($78|0)==($80|0);
   if ($81) {
    $82 = HEAP32[$75>>2]|0;
    $83 = ((($82)) + 36|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (FUNCTION_TABLE_ii[$84 & 511]($75)|0);
    $$0$i$i2$i$i = $85;
   } else {
    $86 = HEAP32[$78>>2]|0;
    $87 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($86)|0);
    $$0$i$i2$i$i = $87;
   }
   $88 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $89 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$88)|0);
   if ($89) {
    HEAP32[$2>>2] = 0;
    label = 32;
    break;
   } else {
    if ($95) {
     break;
    } else {
     label = 34;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($95) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $90 = HEAP32[$5>>2]|0;
  $91 = $90 | 2;
  HEAP32[$5>>2] = $91;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($10);
 $92 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  $94 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$94 & 511]($92);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $$byval_copy = sp + 432|0;
 $7 = sp + 428|0;
 $8 = sp + 424|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp + 436|0;
 $14 = sp;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (347);
 $17 = ((($9)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($12,$4);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($12,20588)|0);
 HEAP8[$13>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$14>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
 $22 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$12,$21,$5,$13,$18,$10,$11,$17)|0);
 $23 = $19;
 if ($22) {
  $24 = ((($6)) + 8|0);
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = HEAP32[$6>>2]|0;
   HEAP32[$7>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($28,$7);
   $29 = ((($6)) + 4|0);
   HEAP32[$29>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$8);
   HEAP8[$25>>0] = 0;
  }
  $30 = HEAP8[$13>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if (!($31)) {
   $32 = HEAP32[$18>>2]|0;
   $33 = ((($32)) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iii[$34 & 511]($18,45)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($6,$35);
  }
  $36 = HEAP32[$18>>2]|0;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iii[$38 & 511]($18,48)|0);
  $40 = HEAP32[$10>>2]|0;
  $41 = HEAP32[$11>>2]|0;
  $42 = ((($41)) + -4|0);
  $$0 = $40;
  while(1) {
   $43 = ($$0>>>0)<($42>>>0);
   if (!($43)) {
    break;
   }
   $44 = HEAP32[$$0>>2]|0;
   $45 = ($44|0)==($39|0);
   if (!($45)) {
    break;
   }
   $46 = ((($$0)) + 4|0);
   $$0 = $46;
  }
  (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($6,$$0,$41)|0);
 }
 $47 = HEAP32[$1>>2]|0;
 $48 = ($47|0)==(0|0);
 do {
  if ($48) {
   $82 = 1;
  } else {
   $49 = ((($47)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($47)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $54 = HEAP32[$47>>2]|0;
    $55 = ((($54)) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (FUNCTION_TABLE_ii[$56 & 511]($47)|0);
    $$0$i$i$i$i = $57;
   } else {
    $58 = HEAP32[$50>>2]|0;
    $59 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($58)|0);
    $$0$i$i$i$i = $59;
   }
   $60 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $61 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$60)|0);
   if ($61) {
    HEAP32[$1>>2] = 0;
    $82 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $82 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $62 = ($19|0)==(0);
 do {
  if ($62) {
   label = 25;
  } else {
   $63 = ((($23)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($23)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if ($67) {
    $68 = $19;
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 511]($23)|0);
    $$0$i$i2$i$i = $72;
   } else {
    $73 = HEAP32[$64>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i2$i$i = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$75)|0);
   if ($76) {
    HEAP32[$2>>2] = 0;
    label = 25;
    break;
   } else {
    if ($82) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($82) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $77 = HEAP32[$5>>2]|0;
  $78 = $77 | 2;
  HEAP32[$5>>2] = $78;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__26localeD2Ev($12);
 $79 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$81 & 511]($79);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0131 = 0, $$$0131141 = 0, $$$0131142 = 0, $$$0131143 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i163 = 0, $$0$i$i$i$i208 = 0, $$0$i$i$i$i221 = 0, $$0$i$i$i$i237 = 0, $$0$i$i$i$i252 = 0, $$0$i$i$i$i267 = 0, $$0$i$i150 = 0, $$0$i$i152 = 0, $$0$i$i155 = 0, $$0$i$i158 = 0, $$0$i$i161 = 0, $$0$i$i162 = 0, $$0$i$i175 = 0;
 var $$0$i$i177 = 0, $$0$i$i183 = 0, $$0$i$i190 = 0, $$0$i$i195 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i169 = 0, $$0$i$i2$i$i214 = 0, $$0$i$i2$i$i227 = 0, $$0$i$i2$i$i243 = 0, $$0$i$i2$i$i258 = 0, $$0$i$i2$i$i273 = 0, $$0$i$i204 = 0, $$0$i$i233 = 0, $$0$i$i249 = 0, $$0$i$i264 = 0, $$0$i$i279 = 0, $$0$i$i281 = 0, $$0126 = 0, $$0131 = 0, $$0133 = 0;
 var $$10 = 0, $$1132 = 0, $$2128$ph = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i165 = 0, $$pre$i$i$i210 = 0, $$pre$i$i$i223 = 0, $$pre$i$i$i239 = 0, $$pre$i$i$i254 = 0, $$pre$i$i$i269 = 0, $$pre$i4$i$i171 = 0, $$pre$i4$i$i171371 = 0, $$pre$i4$i$i171373 = 0, $$pre$i4$i$i229 = 0, $$pre$i4$i$i229368 = 0, $$pre$i4$i$i229369 = 0, $$pre$i4$i$i245 = 0, $$pre$i4$i$i245355 = 0;
 var $$pre$i4$i$i245357 = 0, $$pre$i4$i$i260 = 0, $$pre$i4$i$i275 = 0, $$pre$i4$i$i275360$ph = 0, $$pre$i4$i$i275360374 = 0, $$pre358 = 0, $$pre359 = 0, $$pre362 = 0, $$pre363 = 0, $$pre364 = 0, $$pre365 = 0, $$pre366 = 0, $$pre367 = 0, $$sink = 0, $$sink389 = 0, $$sroa$0290$0 = 0, $$sroa$0310$0 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond148 = 0, $exitcond$i$i = 0, $exitcond$i$i151 = 0, $exitcond$i$i153 = 0, $exitcond$i$i156 = 0, $exitcond$i$i159 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond145 = 0, $or$cond15 = 0, $or$cond388 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i166 = 0, $phitmp$i$i$i211 = 0, $phitmp$i$i$i224 = 0, $phitmp$i$i$i240 = 0;
 var $phitmp$i$i$i255 = 0, $phitmp$i$i$i270 = 0, $phitmp$i5$i$i172 = 0, $phitmp$i5$i$i230 = 0, $phitmp$i5$i$i246 = 0, $phitmp$i5$i$i276 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 496|0;
 $12 = sp + 96|0;
 $13 = sp + 88|0;
 $14 = sp + 80|0;
 $15 = sp + 76|0;
 $16 = sp + 500|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (347);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i150 = 0;
 while(1) {
  $exitcond$i$i151 = ($$0$i$i150|0)==(3);
  if ($exitcond$i$i151) {
   break;
  }
  $31 = (($20) + ($$0$i$i150<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i150) + 1)|0;
  $$0$i$i150 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i152 = 0;
 while(1) {
  $exitcond$i$i153 = ($$0$i$i152|0)==(3);
  if ($exitcond$i$i153) {
   break;
  }
  $33 = (($21) + ($$0$i$i152<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i152) + 1)|0;
  $$0$i$i152 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i155 = 0;
 while(1) {
  $exitcond$i$i156 = ($$0$i$i155|0)==(3);
  if ($exitcond$i$i156) {
   break;
  }
  $35 = (($22) + ($$0$i$i155<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i155) + 1)|0;
  $$0$i$i155 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i158 = 0;
 while(1) {
  $exitcond$i$i159 = ($$0$i$i158|0)==(3);
  if ($exitcond$i$i159) {
   break;
  }
  $37 = (($23) + ($$0$i$i158<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i158) + 1)|0;
  $$0$i$i158 = $38;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($21)) + 8|0);
 $41 = ((($40)) + 3|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 8|0);
 $44 = ((($43)) + 3|0);
 $45 = ((($22)) + 4|0);
 $46 = $4 & 512;
 $47 = ($46|0)!=(0);
 $48 = ((($20)) + 8|0);
 $49 = ((($48)) + 3|0);
 $50 = ((($20)) + 4|0);
 $51 = ((($23)) + 8|0);
 $52 = ((($51)) + 3|0);
 $53 = ((($23)) + 4|0);
 $54 = ((($16)) + 3|0);
 $55 = ((($19)) + 11|0);
 $56 = ((($19)) + 4|0);
 $$0131 = 0;$$0133 = 0;
 L21: while(1) {
  $57 = ($$0133>>>0)<(4);
  if (!($57)) {
   label = 229;
   break;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ($58|0)==(0|0);
  do {
   if ($59) {
    $768 = 1;
   } else {
    $60 = ((($58)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($58)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($61|0)==($63|0);
    if ($64) {
     $65 = HEAP32[$58>>2]|0;
     $66 = ((($65)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_ii[$67 & 511]($58)|0);
     $$0$i$i$i$i = $68;
    } else {
     $69 = HEAP32[$61>>2]|0;
     $70 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
     $$0$i$i$i$i = $70;
    }
    $71 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $72 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$71)|0);
    if ($72) {
     HEAP32[$0>>2] = 0;
     $768 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $768 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $73 = HEAP32[$1>>2]|0;
  $74 = ($73|0)==(0|0);
  do {
   if ($74) {
    label = 31;
   } else {
    $75 = ((($73)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($73)) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$73>>2]|0;
     $81 = ((($80)) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 511]($73)|0);
     $$0$i$i2$i$i = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $85 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($84)|0);
     $$0$i$i2$i$i = $85;
    }
    $86 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $87 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$86)|0);
    if ($87) {
     HEAP32[$1>>2] = 0;
     label = 31;
     break;
    } else {
     if ($768) {
      $769 = $73;
      break;
     } else {
      label = 229;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($768) {
    label = 229;
    break;
   } else {
    $769 = 0;
   }
  }
  $88 = (($16) + ($$0133)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89 << 24 >> 24;
  L46: do {
   switch ($90|0) {
   case 1:  {
    $cond148 = ($$0133|0)==(3);
    if ($cond148) {
     $$1132 = $$0131;
    } else {
     $91 = HEAP32[$0>>2]|0;
     $92 = ((($91)) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($91)) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($93|0)==($95|0);
     if ($96) {
      $97 = HEAP32[$91>>2]|0;
      $98 = ((($97)) + 36|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_ii[$99 & 511]($91)|0);
      $$0$i$i161 = $100;
     } else {
      $101 = HEAP32[$93>>2]|0;
      $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
      $$0$i$i161 = $102;
     }
     $103 = HEAP32[$7>>2]|0;
     $104 = ((($103)) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (FUNCTION_TABLE_iiii[$105 & 511]($7,8192,$$0$i$i161)|0);
     if (!($106)) {
      label = 43;
      break L21;
     }
     $107 = HEAP32[$0>>2]|0;
     $108 = ((($107)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($107)) + 16|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($109|0)==($111|0);
     if ($112) {
      $113 = HEAP32[$107>>2]|0;
      $114 = ((($113)) + 40|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (FUNCTION_TABLE_ii[$115 & 511]($107)|0);
      $$0$i$i162 = $116;
     } else {
      $117 = ((($109)) + 4|0);
      HEAP32[$108>>2] = $117;
      $118 = HEAP32[$109>>2]|0;
      $119 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($118)|0);
      $$0$i$i162 = $119;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i162);
     $$pre$i4$i$i171 = $769;$138 = $769;
     label = 45;
    }
    break;
   }
   case 0:  {
    $122 = ($$0133|0)==(3);
    if ($122) {
     $$1132 = $$0131;
    } else {
     $$pre$i4$i$i171 = $769;$138 = $769;
     label = 45;
    }
    break;
   }
   case 3:  {
    $184 = HEAP8[$41>>0]|0;
    $185 = ($184<<24>>24)<(0);
    $186 = HEAP32[$42>>2]|0;
    $187 = $184&255;
    $188 = $185 ? $186 : $187;
    $189 = HEAP8[$44>>0]|0;
    $190 = ($189<<24>>24)<(0);
    $191 = HEAP32[$45>>2]|0;
    $192 = $189&255;
    $193 = $190 ? $191 : $192;
    $194 = (0 - ($193))|0;
    $195 = ($188|0)==($194|0);
    if ($195) {
     $$1132 = $$0131;
    } else {
     $196 = ($188|0)==(0);
     $197 = ($193|0)==(0);
     $or$cond388 = $196 | $197;
     $198 = HEAP32[$0>>2]|0;
     $199 = ((($198)) + 12|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ((($198)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($200|0)==($202|0);
     if ($or$cond388) {
      if ($203) {
       $204 = HEAP32[$198>>2]|0;
       $205 = ((($204)) + 36|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (FUNCTION_TABLE_ii[$206 & 511]($198)|0);
       $$0$i$i183 = $207;
      } else {
       $208 = HEAP32[$200>>2]|0;
       $209 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($208)|0);
       $$0$i$i183 = $209;
      }
      if ($196) {
       $233 = HEAP8[$44>>0]|0;
       $234 = ($233<<24>>24)<(0);
       $235 = HEAP32[$22>>2]|0;
       $236 = $234 ? $235 : $22;
       $237 = HEAP32[$236>>2]|0;
       $238 = ($$0$i$i183|0)==($237|0);
       if (!($238)) {
        $$1132 = $$0131;
        break L46;
       }
       $239 = HEAP32[$0>>2]|0;
       $240 = ((($239)) + 12|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ((($239)) + 16|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ($241|0)==($243|0);
       if ($244) {
        $245 = HEAP32[$239>>2]|0;
        $246 = ((($245)) + 40|0);
        $247 = HEAP32[$246>>2]|0;
        (FUNCTION_TABLE_ii[$247 & 511]($239)|0);
       } else {
        $248 = ((($241)) + 4|0);
        HEAP32[$240>>2] = $248;
        $249 = HEAP32[$241>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($249)|0);
       }
       HEAP8[$6>>0] = 1;
       $250 = HEAP8[$44>>0]|0;
       $251 = ($250<<24>>24)<(0);
       $252 = HEAP32[$45>>2]|0;
       $253 = $250&255;
       $254 = $251 ? $252 : $253;
       $255 = ($254>>>0)>(1);
       $$$0131141 = $255 ? $22 : $$0131;
       $$1132 = $$$0131141;
       break L46;
      }
      $210 = HEAP8[$41>>0]|0;
      $211 = ($210<<24>>24)<(0);
      $212 = HEAP32[$21>>2]|0;
      $213 = $211 ? $212 : $21;
      $214 = HEAP32[$213>>2]|0;
      $215 = ($$0$i$i183|0)==($214|0);
      if (!($215)) {
       HEAP8[$6>>0] = 1;
       $$1132 = $$0131;
       break L46;
      }
      $216 = HEAP32[$0>>2]|0;
      $217 = ((($216)) + 12|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ((($216)) + 16|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($218|0)==($220|0);
      if ($221) {
       $222 = HEAP32[$216>>2]|0;
       $223 = ((($222)) + 40|0);
       $224 = HEAP32[$223>>2]|0;
       (FUNCTION_TABLE_ii[$224 & 511]($216)|0);
      } else {
       $225 = ((($218)) + 4|0);
       HEAP32[$217>>2] = $225;
       $226 = HEAP32[$218>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($226)|0);
      }
      $227 = HEAP8[$41>>0]|0;
      $228 = ($227<<24>>24)<(0);
      $229 = HEAP32[$42>>2]|0;
      $230 = $227&255;
      $231 = $228 ? $229 : $230;
      $232 = ($231>>>0)>(1);
      $$$0131 = $232 ? $21 : $$0131;
      $$1132 = $$$0131;
      break L46;
     }
     if ($203) {
      $256 = HEAP32[$198>>2]|0;
      $257 = ((($256)) + 36|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = (FUNCTION_TABLE_ii[$258 & 511]($198)|0);
      $$0$i$i190 = $259;
     } else {
      $260 = HEAP32[$200>>2]|0;
      $261 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($260)|0);
      $$0$i$i190 = $261;
     }
     $262 = HEAP8[$41>>0]|0;
     $263 = ($262<<24>>24)<(0);
     $264 = HEAP32[$21>>2]|0;
     $265 = $263 ? $264 : $21;
     $266 = HEAP32[$265>>2]|0;
     $267 = ($$0$i$i190|0)==($266|0);
     $268 = HEAP32[$0>>2]|0;
     $269 = ((($268)) + 12|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ((($268)) + 16|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ($270|0)==($272|0);
     if ($267) {
      if ($273) {
       $274 = HEAP32[$268>>2]|0;
       $275 = ((($274)) + 40|0);
       $276 = HEAP32[$275>>2]|0;
       (FUNCTION_TABLE_ii[$276 & 511]($268)|0);
      } else {
       $277 = ((($270)) + 4|0);
       HEAP32[$269>>2] = $277;
       $278 = HEAP32[$270>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($278)|0);
      }
      $279 = HEAP8[$41>>0]|0;
      $280 = ($279<<24>>24)<(0);
      $281 = HEAP32[$42>>2]|0;
      $282 = $279&255;
      $283 = $280 ? $281 : $282;
      $284 = ($283>>>0)>(1);
      $$$0131142 = $284 ? $21 : $$0131;
      $$1132 = $$$0131142;
      break L46;
     }
     if ($273) {
      $285 = HEAP32[$268>>2]|0;
      $286 = ((($285)) + 36|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = (FUNCTION_TABLE_ii[$287 & 511]($268)|0);
      $$0$i$i195 = $288;
     } else {
      $289 = HEAP32[$270>>2]|0;
      $290 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($289)|0);
      $$0$i$i195 = $290;
     }
     $291 = HEAP8[$44>>0]|0;
     $292 = ($291<<24>>24)<(0);
     $293 = HEAP32[$22>>2]|0;
     $294 = $292 ? $293 : $22;
     $295 = HEAP32[$294>>2]|0;
     $296 = ($$0$i$i195|0)==($295|0);
     if (!($296)) {
      label = 101;
      break L21;
     }
     $297 = HEAP32[$0>>2]|0;
     $298 = ((($297)) + 12|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = ((($297)) + 16|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = ($299|0)==($301|0);
     if ($302) {
      $303 = HEAP32[$297>>2]|0;
      $304 = ((($303)) + 40|0);
      $305 = HEAP32[$304>>2]|0;
      (FUNCTION_TABLE_ii[$305 & 511]($297)|0);
     } else {
      $306 = ((($299)) + 4|0);
      HEAP32[$298>>2] = $306;
      $307 = HEAP32[$299>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($307)|0);
     }
     HEAP8[$6>>0] = 1;
     $308 = HEAP8[$44>>0]|0;
     $309 = ($308<<24>>24)<(0);
     $310 = HEAP32[$45>>2]|0;
     $311 = $308&255;
     $312 = $309 ? $310 : $311;
     $313 = ($312>>>0)>(1);
     $$$0131143 = $313 ? $22 : $$0131;
     $$1132 = $$$0131143;
    }
    break;
   }
   case 2:  {
    $316 = ($$0131|0)!=(0|0);
    $317 = ($$0133>>>0)<(2);
    $or$cond = $317 | $316;
    if (!($or$cond)) {
     $318 = ($$0133|0)==(2);
     $319 = HEAP8[$54>>0]|0;
     $320 = ($319<<24>>24)!=(0);
     $321 = $318 & $320;
     $brmerge = $47 | $321;
     if (!($brmerge)) {
      $$1132 = 0;
      break L46;
     }
    }
    $322 = HEAP8[$49>>0]|0;
    $323 = ($322<<24>>24)<(0);
    $324 = HEAP32[$20>>2]|0;
    $325 = $323 ? $324 : $20;
    $326 = $325;
    $327 = ($$0133|0)==(0);
    L107: do {
     if ($327) {
      $$pre$i4$i$i229 = $769;$$sroa$0290$0 = $326;$376 = $322;$380 = $324;$401 = $769;
     } else {
      $328 = (($$0133) + -1)|0;
      $329 = (($16) + ($328)|0);
      $330 = HEAP8[$329>>0]|0;
      $switch = ($330&255)<(2);
      if ($switch) {
       $$sroa$0310$0 = $326;$331 = $322;$335 = $324;
       while(1) {
        $332 = ($331<<24>>24)<(0);
        $333 = HEAP32[$50>>2]|0;
        $334 = $331&255;
        $336 = $332 ? $335 : $20;
        $337 = $332 ? $333 : $334;
        $338 = (($336) + ($337<<2)|0);
        $339 = $$sroa$0310$0;
        $340 = ($338|0)==($339|0);
        if ($340) {
         $348 = $331;$350 = $335;
         break;
        }
        $341 = HEAP32[$339>>2]|0;
        $342 = HEAP32[$7>>2]|0;
        $343 = ((($342)) + 12|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = (FUNCTION_TABLE_iiii[$344 & 511]($7,8192,$341)|0);
        if (!($345)) {
         label = 108;
         break;
        }
        $346 = ((($339)) + 4|0);
        $347 = $346;
        $$pre362 = HEAP8[$49>>0]|0;
        $$pre363 = HEAP32[$20>>2]|0;
        $$sroa$0310$0 = $347;$331 = $$pre362;$335 = $$pre363;
       }
       if ((label|0) == 108) {
        label = 0;
        $$pre364 = HEAP8[$49>>0]|0;
        $$pre365 = HEAP32[$20>>2]|0;
        $348 = $$pre364;$350 = $$pre365;
       }
       $349 = ($348<<24>>24)<(0);
       $351 = $349 ? $350 : $20;
       $352 = $351;
       $353 = (($$sroa$0310$0) - ($352))|0;
       $354 = $353 >> 2;
       $355 = HEAP8[$52>>0]|0;
       $356 = ($355<<24>>24)<(0);
       $357 = HEAP32[$53>>2]|0;
       $358 = $355&255;
       $359 = $356 ? $357 : $358;
       $360 = ($354>>>0)>($359>>>0);
       if ($360) {
        $$pre$i4$i$i229 = $769;$$sroa$0290$0 = $352;$376 = $348;$380 = $350;$401 = $769;
       } else {
        $361 = HEAP32[$23>>2]|0;
        $362 = (($361) + ($357<<2)|0);
        $363 = (($23) + ($358<<2)|0);
        $$sink389 = $356 ? $362 : $363;
        $364 = $356 ? $361 : $23;
        $365 = $356 ? $357 : $358;
        $366 = (0 - ($354))|0;
        $367 = (($$sink389) + ($366<<2)|0);
        $368 = (($364) + ($365<<2)|0);
        $$sink = $351;$369 = $367;
        while(1) {
         $370 = ($369|0)==($368|0);
         if ($370) {
          $$pre$i4$i$i229 = $769;$$sroa$0290$0 = $$sroa$0310$0;$376 = $348;$380 = $350;$401 = $769;
          break L107;
         }
         $371 = HEAP32[$369>>2]|0;
         $372 = HEAP32[$$sink>>2]|0;
         $373 = ($371|0)==($372|0);
         if (!($373)) {
          $$pre$i4$i$i229 = $769;$$sroa$0290$0 = $352;$376 = $348;$380 = $350;$401 = $769;
          break L107;
         }
         $374 = ((($369)) + 4|0);
         $375 = ((($$sink)) + 4|0);
         $$sink = $375;$369 = $374;
        }
       }
      } else {
       $$pre$i4$i$i229 = $769;$$sroa$0290$0 = $326;$376 = $322;$380 = $324;$401 = $769;
      }
     }
    } while(0);
    L121: while(1) {
     $377 = ($376<<24>>24)<(0);
     $378 = HEAP32[$50>>2]|0;
     $379 = $376&255;
     $381 = $377 ? $380 : $20;
     $382 = $377 ? $378 : $379;
     $383 = (($381) + ($382<<2)|0);
     $384 = $$sroa$0290$0;
     $385 = ($383|0)==($384|0);
     if ($385) {
      $$lcssa = $383;
      break;
     }
     $386 = HEAP32[$0>>2]|0;
     $387 = ($386|0)==(0|0);
     do {
      if ($387) {
       $417 = 1;
      } else {
       $388 = ((($386)) + 12|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = ((($386)) + 16|0);
       $391 = HEAP32[$390>>2]|0;
       $392 = ($389|0)==($391|0);
       if ($392) {
        $393 = HEAP32[$386>>2]|0;
        $394 = ((($393)) + 36|0);
        $395 = HEAP32[$394>>2]|0;
        $396 = (FUNCTION_TABLE_ii[$395 & 511]($386)|0);
        $$0$i$i$i$i221 = $396;
       } else {
        $397 = HEAP32[$389>>2]|0;
        $398 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($397)|0);
        $$0$i$i$i$i221 = $398;
       }
       $399 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $400 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i221,$399)|0);
       if ($400) {
        HEAP32[$0>>2] = 0;
        $417 = 1;
        break;
       } else {
        $$pre$i$i$i223 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i224 = ($$pre$i$i$i223|0)==(0|0);
        $417 = $phitmp$i$i$i224;
        break;
       }
      }
     } while(0);
     $402 = ($401|0)==(0|0);
     do {
      if ($402) {
       $$pre$i4$i$i229369 = $$pre$i4$i$i229;
       label = 129;
      } else {
       $403 = ((($401)) + 12|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = ((($401)) + 16|0);
       $406 = HEAP32[$405>>2]|0;
       $407 = ($404|0)==($406|0);
       if ($407) {
        $408 = HEAP32[$401>>2]|0;
        $409 = ((($408)) + 36|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = (FUNCTION_TABLE_ii[$410 & 511]($401)|0);
        $$0$i$i2$i$i227 = $411;
       } else {
        $412 = HEAP32[$404>>2]|0;
        $413 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($412)|0);
        $$0$i$i2$i$i227 = $413;
       }
       $414 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $415 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i227,$414)|0);
       if ($415) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i229369 = 0;
        label = 129;
        break;
       } else {
        $phitmp$i5$i$i230 = ($$pre$i4$i$i229|0)==(0|0);
        $416 = $417 ^ $phitmp$i5$i$i230;
        if ($416) {
         $$pre$i4$i$i229368 = $$pre$i4$i$i229;$771 = $$pre$i4$i$i229;
         break;
        } else {
         $$lcssa = $384;
         break L121;
        }
       }
      }
     } while(0);
     if ((label|0) == 129) {
      label = 0;
      if ($417) {
       $$lcssa = $384;
       break;
      } else {
       $$pre$i4$i$i229368 = $$pre$i4$i$i229369;$771 = 0;
      }
     }
     $418 = HEAP32[$0>>2]|0;
     $419 = ((($418)) + 12|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ((($418)) + 16|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($420|0)==($422|0);
     if ($423) {
      $424 = HEAP32[$418>>2]|0;
      $425 = ((($424)) + 36|0);
      $426 = HEAP32[$425>>2]|0;
      $427 = (FUNCTION_TABLE_ii[$426 & 511]($418)|0);
      $$0$i$i233 = $427;
     } else {
      $428 = HEAP32[$420>>2]|0;
      $429 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($428)|0);
      $$0$i$i233 = $429;
     }
     $430 = HEAP32[$384>>2]|0;
     $431 = ($$0$i$i233|0)==($430|0);
     if (!($431)) {
      $$lcssa = $384;
      break;
     }
     $432 = HEAP32[$0>>2]|0;
     $433 = ((($432)) + 12|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ((($432)) + 16|0);
     $436 = HEAP32[$435>>2]|0;
     $437 = ($434|0)==($436|0);
     if ($437) {
      $438 = HEAP32[$432>>2]|0;
      $439 = ((($438)) + 40|0);
      $440 = HEAP32[$439>>2]|0;
      (FUNCTION_TABLE_ii[$440 & 511]($432)|0);
     } else {
      $441 = ((($434)) + 4|0);
      HEAP32[$433>>2] = $441;
      $442 = HEAP32[$434>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($442)|0);
     }
     $443 = ((($384)) + 4|0);
     $444 = $443;
     $$pre366 = HEAP8[$49>>0]|0;
     $$pre367 = HEAP32[$20>>2]|0;
     $$pre$i4$i$i229 = $$pre$i4$i$i229368;$$sroa$0290$0 = $444;$376 = $$pre366;$380 = $$pre367;$401 = $771;
    }
    if ($47) {
     $445 = HEAP8[$49>>0]|0;
     $446 = ($445<<24>>24)<(0);
     $447 = HEAP32[$20>>2]|0;
     $448 = HEAP32[$50>>2]|0;
     $449 = $445&255;
     $450 = $446 ? $447 : $20;
     $451 = $446 ? $448 : $449;
     $452 = (($450) + ($451<<2)|0);
     $453 = ($452|0)==($$lcssa|0);
     if ($453) {
      $$1132 = $$0131;
     } else {
      label = 141;
      break L21;
     }
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   case 4:  {
    $$0126 = 0;$$pre$i4$i$i245 = $769;$471 = $769;
    L157: while(1) {
     $456 = HEAP32[$0>>2]|0;
     $457 = ($456|0)==(0|0);
     do {
      if ($457) {
       $487 = 1;
      } else {
       $458 = ((($456)) + 12|0);
       $459 = HEAP32[$458>>2]|0;
       $460 = ((($456)) + 16|0);
       $461 = HEAP32[$460>>2]|0;
       $462 = ($459|0)==($461|0);
       if ($462) {
        $463 = HEAP32[$456>>2]|0;
        $464 = ((($463)) + 36|0);
        $465 = HEAP32[$464>>2]|0;
        $466 = (FUNCTION_TABLE_ii[$465 & 511]($456)|0);
        $$0$i$i$i$i237 = $466;
       } else {
        $467 = HEAP32[$459>>2]|0;
        $468 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($467)|0);
        $$0$i$i$i$i237 = $468;
       }
       $469 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $470 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i237,$469)|0);
       if ($470) {
        HEAP32[$0>>2] = 0;
        $487 = 1;
        break;
       } else {
        $$pre$i$i$i239 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i240 = ($$pre$i$i$i239|0)==(0|0);
        $487 = $phitmp$i$i$i240;
        break;
       }
      }
     } while(0);
     $472 = ($471|0)==(0|0);
     do {
      if ($472) {
       $$pre$i4$i$i245355 = $$pre$i4$i$i245;
       label = 155;
      } else {
       $473 = ((($471)) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = ((($471)) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$471>>2]|0;
        $479 = ((($478)) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        $481 = (FUNCTION_TABLE_ii[$480 & 511]($471)|0);
        $$0$i$i2$i$i243 = $481;
       } else {
        $482 = HEAP32[$474>>2]|0;
        $483 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($482)|0);
        $$0$i$i2$i$i243 = $483;
       }
       $484 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $485 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i243,$484)|0);
       if ($485) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i245355 = 0;
        label = 155;
        break;
       } else {
        $phitmp$i5$i$i246 = ($$pre$i4$i$i245|0)==(0|0);
        $486 = $487 ^ $phitmp$i5$i$i246;
        if ($486) {
         $$pre$i4$i$i245357 = $$pre$i4$i$i245;$772 = $$pre$i4$i$i245;
         break;
        } else {
         $$pre$i4$i$i260 = $$pre$i4$i$i245;
         break L157;
        }
       }
      }
     } while(0);
     if ((label|0) == 155) {
      label = 0;
      if ($487) {
       $$pre$i4$i$i260 = $$pre$i4$i$i245355;
       break;
      } else {
       $$pre$i4$i$i245357 = $$pre$i4$i$i245355;$772 = 0;
      }
     }
     $488 = HEAP32[$0>>2]|0;
     $489 = ((($488)) + 12|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = ((($488)) + 16|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ($490|0)==($492|0);
     if ($493) {
      $494 = HEAP32[$488>>2]|0;
      $495 = ((($494)) + 36|0);
      $496 = HEAP32[$495>>2]|0;
      $497 = (FUNCTION_TABLE_ii[$496 & 511]($488)|0);
      $$0$i$i249 = $497;
     } else {
      $498 = HEAP32[$490>>2]|0;
      $499 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($498)|0);
      $$0$i$i249 = $499;
     }
     $500 = HEAP32[$7>>2]|0;
     $501 = ((($500)) + 12|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = (FUNCTION_TABLE_iiii[$502 & 511]($7,2048,$$0$i$i249)|0);
     if ($503) {
      $504 = HEAP32[$9>>2]|0;
      $505 = HEAP32[$11>>2]|0;
      $506 = ($504|0)==($505|0);
      if ($506) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       $$pre358 = HEAP32[$9>>2]|0;
       $508 = $$pre358;
      } else {
       $508 = $504;
      }
      $507 = ((($508)) + 4|0);
      HEAP32[$9>>2] = $507;
      HEAP32[$508>>2] = $$0$i$i249;
      $509 = (($$0126) + 1)|0;
      $$2128$ph = $509;
     } else {
      $510 = HEAP8[$55>>0]|0;
      $511 = ($510<<24>>24)<(0);
      $512 = HEAP32[$56>>2]|0;
      $513 = $510&255;
      $514 = $511 ? $512 : $513;
      $515 = ($514|0)!=(0);
      $516 = ($$0126|0)!=(0);
      $or$cond13 = $516 & $515;
      $517 = HEAP32[$18>>2]|0;
      $518 = ($$0$i$i249|0)==($517|0);
      $or$cond145 = $518 & $or$cond13;
      if (!($or$cond145)) {
       $$pre$i4$i$i260 = $$pre$i4$i$i245357;
       break;
      }
      $519 = HEAP32[$14>>2]|0;
      $520 = HEAP32[$15>>2]|0;
      $521 = ($519|0)==($520|0);
      if ($521) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre = HEAP32[$14>>2]|0;
       $523 = $$pre;
      } else {
       $523 = $519;
      }
      $522 = ((($523)) + 4|0);
      HEAP32[$14>>2] = $522;
      HEAP32[$523>>2] = $$0126;
      $$2128$ph = 0;
     }
     $524 = HEAP32[$0>>2]|0;
     $525 = ((($524)) + 12|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = ((($524)) + 16|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ($526|0)==($528|0);
     if ($529) {
      $530 = HEAP32[$524>>2]|0;
      $531 = ((($530)) + 40|0);
      $532 = HEAP32[$531>>2]|0;
      (FUNCTION_TABLE_ii[$532 & 511]($524)|0);
      $$0126 = $$2128$ph;$$pre$i4$i$i245 = $$pre$i4$i$i245357;$471 = $772;
      continue;
     } else {
      $533 = ((($526)) + 4|0);
      HEAP32[$525>>2] = $533;
      $534 = HEAP32[$526>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($534)|0);
      $$0126 = $$2128$ph;$$pre$i4$i$i245 = $$pre$i4$i$i245357;$471 = $772;
      continue;
     }
    }
    $535 = HEAP32[$13>>2]|0;
    $536 = HEAP32[$14>>2]|0;
    $537 = ($535|0)!=($536|0);
    $538 = ($$0126|0)!=(0);
    $or$cond15 = $538 & $537;
    if ($or$cond15) {
     $539 = HEAP32[$15>>2]|0;
     $540 = ($536|0)==($539|0);
     if ($540) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre359 = HEAP32[$14>>2]|0;
      $542 = $$pre359;
     } else {
      $542 = $536;
     }
     $541 = ((($542)) + 4|0);
     HEAP32[$14>>2] = $541;
     HEAP32[$542>>2] = $$0126;
    }
    $543 = HEAP32[$24>>2]|0;
    $544 = ($543|0)>(0);
    L206: do {
     if ($544) {
      $545 = HEAP32[$0>>2]|0;
      $546 = ($545|0)==(0|0);
      do {
       if ($546) {
        $773 = 1;
       } else {
        $547 = ((($545)) + 12|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = ((($545)) + 16|0);
        $550 = HEAP32[$549>>2]|0;
        $551 = ($548|0)==($550|0);
        if ($551) {
         $552 = HEAP32[$545>>2]|0;
         $553 = ((($552)) + 36|0);
         $554 = HEAP32[$553>>2]|0;
         $555 = (FUNCTION_TABLE_ii[$554 & 511]($545)|0);
         $$0$i$i$i$i252 = $555;
        } else {
         $556 = HEAP32[$548>>2]|0;
         $557 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($556)|0);
         $$0$i$i$i$i252 = $557;
        }
        $558 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $559 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i252,$558)|0);
        if ($559) {
         HEAP32[$0>>2] = 0;
         $773 = 1;
         break;
        } else {
         $$pre$i$i$i254 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i255 = ($$pre$i$i$i254|0)==(0|0);
         $773 = $phitmp$i$i$i255;
         break;
        }
       }
      } while(0);
      $560 = ($$pre$i4$i$i260|0)==(0|0);
      do {
       if ($560) {
        label = 189;
       } else {
        $561 = ((($$pre$i4$i$i260)) + 12|0);
        $562 = HEAP32[$561>>2]|0;
        $563 = ((($$pre$i4$i$i260)) + 16|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = ($562|0)==($564|0);
        if ($565) {
         $566 = HEAP32[$$pre$i4$i$i260>>2]|0;
         $567 = ((($566)) + 36|0);
         $568 = HEAP32[$567>>2]|0;
         $569 = (FUNCTION_TABLE_ii[$568 & 511]($$pre$i4$i$i260)|0);
         $$0$i$i2$i$i258 = $569;
        } else {
         $570 = HEAP32[$562>>2]|0;
         $571 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($570)|0);
         $$0$i$i2$i$i258 = $571;
        }
        $572 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $573 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i258,$572)|0);
        if ($573) {
         HEAP32[$1>>2] = 0;
         label = 189;
         break;
        } else {
         if ($773) {
          $774 = $$pre$i4$i$i260;
          break;
         } else {
          label = 227;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 189) {
       label = 0;
       if ($773) {
        label = 227;
        break L21;
       } else {
        $774 = 0;
       }
      }
      $574 = HEAP32[$0>>2]|0;
      $575 = ((($574)) + 12|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = ((($574)) + 16|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = ($576|0)==($578|0);
      if ($579) {
       $580 = HEAP32[$574>>2]|0;
       $581 = ((($580)) + 36|0);
       $582 = HEAP32[$581>>2]|0;
       $583 = (FUNCTION_TABLE_ii[$582 & 511]($574)|0);
       $$0$i$i264 = $583;
      } else {
       $584 = HEAP32[$576>>2]|0;
       $585 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($584)|0);
       $$0$i$i264 = $585;
      }
      $586 = HEAP32[$17>>2]|0;
      $587 = ($$0$i$i264|0)==($586|0);
      if (!($587)) {
       label = 227;
       break L21;
      }
      $588 = HEAP32[$0>>2]|0;
      $589 = ((($588)) + 12|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = ((($588)) + 16|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = ($590|0)==($592|0);
      if ($593) {
       $594 = HEAP32[$588>>2]|0;
       $595 = ((($594)) + 40|0);
       $596 = HEAP32[$595>>2]|0;
       (FUNCTION_TABLE_ii[$596 & 511]($588)|0);
       $$pre$i4$i$i275 = $774;$616 = $774;
      } else {
       $597 = ((($590)) + 4|0);
       HEAP32[$589>>2] = $597;
       $598 = HEAP32[$590>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($598)|0);
       $$pre$i4$i$i275 = $774;$616 = $774;
      }
      while(1) {
       $599 = HEAP32[$24>>2]|0;
       $600 = ($599|0)>(0);
       if (!($600)) {
        break L206;
       }
       $601 = HEAP32[$0>>2]|0;
       $602 = ($601|0)==(0|0);
       do {
        if ($602) {
         $632 = 1;
        } else {
         $603 = ((($601)) + 12|0);
         $604 = HEAP32[$603>>2]|0;
         $605 = ((($601)) + 16|0);
         $606 = HEAP32[$605>>2]|0;
         $607 = ($604|0)==($606|0);
         if ($607) {
          $608 = HEAP32[$601>>2]|0;
          $609 = ((($608)) + 36|0);
          $610 = HEAP32[$609>>2]|0;
          $611 = (FUNCTION_TABLE_ii[$610 & 511]($601)|0);
          $$0$i$i$i$i267 = $611;
         } else {
          $612 = HEAP32[$604>>2]|0;
          $613 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($612)|0);
          $$0$i$i$i$i267 = $613;
         }
         $614 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $615 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i267,$614)|0);
         if ($615) {
          HEAP32[$0>>2] = 0;
          $632 = 1;
          break;
         } else {
          $$pre$i$i$i269 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i270 = ($$pre$i$i$i269|0)==(0|0);
          $632 = $phitmp$i$i$i270;
          break;
         }
        }
       } while(0);
       $617 = ($616|0)==(0|0);
       do {
        if ($617) {
         $$pre$i4$i$i275360$ph = $$pre$i4$i$i275;
         label = 212;
        } else {
         $618 = ((($616)) + 12|0);
         $619 = HEAP32[$618>>2]|0;
         $620 = ((($616)) + 16|0);
         $621 = HEAP32[$620>>2]|0;
         $622 = ($619|0)==($621|0);
         if ($622) {
          $623 = HEAP32[$616>>2]|0;
          $624 = ((($623)) + 36|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = (FUNCTION_TABLE_ii[$625 & 511]($616)|0);
          $$0$i$i2$i$i273 = $626;
         } else {
          $627 = HEAP32[$619>>2]|0;
          $628 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($627)|0);
          $$0$i$i2$i$i273 = $628;
         }
         $629 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $630 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i273,$629)|0);
         if ($630) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i275360$ph = 0;
          label = 212;
          break;
         } else {
          $phitmp$i5$i$i276 = ($$pre$i4$i$i275|0)==(0|0);
          $631 = $632 ^ $phitmp$i5$i$i276;
          if ($631) {
           $$pre$i4$i$i275360374 = $$pre$i4$i$i275;$775 = $$pre$i4$i$i275;
           break;
          } else {
           label = 227;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 212) {
        label = 0;
        if ($632) {
         label = 227;
         break L21;
        } else {
         $$pre$i4$i$i275360374 = $$pre$i4$i$i275360$ph;$775 = 0;
        }
       }
       $633 = HEAP32[$0>>2]|0;
       $634 = ((($633)) + 12|0);
       $635 = HEAP32[$634>>2]|0;
       $636 = ((($633)) + 16|0);
       $637 = HEAP32[$636>>2]|0;
       $638 = ($635|0)==($637|0);
       if ($638) {
        $639 = HEAP32[$633>>2]|0;
        $640 = ((($639)) + 36|0);
        $641 = HEAP32[$640>>2]|0;
        $642 = (FUNCTION_TABLE_ii[$641 & 511]($633)|0);
        $$0$i$i279 = $642;
       } else {
        $643 = HEAP32[$635>>2]|0;
        $644 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($643)|0);
        $$0$i$i279 = $644;
       }
       $645 = HEAP32[$7>>2]|0;
       $646 = ((($645)) + 12|0);
       $647 = HEAP32[$646>>2]|0;
       $648 = (FUNCTION_TABLE_iiii[$647 & 511]($7,2048,$$0$i$i279)|0);
       if (!($648)) {
        label = 227;
        break L21;
       }
       $649 = HEAP32[$9>>2]|0;
       $650 = HEAP32[$11>>2]|0;
       $651 = ($649|0)==($650|0);
       if ($651) {
        __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $652 = HEAP32[$0>>2]|0;
       $653 = ((($652)) + 12|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = ((($652)) + 16|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = ($654|0)==($656|0);
       if ($657) {
        $658 = HEAP32[$652>>2]|0;
        $659 = ((($658)) + 36|0);
        $660 = HEAP32[$659>>2]|0;
        $661 = (FUNCTION_TABLE_ii[$660 & 511]($652)|0);
        $$0$i$i281 = $661;
       } else {
        $662 = HEAP32[$654>>2]|0;
        $663 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($662)|0);
        $$0$i$i281 = $663;
       }
       $664 = HEAP32[$9>>2]|0;
       $665 = ((($664)) + 4|0);
       HEAP32[$9>>2] = $665;
       HEAP32[$664>>2] = $$0$i$i281;
       $666 = HEAP32[$24>>2]|0;
       $667 = (($666) + -1)|0;
       HEAP32[$24>>2] = $667;
       $668 = HEAP32[$0>>2]|0;
       $669 = ((($668)) + 12|0);
       $670 = HEAP32[$669>>2]|0;
       $671 = ((($668)) + 16|0);
       $672 = HEAP32[$671>>2]|0;
       $673 = ($670|0)==($672|0);
       if ($673) {
        $674 = HEAP32[$668>>2]|0;
        $675 = ((($674)) + 40|0);
        $676 = HEAP32[$675>>2]|0;
        (FUNCTION_TABLE_ii[$676 & 511]($668)|0);
        $$pre$i4$i$i275 = $$pre$i4$i$i275360374;$616 = $775;
        continue;
       } else {
        $677 = ((($670)) + 4|0);
        HEAP32[$669>>2] = $677;
        $678 = HEAP32[$670>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($678)|0);
        $$pre$i4$i$i275 = $$pre$i4$i$i275360374;$616 = $775;
        continue;
       }
      }
     }
    } while(0);
    $679 = HEAP32[$9>>2]|0;
    $680 = HEAP32[$8>>2]|0;
    $681 = ($679|0)==($680|0);
    if ($681) {
     label = 227;
     break L21;
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   default: {
    $$1132 = $$0131;
   }
   }
  } while(0);
  L279: do {
   if ((label|0) == 45) {
    while(1) {
     label = 0;
     $123 = HEAP32[$0>>2]|0;
     $124 = ($123|0)==(0|0);
     do {
      if ($124) {
       $154 = 1;
      } else {
       $125 = ((($123)) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ((($123)) + 16|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($126|0)==($128|0);
       if ($129) {
        $130 = HEAP32[$123>>2]|0;
        $131 = ((($130)) + 36|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (FUNCTION_TABLE_ii[$132 & 511]($123)|0);
        $$0$i$i$i$i163 = $133;
       } else {
        $134 = HEAP32[$126>>2]|0;
        $135 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($134)|0);
        $$0$i$i$i$i163 = $135;
       }
       $136 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $137 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i163,$136)|0);
       if ($137) {
        HEAP32[$0>>2] = 0;
        $154 = 1;
        break;
       } else {
        $$pre$i$i$i165 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i166 = ($$pre$i$i$i165|0)==(0|0);
        $154 = $phitmp$i$i$i166;
        break;
       }
      }
     } while(0);
     $139 = ($138|0)==(0|0);
     do {
      if ($139) {
       $$pre$i4$i$i171371 = $$pre$i4$i$i171;
       label = 58;
      } else {
       $140 = ((($138)) + 12|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ((($138)) + 16|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($141|0)==($143|0);
       if ($144) {
        $145 = HEAP32[$138>>2]|0;
        $146 = ((($145)) + 36|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (FUNCTION_TABLE_ii[$147 & 511]($138)|0);
        $$0$i$i2$i$i169 = $148;
       } else {
        $149 = HEAP32[$141>>2]|0;
        $150 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($149)|0);
        $$0$i$i2$i$i169 = $150;
       }
       $151 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $152 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i169,$151)|0);
       if ($152) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i171371 = 0;
        label = 58;
        break;
       } else {
        $phitmp$i5$i$i172 = ($$pre$i4$i$i171|0)==(0|0);
        $153 = $154 ^ $phitmp$i5$i$i172;
        if ($153) {
         $$pre$i4$i$i171373 = $$pre$i4$i$i171;$770 = $$pre$i4$i$i171;
         break;
        } else {
         $$1132 = $$0131;
         break L279;
        }
       }
      }
     } while(0);
     if ((label|0) == 58) {
      label = 0;
      if ($154) {
       $$1132 = $$0131;
       break L279;
      } else {
       $$pre$i4$i$i171373 = $$pre$i4$i$i171371;$770 = 0;
      }
     }
     $155 = HEAP32[$0>>2]|0;
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($155)) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$155>>2]|0;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (FUNCTION_TABLE_ii[$163 & 511]($155)|0);
      $$0$i$i175 = $164;
     } else {
      $165 = HEAP32[$157>>2]|0;
      $166 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($165)|0);
      $$0$i$i175 = $166;
     }
     $167 = HEAP32[$7>>2]|0;
     $168 = ((($167)) + 12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (FUNCTION_TABLE_iiii[$169 & 511]($7,8192,$$0$i$i175)|0);
     if (!($170)) {
      $$1132 = $$0131;
      break L279;
     }
     $171 = HEAP32[$0>>2]|0;
     $172 = ((($171)) + 12|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ((($171)) + 16|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = ($173|0)==($175|0);
     if ($176) {
      $177 = HEAP32[$171>>2]|0;
      $178 = ((($177)) + 40|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = (FUNCTION_TABLE_ii[$179 & 511]($171)|0);
      $$0$i$i177 = $180;
     } else {
      $181 = ((($173)) + 4|0);
      HEAP32[$172>>2] = $181;
      $182 = HEAP32[$173>>2]|0;
      $183 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($182)|0);
      $$0$i$i177 = $183;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i177);
     $$pre$i4$i$i171 = $$pre$i4$i$i171373;$138 = $770;
     label = 45;
    }
   }
  } while(0);
  $684 = (($$0133) + 1)|0;
  $$0131 = $$1132;$$0133 = $684;
 }
 L314: do {
  if ((label|0) == 43) {
   $120 = HEAP32[$5>>2]|0;
   $121 = $120 | 4;
   HEAP32[$5>>2] = $121;
   $$10 = 0;
  }
  else if ((label|0) == 101) {
   $314 = HEAP32[$5>>2]|0;
   $315 = $314 | 4;
   HEAP32[$5>>2] = $315;
   $$10 = 0;
  }
  else if ((label|0) == 141) {
   $454 = HEAP32[$5>>2]|0;
   $455 = $454 | 4;
   HEAP32[$5>>2] = $455;
   $$10 = 0;
  }
  else if ((label|0) == 227) {
   $682 = HEAP32[$5>>2]|0;
   $683 = $682 | 4;
   HEAP32[$5>>2] = $683;
   $$10 = 0;
  }
  else if ((label|0) == 229) {
   $685 = ($$0131|0)==(0|0);
   L316: do {
    if (!($685)) {
     $686 = ((($$0131)) + 8|0);
     $687 = ((($686)) + 3|0);
     $688 = ((($$0131)) + 4|0);
     $$0 = 1;
     L318: while(1) {
      $689 = HEAP8[$687>>0]|0;
      $690 = ($689<<24>>24)<(0);
      if ($690) {
       $691 = HEAP32[$688>>2]|0;
       $694 = $691;
      } else {
       $692 = $689&255;
       $694 = $692;
      }
      $693 = ($$0>>>0)<($694>>>0);
      if (!($693)) {
       break L316;
      }
      $695 = HEAP32[$0>>2]|0;
      $696 = ($695|0)==(0|0);
      do {
       if ($696) {
        $776 = 1;
       } else {
        $697 = ((($695)) + 12|0);
        $698 = HEAP32[$697>>2]|0;
        $699 = ((($695)) + 16|0);
        $700 = HEAP32[$699>>2]|0;
        $701 = ($698|0)==($700|0);
        if ($701) {
         $702 = HEAP32[$695>>2]|0;
         $703 = ((($702)) + 36|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = (FUNCTION_TABLE_ii[$704 & 511]($695)|0);
         $$0$i$i$i$i208 = $705;
        } else {
         $706 = HEAP32[$698>>2]|0;
         $707 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($706)|0);
         $$0$i$i$i$i208 = $707;
        }
        $708 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $709 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i208,$708)|0);
        if ($709) {
         HEAP32[$0>>2] = 0;
         $776 = 1;
         break;
        } else {
         $$pre$i$i$i210 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i211 = ($$pre$i$i$i210|0)==(0|0);
         $776 = $phitmp$i$i$i211;
         break;
        }
       }
      } while(0);
      $710 = HEAP32[$1>>2]|0;
      $711 = ($710|0)==(0|0);
      do {
       if ($711) {
        label = 248;
       } else {
        $712 = ((($710)) + 12|0);
        $713 = HEAP32[$712>>2]|0;
        $714 = ((($710)) + 16|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = ($713|0)==($715|0);
        if ($716) {
         $717 = HEAP32[$710>>2]|0;
         $718 = ((($717)) + 36|0);
         $719 = HEAP32[$718>>2]|0;
         $720 = (FUNCTION_TABLE_ii[$719 & 511]($710)|0);
         $$0$i$i2$i$i214 = $720;
        } else {
         $721 = HEAP32[$713>>2]|0;
         $722 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($721)|0);
         $$0$i$i2$i$i214 = $722;
        }
        $723 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $724 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i214,$723)|0);
        if ($724) {
         HEAP32[$1>>2] = 0;
         label = 248;
         break;
        } else {
         if ($776) {
          break;
         } else {
          break L318;
         }
        }
       }
      } while(0);
      if ((label|0) == 248) {
       label = 0;
       if ($776) {
        break;
       }
      }
      $725 = HEAP32[$0>>2]|0;
      $726 = ((($725)) + 12|0);
      $727 = HEAP32[$726>>2]|0;
      $728 = ((($725)) + 16|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = ($727|0)==($729|0);
      if ($730) {
       $731 = HEAP32[$725>>2]|0;
       $732 = ((($731)) + 36|0);
       $733 = HEAP32[$732>>2]|0;
       $734 = (FUNCTION_TABLE_ii[$733 & 511]($725)|0);
       $$0$i$i204 = $734;
      } else {
       $735 = HEAP32[$727>>2]|0;
       $736 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($735)|0);
       $$0$i$i204 = $736;
      }
      $737 = HEAP8[$687>>0]|0;
      $738 = ($737<<24>>24)<(0);
      if ($738) {
       $739 = HEAP32[$$0131>>2]|0;
       $741 = $739;
      } else {
       $741 = $$0131;
      }
      $740 = (($741) + ($$0<<2)|0);
      $742 = HEAP32[$740>>2]|0;
      $743 = ($$0$i$i204|0)==($742|0);
      if (!($743)) {
       break;
      }
      $746 = (($$0) + 1)|0;
      $747 = HEAP32[$0>>2]|0;
      $748 = ((($747)) + 12|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = ((($747)) + 16|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = ($749|0)==($751|0);
      if ($752) {
       $753 = HEAP32[$747>>2]|0;
       $754 = ((($753)) + 40|0);
       $755 = HEAP32[$754>>2]|0;
       (FUNCTION_TABLE_ii[$755 & 511]($747)|0);
       $$0 = $746;
       continue;
      } else {
       $756 = ((($749)) + 4|0);
       HEAP32[$748>>2] = $756;
       $757 = HEAP32[$749>>2]|0;
       (__ZNSt3__211char_traitsIwE11to_int_typeEw($757)|0);
       $$0 = $746;
       continue;
      }
     }
     $744 = HEAP32[$5>>2]|0;
     $745 = $744 | 4;
     HEAP32[$5>>2] = $745;
     $$10 = 0;
     break L314;
    }
   } while(0);
   $758 = HEAP32[$13>>2]|0;
   $759 = HEAP32[$14>>2]|0;
   $760 = ($758|0)==($759|0);
   if ($760) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$758,$759,$25);
    $761 = HEAP32[$25>>2]|0;
    $762 = ($761|0)==(0);
    if ($762) {
     $$10 = 1;
     break;
    } else {
     $763 = HEAP32[$5>>2]|0;
     $764 = $763 | 4;
     HEAP32[$5>>2] = $764;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $765 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $766 = ($765|0)==(0|0);
 if (!($766)) {
  $767 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$767 & 511]($765);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 8|0);
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = $13 & 2147483647;
  $phitmp$i = (($14) + -1)|0;
  $55 = $12;$56 = $phitmp$i;
 } else {
  $10 = $8&255;
  $55 = $10;$56 = 1;
 }
 $15 = $2;
 $16 = $1;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18|0)==(0);
 do {
  if (!($19)) {
   if ($9) {
    $20 = HEAP32[$0>>2]|0;
    $21 = ((($0)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $25 = $20;$26 = $22;
   } else {
    $23 = $8&255;
    $25 = $0;$26 = $23;
   }
   $24 = (($25) + ($26<<2)|0);
   $27 = (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1,$25,$24)|0);
   if ($27) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $28 = ($18>>>0)>(1073741807);
    if ($28) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4);
     // unreachable;
    }
    $29 = ($18>>>0)<(2);
    do {
     if ($29) {
      $30 = $18&255;
      $31 = ((($4)) + 8|0);
      $32 = ((($31)) + 3|0);
      HEAP8[$32>>0] = $30;
      $$0$i$i = $1;$$021$i$i = $4;
     } else {
      $33 = (($18) + 4)|0;
      $34 = $33 & -4;
      $35 = ($34>>>0)>(1073741823);
      if ($35) {
       _abort();
       // unreachable;
      } else {
       $36 = $34 << 2;
       $37 = (__Znwj($36)|0);
       HEAP32[$4>>2] = $37;
       $38 = $34 | -2147483648;
       $39 = ((($4)) + 8|0);
       HEAP32[$39>>2] = $38;
       $40 = ((($4)) + 4|0);
       HEAP32[$40>>2] = $18;
       $$0$i$i = $1;$$021$i$i = $37;
       break;
      }
     }
    } while(0);
    while(1) {
     $41 = ($$0$i$i|0)==($2|0);
     if ($41) {
      break;
     }
     __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i,$$0$i$i);
     $42 = ((($$0$i$i)) + 4|0);
     $43 = ((($$021$i$i)) + 4|0);
     $$0$i$i = $42;$$021$i$i = $43;
    }
    HEAP32[$3>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i,$3);
    $44 = ((($4)) + 8|0);
    $45 = ((($44)) + 3|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = ($46<<24>>24)<(0);
    $48 = HEAP32[$4>>2]|0;
    $49 = ((($4)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $46&255;
    $52 = $47 ? $48 : $4;
    $53 = $47 ? $50 : $51;
    (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj($0,$52,$53)|0);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
    break;
   }
   $54 = (($56) - ($55))|0;
   $57 = ($54>>>0)<($18>>>0);
   if ($57) {
    $58 = (($55) + ($18))|0;
    $59 = (($58) - ($56))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$56,$59,$55,$55,0,0);
   }
   $60 = HEAP8[$7>>0]|0;
   $61 = ($60<<24>>24)<(0);
   if ($61) {
    $62 = HEAP32[$0>>2]|0;
    $64 = $62;
   } else {
    $64 = $0;
   }
   $63 = (($64) + ($55<<2)|0);
   $$0 = $63;$$034 = $1;
   while(1) {
    $65 = ($$034|0)==($2|0);
    if ($65) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$$034);
    $66 = ((($$0)) + 4|0);
    $67 = ((($$034)) + 4|0);
    $$0 = $66;$$034 = $67;
   }
   HEAP32[$5>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$5);
   $68 = (($55) + ($18))|0;
   $69 = HEAP8[$7>>0]|0;
   $70 = ($69<<24>>24)<(0);
   if ($70) {
    $71 = ((($0)) + 4|0);
    HEAP32[$71>>2] = $68;
    break;
   } else {
    $72 = $68&255;
    HEAP8[$7>>0] = $72;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $$ = $3 & $4;
 return ($$|0);
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$0$i$i$i45 = 0, $$0$i$i$i49 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i63 = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i40 = 0, $exitcond$i$i$i43 = 0, $exitcond$i$i$i46 = 0;
 var $exitcond$i$i$i50 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i64 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = sp + 148|0;
 $11 = sp + 144|0;
 $12 = sp + 155|0;
 $13 = sp + 154|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $17 = sp + 128|0;
 $18 = sp + 124|0;
 $19 = sp + 120|0;
 $20 = sp + 153|0;
 $21 = sp + 152|0;
 $22 = sp + 116|0;
 $23 = sp + 112|0;
 $24 = sp + 108|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22292)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 511]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 511]($27,$36);
  $44 = ((($8)) + 8|0);
  $45 = ((($44)) + 3|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = ($46<<24>>24)<(0);
  if ($47) {
   $48 = HEAP32[$8>>2]|0;
   HEAP32[$24>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($48,$24);
   $49 = ((($8)) + 4|0);
   HEAP32[$49>>2] = 0;
  } else {
   HEAP32[$25>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
   HEAP8[$45>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
  ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $50 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$50>>2] = 0;
   $51 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $51;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  $52 = HEAP32[$36>>2]|0;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_vii[$54 & 511]($28,$36);
  $55 = ((($7)) + 8|0);
  $56 = ((($55)) + 3|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ($57<<24>>24)<(0);
  if ($58) {
   $59 = HEAP32[$7>>2]|0;
   HEAP32[$22>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($59,$22);
   $60 = ((($7)) + 4|0);
   HEAP32[$60>>2] = 0;
  } else {
   HEAP32[$23>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$23);
   HEAP8[$56>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$28>>2]|0;HEAP32[$7+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i39 = 0;
  while(1) {
   $exitcond$i$i$i40 = ($$0$i$i$i39|0)==(3);
   if ($exitcond$i$i$i40) {
    break;
   }
   $61 = (($28) + ($$0$i$i$i39<<2)|0);
   HEAP32[$61>>2] = 0;
   $62 = (($$0$i$i$i39) + 1)|0;
   $$0$i$i$i39 = $62;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($28);
  $63 = HEAP32[$36>>2]|0;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 511]($36)|0);
  HEAP32[$3>>2] = $66;
  $67 = HEAP32[$36>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 511]($36)|0);
  HEAP32[$4>>2] = $70;
  $71 = HEAP32[$36>>2]|0;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 511]($29,$36);
  $74 = ((($5)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  if ($76) {
   $77 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($77,$20);
   $78 = ((($5)) + 4|0);
   HEAP32[$78>>2] = 0;
   $$pre$phi$i$iZ2D = $5;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$74>>0] = 0;
   $$pre$phi$i$iZ2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i42 = 0;
  while(1) {
   $exitcond$i$i$i43 = ($$0$i$i$i42|0)==(3);
   if ($exitcond$i$i$i43) {
    break;
   }
   $79 = (($29) + ($$0$i$i$i42<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($$0$i$i$i42) + 1)|0;
   $$0$i$i$i42 = $80;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $81 = HEAP32[$36>>2]|0;
  $82 = ((($81)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vii[$83 & 511]($30,$36);
  $84 = ((($6)) + 8|0);
  $85 = ((($84)) + 3|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = ($86<<24>>24)<(0);
  if ($87) {
   $88 = HEAP32[$6>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($88,$18);
   $89 = ((($6)) + 4|0);
   HEAP32[$89>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$19);
   HEAP8[$85>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($6,0);
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $90 = (($30) + ($$0$i$i$i45<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $91;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($30);
  $92 = HEAP32[$36>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 511]($36)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,22284)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  FUNCTION_TABLE_vii[$99 & 511]($31,$96);
  $100 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$100&255;HEAP8[$2+1>>0]=($100>>8)&255;HEAP8[$2+2>>0]=($100>>16)&255;HEAP8[$2+3>>0]=$100>>24;
  $101 = HEAP32[$96>>2]|0;
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  FUNCTION_TABLE_vii[$103 & 511]($32,$96);
  $104 = ((($8)) + 8|0);
  $105 = ((($104)) + 3|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = ($106<<24>>24)<(0);
  if ($107) {
   $108 = HEAP32[$8>>2]|0;
   HEAP32[$16>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($108,$16);
   $109 = ((($8)) + 4|0);
   HEAP32[$109>>2] = 0;
  } else {
   HEAP32[$17>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
   HEAP8[$105>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
  ;HEAP32[$8>>2]=HEAP32[$32>>2]|0;HEAP32[$8+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i49 = 0;
  while(1) {
   $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
   if ($exitcond$i$i$i50) {
    break;
   }
   $110 = (($32) + ($$0$i$i$i49<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($$0$i$i$i49) + 1)|0;
   $$0$i$i$i49 = $111;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($32);
  $112 = HEAP32[$96>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 511]($33,$96);
  $115 = ((($7)) + 8|0);
  $116 = ((($115)) + 3|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)<(0);
  if ($118) {
   $119 = HEAP32[$7>>2]|0;
   HEAP32[$14>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($119,$14);
   $120 = ((($7)) + 4|0);
   HEAP32[$120>>2] = 0;
  } else {
   HEAP32[$15>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$15);
   HEAP8[$116>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$33>>2]|0;HEAP32[$7+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $121 = (($33) + ($$0$i$i$i53<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $122;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  $123 = HEAP32[$96>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 511]($96)|0);
  HEAP32[$3>>2] = $126;
  $127 = HEAP32[$96>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 511]($96)|0);
  HEAP32[$4>>2] = $130;
  $131 = HEAP32[$96>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 511]($34,$96);
  $134 = ((($5)) + 11|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = ($135<<24>>24)<(0);
  if ($136) {
   $137 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($137,$12);
   $138 = ((($5)) + 4|0);
   HEAP32[$138>>2] = 0;
   $$pre$phi$i$i57Z2D = $5;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$134>>0] = 0;
   $$pre$phi$i$i57Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$34>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $139 = (($34) + ($$0$i$i$i59<<2)|0);
   HEAP32[$139>>2] = 0;
   $140 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $140;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $141 = HEAP32[$96>>2]|0;
  $142 = ((($141)) + 24|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vii[$143 & 511]($35,$96);
  $144 = ((($6)) + 8|0);
  $145 = ((($144)) + 3|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = ($146<<24>>24)<(0);
  if ($147) {
   $148 = HEAP32[$6>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($148,$10);
   $149 = ((($6)) + 4|0);
   HEAP32[$149>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$11);
   HEAP8[$145>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($6,0);
  ;HEAP32[$6>>2]=HEAP32[$35>>2]|0;HEAP32[$6+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i63 = 0;
  while(1) {
   $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
   if ($exitcond$i$i$i64) {
    break;
   }
   $150 = (($35) + ($$0$i$i$i63<<2)|0);
   HEAP32[$150>>2] = 0;
   $151 = (($$0$i$i$i63) + 1)|0;
   $$0$i$i$i63 = $151;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  $152 = HEAP32[$96>>2]|0;
  $153 = ((($152)) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 511]($96)|0);
  $storemerge = $155;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(347|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $24 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $24 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 511]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $24 = $$pre;
  }
 }
 HEAP32[$3>>2] = (348);
 $22 = $$ >>> 2;
 $23 = (($24) + ($14<<2)|0);
 HEAP32[$1>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$2>>2] = $26;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$038 = 0, $$039 = 0, $$byval_copy = 0, $$sink = 0, $$sink1 = 0, $$sink76 = 0, $$sink77 = 0, $$sroa$054$0 = 0, $$sroa$062$0 = 0, $$sroa$071$0 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i43 = 0, $exitcond$i$i46 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 288|0;
 $7 = sp + 72|0;
 $8 = sp + 188|0;
 $9 = sp + 68|0;
 $10 = sp + 184|0;
 $11 = sp + 181|0;
 $12 = sp + 180|0;
 $13 = sp + 56|0;
 $14 = sp + 44|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 80|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,16692,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,16692,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $27 = $25;
  $28 = (_malloc($24)|0);
  $29 = $28;
  $30 = ($28|0)==(0|0);
  if ($30) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $28;$$039 = $24;$$sroa$062$0 = $29;$$sroa$071$0 = $27;
  }
 } else {
  $$0 = $8;$$039 = $21;$$sroa$062$0 = 0;$$sroa$071$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9,$3);
 $31 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,20556)|0);
 $32 = HEAP32[$7>>2]|0;
 $33 = (($32) + ($$039)|0);
 $34 = HEAP32[$31>>2]|0;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 (FUNCTION_TABLE_iiiii[$36 & 511]($31,$32,$33,$$0)|0);
 $37 = ($$039|0)==(0);
 if ($37) {
  $47 = 0;
 } else {
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(45);
  $47 = $40;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $41 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$41>>2] = 0;
  $42 = (($$0$i$i) + 1)|0;
  $$0$i$i = $42;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i42 = 0;
 while(1) {
  $exitcond$i$i43 = ($$0$i$i42|0)==(3);
  if ($exitcond$i$i43) {
   break;
  }
  $43 = (($14) + ($$0$i$i42<<2)|0);
  HEAP32[$43>>2] = 0;
  $44 = (($$0$i$i42) + 1)|0;
  $$0$i$i42 = $44;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i45 = 0;
 while(1) {
  $exitcond$i$i46 = ($$0$i$i45|0)==(3);
  if ($exitcond$i$i46) {
   break;
  }
  $45 = (($15) + ($$0$i$i45<<2)|0);
  HEAP32[$45>>2] = 0;
  $46 = (($$0$i$i45) + 1)|0;
  $$0$i$i45 = $46;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$47,$9,$10,$11,$12,$13,$14,$15,$16);
 $48 = HEAP32[$16>>2]|0;
 $49 = ($$039|0)>($48|0);
 if ($49) {
  $50 = (($$039) - ($48))|0;
  $51 = $50 << 1;
  $52 = ((($15)) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)<(0);
  $55 = ((($15)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $53&255;
  $58 = $54 ? $56 : $57;
  $59 = (($58) + ($51))|0;
  $60 = ((($14)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = ((($14)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $61&255;
  $66 = $62 ? $64 : $65;
  $$sink1 = 1;$$sink76 = $59;$$sink77 = $66;
 } else {
  $67 = ((($15)) + 11|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = ($68<<24>>24)<(0);
  $70 = ((($15)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $68&255;
  $73 = $69 ? $71 : $72;
  $74 = ((($14)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  $77 = ((($14)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $75&255;
  $80 = $76 ? $78 : $79;
  $$sink1 = 2;$$sink76 = $80;$$sink77 = $73;
 }
 $81 = (($$sink77) + ($48))|0;
 $$sink = (($81) + ($$sink76))|0;
 $82 = (($$sink) + ($$sink1))|0;
 $83 = ($82>>>0)>(100);
 if ($83) {
  $84 = (_malloc($82)|0);
  $85 = $84;
  $86 = ($84|0)==(0|0);
  if ($86) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$038 = $84;$$sroa$054$0 = $85;
  }
 } else {
  $$038 = $17;$$sroa$054$0 = 0;
 }
 $87 = ((($3)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($$0) + ($$039)|0);
 $90 = HEAP8[$11>>0]|0;
 $91 = HEAP8[$12>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$038,$18,$19,$88,$$0,$89,$31,$47,$10,$90,$91,$13,$14,$15,$48);
 $92 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $92;
 $93 = HEAP32[$18>>2]|0;
 $94 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $95 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$038,$93,$94,$3,$4)|0);
 $96 = ($$sroa$054$0|0)==(0);
 if (!($96)) {
  $97 = $$sroa$054$0;
  _free($97);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 $98 = ($$sroa$062$0|0)==(0);
 if (!($98)) {
  $99 = $$sroa$062$0;
  _free($99);
 }
 $100 = ($$sroa$071$0|0)==(0);
 if (!($100)) {
  $101 = $$sroa$071$0;
  _free($101);
 }
 STACKTOP = sp;return ($95|0);
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i27 = 0, $$0$i$i30 = 0, $$byval_copy = 0, $$sink = 0, $$sink1 = 0, $$sink48 = 0, $$sink49 = 0, $$sroa$042$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $exitcond$i$i = 0, $exitcond$i$i28 = 0, $exitcond$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 60|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20556)|0);
 $19 = ((($5)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($5)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&255;
 $25 = $21 ? $23 : $24;
 $26 = ($25|0)==(0);
 if ($26) {
  $41 = 0;
 } else {
  $27 = HEAP32[$5>>2]|0;
  $28 = $21 ? $27 : $5;
  $29 = HEAP8[$28>>0]|0;
  $30 = HEAP32[$18>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_iii[$32 & 511]($18,45)|0);
  $34 = ($29<<24>>24)==($33<<24>>24);
  $41 = $34;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $35 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i) + 1)|0;
  $$0$i$i = $36;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i27 = 0;
 while(1) {
  $exitcond$i$i28 = ($$0$i$i27|0)==(3);
  if ($exitcond$i$i28) {
   break;
  }
  $37 = (($11) + ($$0$i$i27<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i27) + 1)|0;
  $$0$i$i27 = $38;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i30 = 0;
 while(1) {
  $exitcond$i$i31 = ($$0$i$i30|0)==(3);
  if ($exitcond$i$i31) {
   break;
  }
  $39 = (($12) + ($$0$i$i30<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = (($$0$i$i30) + 1)|0;
  $$0$i$i30 = $40;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$41,$6,$7,$8,$9,$10,$11,$12,$13);
 $42 = HEAP8[$19>>0]|0;
 $43 = ($42<<24>>24)<(0);
 $44 = HEAP32[$22>>2]|0;
 $45 = $42&255;
 $46 = $43 ? $44 : $45;
 $47 = HEAP32[$13>>2]|0;
 $48 = ($46|0)>($47|0);
 if ($48) {
  $49 = (($46) - ($47))|0;
  $50 = $49 << 1;
  $51 = ((($12)) + 11|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52<<24>>24)<(0);
  $54 = ((($12)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52&255;
  $57 = $53 ? $55 : $56;
  $58 = (($57) + ($50))|0;
  $59 = ((($11)) + 11|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ($60<<24>>24)<(0);
  $62 = ((($11)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $60&255;
  $65 = $61 ? $63 : $64;
  $$sink1 = 1;$$sink48 = $58;$$sink49 = $65;
 } else {
  $66 = ((($12)) + 11|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)<(0);
  $69 = ((($12)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $67&255;
  $72 = $68 ? $70 : $71;
  $73 = ((($11)) + 11|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = ($74<<24>>24)<(0);
  $76 = ((($11)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $74&255;
  $79 = $75 ? $77 : $78;
  $$sink1 = 2;$$sink48 = $79;$$sink49 = $72;
 }
 $80 = (($$sink49) + ($47))|0;
 $$sink = (($80) + ($$sink48))|0;
 $81 = (($$sink) + ($$sink1))|0;
 $82 = ($81>>>0)>(100);
 if ($82) {
  $83 = (_malloc($81)|0);
  $84 = $83;
  $85 = ($83|0)==(0|0);
  if ($85) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $83;$$sroa$042$0 = $84;
  }
 } else {
  $$0 = $14;$$sroa$042$0 = 0;
 }
 $86 = ((($3)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$5>>2]|0;
 $89 = $43 ? $88 : $5;
 $90 = (($89) + ($46)|0);
 $91 = HEAP8[$8>>0]|0;
 $92 = HEAP8[$9>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$0,$15,$16,$87,$89,$90,$18,$41,$7,$91,$92,$10,$11,$12,$47);
 $93 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $93;
 $94 = HEAP32[$15>>2]|0;
 $95 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $96 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$94,$95,$3,$4)|0);
 $97 = ($$sroa$042$0|0)==(0);
 if (!($97)) {
  $98 = $$sroa$042$0;
  _free($98);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;return ($96|0);
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i49 = 0, $$0$i$i$i55 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i73 = 0, $$0$i$i$i79 = 0, $$0$i$i$i85 = 0, $$pre$phi$i$i47Z2D = 0, $$pre$phi$i$i53Z2D = 0, $$pre$phi$i$i59Z2D = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$i71Z2D = 0, $$pre$phi$i$i77Z2D = 0, $$pre$phi$i$i83Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi88Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i50 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i62 = 0, $exitcond$i$i$i68 = 0, $exitcond$i$i$i74 = 0, $exitcond$i$i$i80 = 0, $exitcond$i$i$i86 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 127|0;
 $11 = sp + 126|0;
 $12 = sp + 125|0;
 $13 = sp + 124|0;
 $14 = sp + 123|0;
 $15 = sp + 122|0;
 $16 = sp + 121|0;
 $17 = sp + 120|0;
 $18 = sp + 119|0;
 $19 = sp + 118|0;
 $20 = sp + 117|0;
 $21 = sp + 116|0;
 $22 = sp + 115|0;
 $23 = sp + 114|0;
 $24 = sp + 113|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,22276)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 511]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 511]($27,$38);
   $46 = ((($8)) + 11|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)<(0);
   if ($48) {
    $49 = HEAP32[$8>>2]|0;
    HEAP8[$24>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($49,$24);
    $50 = ((($8)) + 4|0);
    HEAP32[$50>>2] = 0;
    $$pre$phi$i$iZ2D = $8;
   } else {
    HEAP8[$25>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
    HEAP8[$46>>0] = 0;
    $$pre$phi$i$iZ2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$27>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $51 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$51>>2] = 0;
    $52 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $52;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
   $$pre$phiZ2D = $38;
  } else {
   $53 = HEAP32[$38>>2]|0;
   $54 = ((($53)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vii[$55 & 511]($28,$38);
   $56 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$56&255;HEAP8[$3+1>>0]=($56>>8)&255;HEAP8[$3+2>>0]=($56>>16)&255;HEAP8[$3+3>>0]=$56>>24;
   $57 = HEAP32[$38>>2]|0;
   $58 = ((($57)) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   FUNCTION_TABLE_vii[$59 & 511]($29,$38);
   $60 = ((($8)) + 11|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)<(0);
   if ($62) {
    $63 = HEAP32[$8>>2]|0;
    HEAP8[$22>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($63,$22);
    $64 = ((($8)) + 4|0);
    HEAP32[$64>>2] = 0;
    $$pre$phi$i$i47Z2D = $8;
   } else {
    HEAP8[$23>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$23);
    HEAP8[$60>>0] = 0;
    $$pre$phi$i$i47Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i47Z2D>>2]=HEAP32[$29>>2]|0;HEAP32[$$pre$phi$i$i47Z2D+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$pre$phi$i$i47Z2D+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i49 = 0;
   while(1) {
    $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
    if ($exitcond$i$i$i50) {
     break;
    }
    $65 = (($29) + ($$0$i$i$i49<<2)|0);
    HEAP32[$65>>2] = 0;
    $66 = (($$0$i$i$i49) + 1)|0;
    $$0$i$i$i49 = $66;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
   $$pre$phiZ2D = $38;
  }
  $67 = HEAP32[$38>>2]|0;
  $68 = ((($67)) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 511]($38)|0);
  HEAP8[$4>>0] = $70;
  $71 = HEAP32[$38>>2]|0;
  $72 = ((($71)) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 511]($38)|0);
  HEAP8[$5>>0] = $74;
  $75 = HEAP32[$$pre$phiZ2D>>2]|0;
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 511]($30,$38);
  $78 = ((($6)) + 11|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = ($79<<24>>24)<(0);
  if ($80) {
   $81 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($81,$20);
   $82 = ((($6)) + 4|0);
   HEAP32[$82>>2] = 0;
   $$pre$phi$i$i53Z2D = $6;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$78>>0] = 0;
   $$pre$phi$i$i53Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i53Z2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$i53Z2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$i53Z2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $83 = (($30) + ($$0$i$i$i55<<2)|0);
   HEAP32[$83>>2] = 0;
   $84 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $84;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $85 = HEAP32[$$pre$phiZ2D>>2]|0;
  $86 = ((($85)) + 24|0);
  $87 = HEAP32[$86>>2]|0;
  FUNCTION_TABLE_vii[$87 & 511]($31,$38);
  $88 = ((($7)) + 11|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89<<24>>24)<(0);
  if ($90) {
   $91 = HEAP32[$7>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($91,$18);
   $92 = ((($7)) + 4|0);
   HEAP32[$92>>2] = 0;
   $$pre$phi$i$i59Z2D = $7;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$19);
   HEAP8[$88>>0] = 0;
   $$pre$phi$i$i59Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i59Z2D>>2]=HEAP32[$31>>2]|0;HEAP32[$$pre$phi$i$i59Z2D+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$pre$phi$i$i59Z2D+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i61 = 0;
  while(1) {
   $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
   if ($exitcond$i$i$i62) {
    break;
   }
   $93 = (($31) + ($$0$i$i$i61<<2)|0);
   HEAP32[$93>>2] = 0;
   $94 = (($$0$i$i$i61) + 1)|0;
   $$0$i$i$i61 = $94;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
  $95 = HEAP32[$38>>2]|0;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (FUNCTION_TABLE_ii[$97 & 511]($38)|0);
  $storemerge = $98;
 } else {
  $99 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,22268)|0);
  if ($1) {
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vii[$102 & 511]($32,$99);
   $103 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$103&255;HEAP8[$3+1>>0]=($103>>8)&255;HEAP8[$3+2>>0]=($103>>16)&255;HEAP8[$3+3>>0]=$103>>24;
   $104 = HEAP32[$99>>2]|0;
   $105 = ((($104)) + 32|0);
   $106 = HEAP32[$105>>2]|0;
   FUNCTION_TABLE_vii[$106 & 511]($33,$99);
   $107 = ((($8)) + 11|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108<<24>>24)<(0);
   if ($109) {
    $110 = HEAP32[$8>>2]|0;
    HEAP8[$16>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($110,$16);
    $111 = ((($8)) + 4|0);
    HEAP32[$111>>2] = 0;
    $$pre$phi$i$i65Z2D = $8;
   } else {
    HEAP8[$17>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
    HEAP8[$107>>0] = 0;
    $$pre$phi$i$i65Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i65Z2D>>2]=HEAP32[$33>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i67 = 0;
   while(1) {
    $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
    if ($exitcond$i$i$i68) {
     break;
    }
    $112 = (($33) + ($$0$i$i$i67<<2)|0);
    HEAP32[$112>>2] = 0;
    $113 = (($$0$i$i$i67) + 1)|0;
    $$0$i$i$i67 = $113;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
   $$pre$phi88Z2D = $99;
  } else {
   $114 = HEAP32[$99>>2]|0;
   $115 = ((($114)) + 40|0);
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vii[$116 & 511]($34,$99);
   $117 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$117&255;HEAP8[$3+1>>0]=($117>>8)&255;HEAP8[$3+2>>0]=($117>>16)&255;HEAP8[$3+3>>0]=$117>>24;
   $118 = HEAP32[$99>>2]|0;
   $119 = ((($118)) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vii[$120 & 511]($35,$99);
   $121 = ((($8)) + 11|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122<<24>>24)<(0);
   if ($123) {
    $124 = HEAP32[$8>>2]|0;
    HEAP8[$14>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($124,$14);
    $125 = ((($8)) + 4|0);
    HEAP32[$125>>2] = 0;
    $$pre$phi$i$i71Z2D = $8;
   } else {
    HEAP8[$15>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$15);
    HEAP8[$121>>0] = 0;
    $$pre$phi$i$i71Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i71Z2D>>2]=HEAP32[$35>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$pre$phi$i$i71Z2D+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i73 = 0;
   while(1) {
    $exitcond$i$i$i74 = ($$0$i$i$i73|0)==(3);
    if ($exitcond$i$i$i74) {
     break;
    }
    $126 = (($35) + ($$0$i$i$i73<<2)|0);
    HEAP32[$126>>2] = 0;
    $127 = (($$0$i$i$i73) + 1)|0;
    $$0$i$i$i73 = $127;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
   $$pre$phi88Z2D = $99;
  }
  $128 = HEAP32[$99>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 511]($99)|0);
  HEAP8[$4>>0] = $131;
  $132 = HEAP32[$99>>2]|0;
  $133 = ((($132)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 511]($99)|0);
  HEAP8[$5>>0] = $135;
  $136 = HEAP32[$$pre$phi88Z2D>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 511]($36,$99);
  $139 = ((($6)) + 11|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ($140<<24>>24)<(0);
  if ($141) {
   $142 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($142,$12);
   $143 = ((($6)) + 4|0);
   HEAP32[$143>>2] = 0;
   $$pre$phi$i$i77Z2D = $6;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$139>>0] = 0;
   $$pre$phi$i$i77Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i77Z2D>>2]=HEAP32[$36>>2]|0;HEAP32[$$pre$phi$i$i77Z2D+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$pre$phi$i$i77Z2D+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i79 = 0;
  while(1) {
   $exitcond$i$i$i80 = ($$0$i$i$i79|0)==(3);
   if ($exitcond$i$i$i80) {
    break;
   }
   $144 = (($36) + ($$0$i$i$i79<<2)|0);
   HEAP32[$144>>2] = 0;
   $145 = (($$0$i$i$i79) + 1)|0;
   $$0$i$i$i79 = $145;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $146 = HEAP32[$$pre$phi88Z2D>>2]|0;
  $147 = ((($146)) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 511]($37,$99);
  $149 = ((($7)) + 11|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = ($150<<24>>24)<(0);
  if ($151) {
   $152 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($152,$10);
   $153 = ((($7)) + 4|0);
   HEAP32[$153>>2] = 0;
   $$pre$phi$i$i83Z2D = $7;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$11);
   HEAP8[$149>>0] = 0;
   $$pre$phi$i$i83Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i83Z2D>>2]=HEAP32[$37>>2]|0;HEAP32[$$pre$phi$i$i83Z2D+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$pre$phi$i$i83Z2D+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i85 = 0;
  while(1) {
   $exitcond$i$i$i86 = ($$0$i$i$i85|0)==(3);
   if ($exitcond$i$i$i86) {
    break;
   }
   $154 = (($37) + ($$0$i$i$i85<<2)|0);
   HEAP32[$154>>2] = 0;
   $155 = (($$0$i$i$i85) + 1)|0;
   $$0$i$i$i85 = $155;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $156 = HEAP32[$99>>2]|0;
  $157 = ((($156)) + 36|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (FUNCTION_TABLE_ii[$158 & 511]($99)|0);
  $storemerge = $159;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$097 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0;
 var $$3 = 0, $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 511]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $$$097 = $7 ? $68 : $$097;
    $$0101 = $$$097;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $71 = ($70<<24>>24)>(-1);
     if (!($71)) {
      break;
     }
     $72 = $70 << 24 >> 24;
     $73 = HEAP32[$21>>2]|0;
     $74 = (($73) + ($72<<1)|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75 & 2048;
     $77 = ($76<<16>>16)==(0);
     if ($77) {
      break;
     }
     $78 = ((($$0101)) + 1|0);
     $$0101 = $78;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $79 = ($$1102>>>0)>($$$097>>>0);
      $80 = ($$099|0)>(0);
      $81 = $79 & $80;
      if (!($81)) {
       break;
      }
      $82 = ((($$1102)) + -1|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = HEAP32[$2>>2]|0;
      $85 = ((($84)) + 1|0);
      HEAP32[$2>>2] = $85;
      HEAP8[$84>>0] = $83;
      $86 = (($$099) + -1)|0;
      $$099 = $86;$$1102 = $82;
     }
     if ($80) {
      $87 = HEAP32[$6>>2]|0;
      $88 = ((($87)) + 28|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (FUNCTION_TABLE_iii[$89 & 511]($6,48)|0);
      $94 = $90;
     } else {
      $94 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $91 = ($$1100|0)>(0);
      $92 = HEAP32[$2>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$2>>2] = $93;
      if (!($91)) {
       break;
      }
      HEAP8[$92>>0] = $94;
      $95 = (($$1100) + -1)|0;
      $$1100 = $95;
     }
     HEAP8[$92>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $96 = ($$2103|0)==($$$097|0);
    L35: do {
     if ($96) {
      $97 = HEAP32[$6>>2]|0;
      $98 = ((($97)) + 28|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_iii[$99 & 511]($6,48)|0);
      $101 = HEAP32[$2>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$2>>2] = $102;
      HEAP8[$101>>0] = $100;
     } else {
      $103 = HEAP8[$23>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$24>>2]|0;
      $106 = $103&255;
      $107 = $104 ? $105 : $106;
      $108 = ($107|0)==(0);
      if ($108) {
       $$0 = -1;$$093 = 0;$$095 = 0;$$3 = $$2103;
      } else {
       $109 = HEAP32[$11>>2]|0;
       $110 = $104 ? $109 : $11;
       $111 = HEAP8[$110>>0]|0;
       $112 = $111 << 24 >> 24;
       $$0 = $112;$$093 = 0;$$095 = 0;$$3 = $$2103;
      }
      while(1) {
       $113 = ($$3|0)==($$$097|0);
       if ($113) {
        break L35;
       }
       $114 = ($$095|0)==($$0|0);
       if ($114) {
        $115 = HEAP32[$2>>2]|0;
        $116 = ((($115)) + 1|0);
        HEAP32[$2>>2] = $116;
        HEAP8[$115>>0] = $10;
        $117 = (($$093) + 1)|0;
        $118 = HEAP8[$23>>0]|0;
        $119 = ($118<<24>>24)<(0);
        $120 = HEAP32[$24>>2]|0;
        $121 = $118&255;
        $122 = $119 ? $120 : $121;
        $123 = ($117>>>0)<($122>>>0);
        if ($123) {
         $124 = HEAP32[$11>>2]|0;
         $125 = $119 ? $124 : $11;
         $126 = (($125) + ($117)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = ($127<<24>>24)==(127);
         $129 = $127 << 24 >> 24;
         $$ = $128 ? -1 : $129;
         $$1 = $$;$$194 = $117;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $117;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $130 = ((($$3)) + -1|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = HEAP32[$2>>2]|0;
       $133 = ((($132)) + 1|0);
       HEAP32[$2>>2] = $133;
       HEAP8[$132>>0] = $131;
       $134 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $134;$$3 = $130;
      }
     }
    } while(0);
    $135 = HEAP32[$2>>2]|0;
    $136 = ($67|0)==($135|0);
    if ($136) {
     $$2 = $$$097;
    } else {
     $$0$i$i106 = $135;$$07$i$i = $67;
     while(1) {
      $137 = ((($$0$i$i106)) + -1|0);
      $138 = ($$07$i$i>>>0)<($137>>>0);
      if (!($138)) {
       $$2 = $$$097;
       break L4;
      }
      $139 = HEAP8[$$07$i$i>>0]|0;
      $140 = HEAP8[$137>>0]|0;
      HEAP8[$$07$i$i>>0] = $140;
      HEAP8[$137>>0] = $139;
      $141 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $137;$$07$i$i = $141;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $142 = (($$0104) + 1)|0;
  $$0104 = $142;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $143 = HEAP32[$13>>2]|0;
  $$pn = $26 ? $143 : $13;
  $144 = (($$pn) + ($29)|0);
  $145 = HEAP32[$2>>2]|0;
  $$0$i$i = $145;$$pn$pn = $$pn;
  while(1) {
   $$sroa$08$0$i = ((($$pn$pn)) + 1|0);
   $146 = ($$sroa$08$0$i|0)==($144|0);
   if ($146) {
    break;
   }
   $147 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $149 = $3 & 176;
 $trunc = $149&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $150 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i40 = 0, $$0$i$i42 = 0, $$038 = 0, $$039 = 0, $$byval_copy = 0, $$sink = 0, $$sink1 = 0, $$sink73 = 0, $$sink74 = 0, $$sroa$051$0 = 0, $$sroa$059$0 = 0, $$sroa$068$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i41 = 0, $exitcond$i$i43 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 900|0;
 $7 = sp + 888|0;
 $8 = sp + 488|0;
 $9 = sp + 480|0;
 $10 = sp + 896|0;
 $11 = sp + 476|0;
 $12 = sp + 472|0;
 $13 = sp + 460|0;
 $14 = sp + 448|0;
 $15 = sp + 436|0;
 $16 = sp + 432|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,16692,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,16692,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $27 = $25;
  $28 = $24 << 2;
  $29 = (_malloc($28)|0);
  $30 = $29;
  $31 = ($29|0)==(0|0);
  if ($31) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $29;$$039 = $24;$$sroa$059$0 = $30;$$sroa$068$0 = $27;
  }
 } else {
  $$0 = $8;$$039 = $21;$$sroa$059$0 = 0;$$sroa$068$0 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv($9,$3);
 $32 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,20588)|0);
 $33 = HEAP32[$7>>2]|0;
 $34 = (($33) + ($$039)|0);
 $35 = HEAP32[$32>>2]|0;
 $36 = ((($35)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 (FUNCTION_TABLE_iiiii[$37 & 511]($32,$33,$34,$$0)|0);
 $38 = ($$039|0)==(0);
 if ($38) {
  $48 = 0;
 } else {
  $39 = HEAP32[$7>>2]|0;
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(45);
  $48 = $41;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $42 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$42>>2] = 0;
  $43 = (($$0$i$i) + 1)|0;
  $$0$i$i = $43;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i40 = 0;
 while(1) {
  $exitcond$i$i41 = ($$0$i$i40|0)==(3);
  if ($exitcond$i$i41) {
   break;
  }
  $44 = (($14) + ($$0$i$i40<<2)|0);
  HEAP32[$44>>2] = 0;
  $45 = (($$0$i$i40) + 1)|0;
  $$0$i$i40 = $45;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i42 = 0;
 while(1) {
  $exitcond$i$i43 = ($$0$i$i42|0)==(3);
  if ($exitcond$i$i43) {
   break;
  }
  $46 = (($15) + ($$0$i$i42<<2)|0);
  HEAP32[$46>>2] = 0;
  $47 = (($$0$i$i42) + 1)|0;
  $$0$i$i42 = $47;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$48,$9,$10,$11,$12,$13,$14,$15,$16);
 $49 = HEAP32[$16>>2]|0;
 $50 = ($$039|0)>($49|0);
 if ($50) {
  $51 = (($$039) - ($49))|0;
  $52 = $51 << 1;
  $53 = ((($15)) + 8|0);
  $54 = ((($53)) + 3|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = ((($15)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $55&255;
  $60 = $56 ? $58 : $59;
  $61 = (($60) + ($52))|0;
  $62 = ((($14)) + 8|0);
  $63 = ((($62)) + 3|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)<(0);
  $66 = ((($14)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $64&255;
  $69 = $65 ? $67 : $68;
  $$sink1 = 1;$$sink73 = $61;$$sink74 = $69;
 } else {
  $70 = ((($15)) + 8|0);
  $71 = ((($70)) + 3|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = ($72<<24>>24)<(0);
  $74 = ((($15)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $72&255;
  $77 = $73 ? $75 : $76;
  $78 = ((($14)) + 8|0);
  $79 = ((($78)) + 3|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)<(0);
  $82 = ((($14)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $80&255;
  $85 = $81 ? $83 : $84;
  $$sink1 = 2;$$sink73 = $85;$$sink74 = $77;
 }
 $86 = (($$sink74) + ($49))|0;
 $$sink = (($86) + ($$sink73))|0;
 $87 = (($$sink) + ($$sink1))|0;
 $88 = ($87>>>0)>(100);
 if ($88) {
  $89 = $87 << 2;
  $90 = (_malloc($89)|0);
  $91 = $90;
  $92 = ($90|0)==(0|0);
  if ($92) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$038 = $90;$$sroa$051$0 = $91;
  }
 } else {
  $$038 = $17;$$sroa$051$0 = 0;
 }
 $93 = ((($3)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($$0) + ($$039<<2)|0);
 $96 = HEAP32[$11>>2]|0;
 $97 = HEAP32[$12>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$038,$18,$19,$94,$$0,$95,$32,$48,$10,$96,$97,$13,$14,$15,$49);
 $98 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $98;
 $99 = HEAP32[$18>>2]|0;
 $100 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $101 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$038,$99,$100,$3,$4)|0);
 $102 = ($$sroa$051$0|0)==(0);
 if (!($102)) {
  $103 = $$sroa$051$0;
  _free($103);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__26localeD2Ev($9);
 $104 = ($$sroa$059$0|0)==(0);
 if (!($104)) {
  $105 = $$sroa$059$0;
  _free($105);
 }
 $106 = ($$sroa$068$0|0)==(0);
 if (!($106)) {
  $107 = $$sroa$068$0;
  _free($107);
 }
 STACKTOP = sp;return ($101|0);
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i27 = 0, $$0$i$i29 = 0, $$byval_copy = 0, $$sink = 0, $$sink1 = 0, $$sink47 = 0, $$sink48 = 0, $$sroa$041$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i28 = 0, $exitcond$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 468|0;
 $6 = sp + 464|0;
 $7 = sp + 472|0;
 $8 = sp + 460|0;
 $9 = sp + 456|0;
 $10 = sp + 444|0;
 $11 = sp + 432|0;
 $12 = sp + 420|0;
 $13 = sp + 416|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20588)|0);
 $19 = ((($5)) + 8|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 $23 = ((($5)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21&255;
 $26 = $22 ? $24 : $25;
 $27 = ($26|0)==(0);
 if ($27) {
  $42 = 0;
 } else {
  $28 = HEAP32[$5>>2]|0;
  $29 = $22 ? $28 : $5;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$18>>2]|0;
  $32 = ((($31)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_iii[$33 & 511]($18,45)|0);
  $35 = ($30|0)==($34|0);
  $42 = $35;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $36 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$36>>2] = 0;
  $37 = (($$0$i$i) + 1)|0;
  $$0$i$i = $37;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i27 = 0;
 while(1) {
  $exitcond$i$i28 = ($$0$i$i27|0)==(3);
  if ($exitcond$i$i28) {
   break;
  }
  $38 = (($11) + ($$0$i$i27<<2)|0);
  HEAP32[$38>>2] = 0;
  $39 = (($$0$i$i27) + 1)|0;
  $$0$i$i27 = $39;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $40 = (($12) + ($$0$i$i29<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = (($$0$i$i29) + 1)|0;
  $$0$i$i29 = $41;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$42,$6,$7,$8,$9,$10,$11,$12,$13);
 $43 = HEAP8[$20>>0]|0;
 $44 = ($43<<24>>24)<(0);
 $45 = HEAP32[$23>>2]|0;
 $46 = $43&255;
 $47 = $44 ? $45 : $46;
 $48 = HEAP32[$13>>2]|0;
 $49 = ($47|0)>($48|0);
 if ($49) {
  $50 = (($47) - ($48))|0;
  $51 = $50 << 1;
  $52 = ((($12)) + 8|0);
  $53 = ((($52)) + 3|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = ((($12)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $54&255;
  $59 = $55 ? $57 : $58;
  $60 = (($59) + ($51))|0;
  $61 = ((($11)) + 8|0);
  $62 = ((($61)) + 3|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63<<24>>24)<(0);
  $65 = ((($11)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $63&255;
  $68 = $64 ? $66 : $67;
  $$sink1 = 1;$$sink47 = $60;$$sink48 = $68;
 } else {
  $69 = ((($12)) + 8|0);
  $70 = ((($69)) + 3|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)<(0);
  $73 = ((($12)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $71&255;
  $76 = $72 ? $74 : $75;
  $77 = ((($11)) + 8|0);
  $78 = ((($77)) + 3|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = ($79<<24>>24)<(0);
  $81 = ((($11)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $79&255;
  $84 = $80 ? $82 : $83;
  $$sink1 = 2;$$sink47 = $84;$$sink48 = $76;
 }
 $85 = (($$sink48) + ($48))|0;
 $$sink = (($85) + ($$sink47))|0;
 $86 = (($$sink) + ($$sink1))|0;
 $87 = ($86>>>0)>(100);
 if ($87) {
  $88 = $86 << 2;
  $89 = (_malloc($88)|0);
  $90 = $89;
  $91 = ($89|0)==(0|0);
  if ($91) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $$0 = $89;$$sroa$041$0 = $90;
  }
 } else {
  $$0 = $14;$$sroa$041$0 = 0;
 }
 $92 = ((($3)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$5>>2]|0;
 $95 = $44 ? $94 : $5;
 $96 = (($95) + ($47<<2)|0);
 $97 = HEAP32[$8>>2]|0;
 $98 = HEAP32[$9>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$0,$15,$16,$93,$95,$96,$18,$42,$7,$97,$98,$10,$11,$12,$48);
 $99 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $99;
 $100 = HEAP32[$15>>2]|0;
 $101 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $102 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$100,$101,$3,$4)|0);
 $103 = ($$sroa$041$0|0)==(0);
 if (!($103)) {
  $104 = $$sroa$041$0;
  _free($104);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__26localeD2Ev($6);
 STACKTOP = sp;return ($102|0);
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$0$i$i$i67 = 0, $$0$i$i$i71 = 0, $$pre$phi$i$i65Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i62 = 0, $exitcond$i$i$i68 = 0, $exitcond$i$i$i72 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = sp + 163|0;
 $13 = sp + 162|0;
 $14 = sp + 148|0;
 $15 = sp + 144|0;
 $16 = sp + 140|0;
 $17 = sp + 136|0;
 $18 = sp + 132|0;
 $19 = sp + 128|0;
 $20 = sp + 161|0;
 $21 = sp + 160|0;
 $22 = sp + 124|0;
 $23 = sp + 120|0;
 $24 = sp + 116|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,22292)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 511]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 511]($27,$38);
   $46 = ((($8)) + 8|0);
   $47 = ((($46)) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)<(0);
   if ($49) {
    $50 = HEAP32[$8>>2]|0;
    HEAP32[$24>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($50,$24);
    $51 = ((($8)) + 4|0);
    HEAP32[$51>>2] = 0;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
    HEAP8[$47>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $52 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$52>>2] = 0;
    $53 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $53;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  } else {
   $54 = HEAP32[$38>>2]|0;
   $55 = ((($54)) + 40|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vii[$56 & 511]($28,$38);
   $57 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$57&255;HEAP8[$3+1>>0]=($57>>8)&255;HEAP8[$3+2>>0]=($57>>16)&255;HEAP8[$3+3>>0]=$57>>24;
   $58 = HEAP32[$38>>2]|0;
   $59 = ((($58)) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 511]($29,$38);
   $61 = ((($8)) + 8|0);
   $62 = ((($61)) + 3|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$8>>2]|0;
    HEAP32[$22>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($65,$22);
    $66 = ((($8)) + 4|0);
    HEAP32[$66>>2] = 0;
   } else {
    HEAP32[$23>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$23);
    HEAP8[$62>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$29>>2]|0;HEAP32[$8+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i47 = 0;
   while(1) {
    $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
    if ($exitcond$i$i$i48) {
     break;
    }
    $67 = (($29) + ($$0$i$i$i47<<2)|0);
    HEAP32[$67>>2] = 0;
    $68 = (($$0$i$i$i47) + 1)|0;
    $$0$i$i$i47 = $68;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($29);
  }
  $69 = HEAP32[$38>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_ii[$71 & 511]($38)|0);
  HEAP32[$4>>2] = $72;
  $73 = HEAP32[$38>>2]|0;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (FUNCTION_TABLE_ii[$75 & 511]($38)|0);
  HEAP32[$5>>2] = $76;
  $77 = HEAP32[$38>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 511]($30,$38);
  $80 = ((($6)) + 11|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)<(0);
  if ($82) {
   $83 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($83,$20);
   $84 = ((($6)) + 4|0);
   HEAP32[$84>>2] = 0;
   $$pre$phi$i$iZ2D = $6;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$80>>0] = 0;
   $$pre$phi$i$iZ2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$30>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i50 = 0;
  while(1) {
   $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
   if ($exitcond$i$i$i51) {
    break;
   }
   $85 = (($30) + ($$0$i$i$i50<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($$0$i$i$i50) + 1)|0;
   $$0$i$i$i50 = $86;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $87 = HEAP32[$38>>2]|0;
  $88 = ((($87)) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  FUNCTION_TABLE_vii[$89 & 511]($31,$38);
  $90 = ((($7)) + 8|0);
  $91 = ((($90)) + 3|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ($92<<24>>24)<(0);
  if ($93) {
   $94 = HEAP32[$7>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($94,$18);
   $95 = ((($7)) + 4|0);
   HEAP32[$95>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$19);
   HEAP8[$91>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$31>>2]|0;HEAP32[$7+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $96 = (($31) + ($$0$i$i$i53<<2)|0);
   HEAP32[$96>>2] = 0;
   $97 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $97;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($31);
  $98 = HEAP32[$38>>2]|0;
  $99 = ((($98)) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 511]($38)|0);
  $storemerge = $101;
 } else {
  $102 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,22284)|0);
  if ($1) {
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($103)) + 44|0);
   $105 = HEAP32[$104>>2]|0;
   FUNCTION_TABLE_vii[$105 & 511]($32,$102);
   $106 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$106&255;HEAP8[$3+1>>0]=($106>>8)&255;HEAP8[$3+2>>0]=($106>>16)&255;HEAP8[$3+3>>0]=$106>>24;
   $107 = HEAP32[$102>>2]|0;
   $108 = ((($107)) + 32|0);
   $109 = HEAP32[$108>>2]|0;
   FUNCTION_TABLE_vii[$109 & 511]($33,$102);
   $110 = ((($8)) + 8|0);
   $111 = ((($110)) + 3|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = ($112<<24>>24)<(0);
   if ($113) {
    $114 = HEAP32[$8>>2]|0;
    HEAP32[$16>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($114,$16);
    $115 = ((($8)) + 4|0);
    HEAP32[$115>>2] = 0;
   } else {
    HEAP32[$17>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
    HEAP8[$111>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$33>>2]|0;HEAP32[$8+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i57 = 0;
   while(1) {
    $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
    if ($exitcond$i$i$i58) {
     break;
    }
    $116 = (($33) + ($$0$i$i$i57<<2)|0);
    HEAP32[$116>>2] = 0;
    $117 = (($$0$i$i$i57) + 1)|0;
    $$0$i$i$i57 = $117;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  } else {
   $118 = HEAP32[$102>>2]|0;
   $119 = ((($118)) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   FUNCTION_TABLE_vii[$120 & 511]($34,$102);
   $121 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$121&255;HEAP8[$3+1>>0]=($121>>8)&255;HEAP8[$3+2>>0]=($121>>16)&255;HEAP8[$3+3>>0]=$121>>24;
   $122 = HEAP32[$102>>2]|0;
   $123 = ((($122)) + 28|0);
   $124 = HEAP32[$123>>2]|0;
   FUNCTION_TABLE_vii[$124 & 511]($35,$102);
   $125 = ((($8)) + 8|0);
   $126 = ((($125)) + 3|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = ($127<<24>>24)<(0);
   if ($128) {
    $129 = HEAP32[$8>>2]|0;
    HEAP32[$14>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($129,$14);
    $130 = ((($8)) + 4|0);
    HEAP32[$130>>2] = 0;
   } else {
    HEAP32[$15>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$15);
    HEAP8[$126>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$35>>2]|0;HEAP32[$8+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i61 = 0;
   while(1) {
    $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
    if ($exitcond$i$i$i62) {
     break;
    }
    $131 = (($35) + ($$0$i$i$i61<<2)|0);
    HEAP32[$131>>2] = 0;
    $132 = (($$0$i$i$i61) + 1)|0;
    $$0$i$i$i61 = $132;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  }
  $133 = HEAP32[$102>>2]|0;
  $134 = ((($133)) + 12|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (FUNCTION_TABLE_ii[$135 & 511]($102)|0);
  HEAP32[$4>>2] = $136;
  $137 = HEAP32[$102>>2]|0;
  $138 = ((($137)) + 16|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (FUNCTION_TABLE_ii[$139 & 511]($102)|0);
  HEAP32[$5>>2] = $140;
  $141 = HEAP32[$102>>2]|0;
  $142 = ((($141)) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vii[$143 & 511]($36,$102);
  $144 = ((($6)) + 11|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = ($145<<24>>24)<(0);
  if ($146) {
   $147 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($147,$12);
   $148 = ((($6)) + 4|0);
   HEAP32[$148>>2] = 0;
   $$pre$phi$i$i65Z2D = $6;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$144>>0] = 0;
   $$pre$phi$i$i65Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i65Z2D>>2]=HEAP32[$36>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$pre$phi$i$i65Z2D+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $149 = (($36) + ($$0$i$i$i67<<2)|0);
   HEAP32[$149>>2] = 0;
   $150 = (($$0$i$i$i67) + 1)|0;
   $$0$i$i$i67 = $150;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $151 = HEAP32[$102>>2]|0;
  $152 = ((($151)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  FUNCTION_TABLE_vii[$153 & 511]($37,$102);
  $154 = ((($7)) + 8|0);
  $155 = ((($154)) + 3|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = ($156<<24>>24)<(0);
  if ($157) {
   $158 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($158,$10);
   $159 = ((($7)) + 4|0);
   HEAP32[$159>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$11);
   HEAP8[$155>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$37>>2]|0;HEAP32[$7+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $160 = (($37) + ($$0$i$i$i71<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $161;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($37);
  $162 = HEAP32[$102>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 511]($102)|0);
  $storemerge = $165;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0;
 var $$3 = 0, $$pre137 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$64 = $61;
     while(1) {
      $65 = ($64|0)==($62|0);
      if ($65) {
       break;
      }
      $66 = HEAP32[$64>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($64)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$64 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $$$099 = $7 ? $70 : $$099;
    $$0103 = $$$099;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 511]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($$$099>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 511]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($$$099|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 511]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $135 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0 = -1;$$095 = 0;$$097 = 0;$$3 = $$2105;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0 = $111;$$095 = 0;$$097 = 0;$$3 = $$2105;
     }
     while(1) {
      $112 = ($$3|0)==($$$099|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = HEAP8[$24>>0]|0;
       $118 = ($117<<24>>24)<(0);
       $119 = HEAP32[$25>>2]|0;
       $120 = $117&255;
       $121 = $118 ? $119 : $120;
       $122 = ($116>>>0)<($121>>>0);
       if ($122) {
        $123 = HEAP32[$11>>2]|0;
        $124 = $118 ? $123 : $11;
        $125 = (($124) + ($116)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = ($126<<24>>24)==(127);
        $128 = $126 << 24 >> 24;
        $$ = $127 ? -1 : $128;
        $$1 = $$;$$196 = $116;$$198 = 0;$132 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$132 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$132 = $114;
      }
      $129 = ((($$3)) + -4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($132)) + 4|0);
      HEAP32[$2>>2] = $131;
      HEAP32[$132>>2] = $130;
      $133 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $133;$$3 = $129;
     }
     $$pre137 = HEAP32[$2>>2]|0;
     $135 = $$pre137;
    }
    $134 = ($69|0)==($135|0);
    if ($134) {
     $$2 = $$$099;
    } else {
     $$0$i$i108 = $135;$$07$i$i = $69;
     while(1) {
      $136 = ((($$0$i$i108)) + -4|0);
      $137 = ($$07$i$i>>>0)<($136>>>0);
      if (!($137)) {
       $$2 = $$$099;
       break L4;
      }
      $138 = HEAP32[$$07$i$i>>2]|0;
      $139 = HEAP32[$136>>2]|0;
      HEAP32[$$07$i$i>>2] = $139;
      HEAP32[$136>>2] = $138;
      $140 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $136;$$07$i$i = $140;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $141 = (($$0106) + 1)|0;
  $$0106 = $141;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $142 = HEAP32[$13>>2]|0;
  $143 = ((($142)) + 4|0);
  $144 = $27 ? $143 : $17;
  $145 = $27 ? $142 : $13;
  $146 = (($145) + ($30<<2)|0);
  $147 = HEAP32[$2>>2]|0;
  $148 = $144;
  $149 = $146;
  $150 = (($149) - ($148))|0;
  $$0$i$i = $147;$151 = $144;
  while(1) {
   $152 = ($151|0)==($146|0);
   if ($152) {
    break;
   }
   $153 = HEAP32[$151>>2]|0;
   HEAP32[$$0$i$i>>2] = $153;
   $154 = ((($151)) + 4|0);
   $155 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $155;$151 = $154;
  }
  $156 = $150 >>> 2;
  $scevgep$i = (($147) + ($156<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $157 = $3 & 176;
 $trunc = $157&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $158 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $158;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $$ = $9 >>> $11;
 return ($$|0);
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($5)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $10&255;
 $16 = $11 ? $12 : $5;
 $17 = $11 ? $14 : $15;
 $18 = (($16) + ($17)|0);
 $$0$i22 = $16;
 while(1) {
  $19 = ($$0$i22>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = HEAP8[$$0$i22>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$20);
  $21 = ((($$0$i22)) + 1|0);
  $$0$i22 = $21;
 }
 $22 = ($2|0)==(-1);
 $23 = $2 << 1;
 $24 = $23;
 $25 = $22 ? (-1) : $24;
 $26 = ((($6)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 $29 = HEAP32[$6>>2]|0;
 $30 = $28 ? $29 : $6;
 $31 = (_catgets($25,$3,$4,$30)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $32 = (($0) + ($$0$i$i17<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $33;
 }
 $34 = (_strlen($31)|0);
 $35 = (($30) + ($34)|0);
 $$0$i = $30;
 while(1) {
  $36 = ($$0$i>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[$$0$i>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$37);
  $38 = ((($$0$i)) + 1|0);
  $$0$i = $38;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNKSt3__28messagesIcE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $$ = $9 >>> $11;
 return ($$|0);
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i18 = 0, $$0$i21 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i19 = 0, $or$cond$i = 0, $or$cond$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 184|0;
 $7 = sp + 192|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 168|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($14) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($15)) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = (8568);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($5)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $22&255;
 $28 = $23 ? $24 : $5;
 $29 = $23 ? $26 : $27;
 $30 = (($28) + ($29<<2)|0);
 $31 = ((($7)) + 32|0);
 $$016$i = $28;$$017$i = 0;
 while(1) {
  $32 = ($$016$i>>>0)<($30>>>0);
  $33 = ($$017$i|0)!=(2);
  $34 = $33 & $32;
  if (!($34)) {
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $35 = HEAP32[$15>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($15,$6,$$016$i,$30,$9,$7,$31,$8)|0);
  $39 = ($38|0)==(2);
  $40 = HEAP32[$9>>2]|0;
  $41 = ($40|0)==($$016$i|0);
  $or$cond$i20 = $39 | $41;
  if ($or$cond$i20) {
   label = 7;
   break;
  } else {
   $$0$i21 = $7;
  }
  while(1) {
   $42 = HEAP32[$8>>2]|0;
   $43 = ($$0$i21>>>0)<($42>>>0);
   if (!($43)) {
    break;
   }
   $45 = HEAP8[$$0$i21>>0]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($14,$45);
   $46 = ((($$0$i21)) + 1|0);
   $$0$i21 = $46;
  }
  $44 = HEAP32[$9>>2]|0;
  $$016$i = $44;$$017$i = $38;
 }
 if ((label|0) == 7) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 __ZNSt3__26locale5facetD2Ev($15);
 $47 = ($2|0)==(-1);
 $48 = $2 << 1;
 $49 = $48;
 $50 = $47 ? (-1) : $49;
 $51 = ((($14)) + 11|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = ($52<<24>>24)<(0);
 $54 = HEAP32[$14>>2]|0;
 $55 = $53 ? $54 : $14;
 $56 = (_catgets($50,$3,$4,$55)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i18 = 0;
 while(1) {
  $exitcond$i$i19 = ($$0$i$i18|0)==(3);
  if ($exitcond$i$i19) {
   break;
  }
  $57 = (($0) + ($$0$i$i18<<2)|0);
  HEAP32[$57>>2] = 0;
  $58 = (($$0$i$i18) + 1)|0;
  $$0$i$i18 = $58;
 }
 $59 = ((($16)) + 4|0);
 HEAP32[$59>>2] = 0;
 HEAP32[$16>>2] = (8616);
 $60 = (_strlen($56)|0);
 $61 = (($55) + ($60)|0);
 $62 = $61;
 $63 = ((($11)) + 128|0);
 $$019$i = $55;$$020$i = 0;
 while(1) {
  $64 = ($$019$i>>>0)<($61>>>0);
  $65 = ($$020$i|0)!=(2);
  $66 = $65 & $64;
  if (!($66)) {
   label = 21;
   break;
  }
  HEAP32[$13>>2] = $$019$i;
  $67 = HEAP32[$16>>2]|0;
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $$019$i;
  $71 = (($62) - ($70))|0;
  $72 = ($71|0)>(32);
  $73 = ((($$019$i)) + 32|0);
  $74 = $72 ? $73 : $61;
  $75 = (FUNCTION_TABLE_iiiiiiiii[$69 & 511]($16,$10,$$019$i,$74,$13,$11,$63,$12)|0);
  $76 = ($75|0)==(2);
  $77 = HEAP32[$13>>2]|0;
  $78 = ($77|0)==($$019$i|0);
  $or$cond$i = $76 | $78;
  if ($or$cond$i) {
   label = 17;
   break;
  } else {
   $$0$i = $11;
  }
  while(1) {
   $79 = HEAP32[$12>>2]|0;
   $80 = ($$0$i>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $82 = HEAP32[$$0$i>>2]|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$82);
   $83 = ((($$0$i)) + 4|0);
   $$0$i = $83;
  }
  $81 = HEAP32[$13>>2]|0;
  $$019$i = $81;$$020$i = $75;
 }
 if ((label|0) == 17) {
  __ZNSt3__221__throw_runtime_errorEPKc(0);
  // unreachable;
 }
 else if ((label|0) == 21) {
  __ZNSt3__26locale5facetD2Ev($16);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__28messagesIwE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$091 = 0, $$185 = 0, $$589 = 0, $$off = 0, $$pre = 0, $$pre$sink = 0, $$pre132 = 0, $$pre134 = 0, $$pre136 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre136 = $1;
 if ($6) {
  $$091 = 0;$$185 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre136) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$091 = 0;$$185 = $$;
    } else {
     $$091 = 0;$$185 = $0;
    }
   } else {
    $$091 = 0;$$185 = $0;
   }
  } else {
   $$091 = 0;$$185 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$185>>>0)<($1>>>0);
  $20 = ($$091>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 34;
   break;
  }
  $21 = HEAP8[$$185>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)>(-1);
  do {
   if ($23) {
    $24 = ($22>>>0)>($3>>>0);
    if ($24) {
     label = 34;
     break L6;
    }
    $25 = ((($$185)) + 1|0);
    $$589 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 34;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$185;
     $29 = (($$pre136) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 34;
      break L6;
     }
     $31 = ((($$185)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 34;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     if ($40) {
      label = 34;
      break L6;
     }
     $41 = ((($$185)) + 2|0);
     $$589 = $41;
     break;
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$185;
     $44 = (($$pre136) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 34;
      break L6;
     }
     $46 = ((($$185)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$185)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       $$pre$sink = $43;
       break L6;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       $$pre$sink = $43;
       break L6;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$pre$sink = $43;
       break L6;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      label = 34;
      break L6;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$185)) + 3|0);
     if ($67) {
      label = 34;
      break L6;
     } else {
      $$589 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     label = 34;
     break L6;
    }
    $70 = $$185;
    $71 = (($$pre136) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     label = 34;
     break L6;
    }
    $73 = ((($$185)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = ((($$185)) + 2|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$185)) + 3|0);
    $78 = HEAP8[$77>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($74) + 112)<<24>>24;
     $79 = ($$off&255)<(48);
     if (!($79)) {
      $$pre$sink = $70;
      break L6;
     }
     break;
    }
    case -12:  {
     $80 = $74 & -16;
     $81 = ($80<<24>>24)==(-128);
     if (!($81)) {
      $$pre$sink = $70;
      break L6;
     }
     break;
    }
    default: {
     $82 = $74 & -64;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      $$pre$sink = $70;
      break L6;
     }
    }
    }
    $84 = $76&255;
    $85 = $84 & 192;
    $86 = ($85|0)==(128);
    if (!($86)) {
     label = 34;
     break L6;
    }
    $87 = $78&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     label = 34;
     break L6;
    }
    $90 = $22 << 18;
    $91 = $90 & 1835008;
    $92 = $74 & 63;
    $93 = $92&255;
    $94 = $93 << 12;
    $95 = $94 | $91;
    $96 = $84 << 6;
    $97 = $96 & 4032;
    $98 = $95 | $97;
    $99 = $87 & 63;
    $100 = $98 | $99;
    $101 = ($100>>>0)>($3>>>0);
    $102 = ((($$185)) + 4|0);
    if ($101) {
     label = 34;
     break L6;
    } else {
     $$589 = $102;
    }
   }
  } while(0);
  $103 = (($$091) + 1)|0;
  $$091 = $103;$$185 = $$589;
 }
 if ((label|0) == 34) {
  $$pre = $$185;
  $$pre$sink = $$pre;
 }
 $$pre132 = $0;
 $$pre134 = (($$pre$sink) - ($$pre132))|0;
 return ($$pre134|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink106 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 L9: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   label = 36;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   label = 36;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  do {
   if ($30) {
    $31 = ($29>>>0)>($6>>>0);
    if ($31) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $29;$$sink106 = 1;
    }
   } else {
    $32 = ($28&255)<(194);
    if ($32) {
     $$9 = 2;
     break L9;
    }
    $33 = ($28&255)<(224);
    if ($33) {
     $34 = $24;
     $35 = (($$pre$phiZ2D) - ($34))|0;
     $36 = ($35|0)<(2);
     if ($36) {
      $$9 = 1;
      break L9;
     }
     $37 = ((($24)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 & 192;
     $41 = ($40|0)==(128);
     if (!($41)) {
      $$9 = 2;
      break L9;
     }
     $42 = $29 << 6;
     $43 = $42 & 1984;
     $44 = $39 & 63;
     $45 = $44 | $43;
     $46 = ($45>>>0)>($6>>>0);
     if ($46) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $45;$$sink106 = 2;
      break;
     }
    }
    $47 = ($28&255)<(240);
    if ($47) {
     $48 = $24;
     $49 = (($$pre$phiZ2D) - ($48))|0;
     $50 = ($49|0)<(3);
     if ($50) {
      $$9 = 1;
      break L9;
     }
     $51 = ((($24)) + 1|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ((($24)) + 2|0);
     $54 = HEAP8[$53>>0]|0;
     switch ($28<<24>>24) {
     case -32:  {
      $55 = $52 & -32;
      $56 = ($55<<24>>24)==(-96);
      if (!($56)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $57 = $52 & -32;
      $58 = ($57<<24>>24)==(-128);
      if (!($58)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $59 = $52 & -64;
      $60 = ($59<<24>>24)==(-128);
      if (!($60)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $61 = $54&255;
     $62 = $61 & 192;
     $63 = ($62|0)==(128);
     if (!($63)) {
      $$9 = 2;
      break L9;
     }
     $64 = $29 << 12;
     $65 = $64 & 61440;
     $66 = $52 & 63;
     $67 = $66&255;
     $68 = $67 << 6;
     $69 = $68 | $65;
     $70 = $61 & 63;
     $71 = $69 | $70;
     $72 = ($71>>>0)>($6>>>0);
     if ($72) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $71;$$sink106 = 3;
      break;
     }
    }
    $73 = ($28&255)<(245);
    if (!($73)) {
     $$9 = 2;
     break L9;
    }
    $74 = $24;
    $75 = (($$pre$phiZ2D) - ($74))|0;
    $76 = ($75|0)<(4);
    if ($76) {
     $$9 = 1;
     break L9;
    }
    $77 = ((($24)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($24)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($24)) + 3|0);
    $82 = HEAP8[$81>>0]|0;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($78) + 112)<<24>>24;
     $83 = ($$off&255)<(48);
     if (!($83)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $84 = $78 & -16;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $86 = $78 & -64;
     $87 = ($86<<24>>24)==(-128);
     if (!($87)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $88 = $80&255;
    $89 = $88 & 192;
    $90 = ($89|0)==(128);
    if (!($90)) {
     $$9 = 2;
     break L9;
    }
    $91 = $82&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $$9 = 2;
     break L9;
    }
    $94 = $29 << 18;
    $95 = $94 & 1835008;
    $96 = $78 & 63;
    $97 = $96&255;
    $98 = $97 << 12;
    $99 = $98 | $95;
    $100 = $88 << 6;
    $101 = $100 & 4032;
    $102 = $99 | $101;
    $103 = $91 & 63;
    $104 = $102 | $103;
    $105 = ($104>>>0)>($6>>>0);
    if ($105) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $104;$$sink106 = 4;
    }
   }
  } while(0);
  HEAP32[$26>>2] = $$sink;
  $106 = (($24) + ($$sink106)|0);
  HEAP32[$2>>2] = $106;
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 4|0);
  HEAP32[$5>>2] = $108;
 }
 if ((label|0) == 36) {
  $109 = $25&1;
  $$9 = $109;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $$pre49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre49 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre49) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$2 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $18 = $$pre;
   while(1) {
    $19 = ($18>>>0)<($1>>>0);
    if (!($19)) {
     $$2 = 0;
     break L4;
    }
    $20 = HEAP32[$18>>2]|0;
    $21 = $20 & -2048;
    $22 = ($21|0)==(55296);
    $23 = ($20>>>0)>($6>>>0);
    $or$cond = $23 | $22;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $24 = ($20>>>0)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre49) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$2 = 1;
       break L4;
      }
      $29 = $20&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($20>>>0)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre49) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$2 = 1;
        break L4;
       }
       $36 = $20 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $20 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($20>>>0)<(65536);
      $46 = HEAP32[$5>>2]|0;
      $47 = $46;
      $48 = (($$pre49) - ($47))|0;
      if ($45) {
       $49 = ($48|0)<(3);
       if ($49) {
        $$2 = 1;
        break L4;
       }
       $50 = $20 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $20 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $20 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      } else {
       $65 = ($48|0)<(4);
       if ($65) {
        $$2 = 1;
        break L4;
       }
       $66 = $20 >>> 18;
       $67 = $66 | 240;
       $68 = $67&255;
       $69 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $69;
       HEAP8[$46>>0] = $68;
       $70 = $20 >>> 12;
       $71 = $70 & 63;
       $72 = $71 | 128;
       $73 = $72&255;
       $74 = HEAP32[$5>>2]|0;
       $75 = ((($74)) + 1|0);
       HEAP32[$5>>2] = $75;
       HEAP8[$74>>0] = $73;
       $76 = $20 >>> 6;
       $77 = $76 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$5>>2]|0;
       $81 = ((($80)) + 1|0);
       HEAP32[$5>>2] = $81;
       HEAP8[$80>>0] = $79;
       $82 = $20 & 63;
       $83 = $82 | 128;
       $84 = $83&255;
       $85 = HEAP32[$5>>2]|0;
       $86 = ((($85)) + 1|0);
       HEAP32[$5>>2] = $86;
       HEAP8[$85>>0] = $84;
       break;
      }
     }
    } while(0);
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 4|0);
    HEAP32[$2>>2] = $88;
    $18 = $88;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph85 = 0, $$pre = 0, $$pre113 = 0, $$pre114 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $74 = $$077;
   label = 35;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (___uselocale($34)|0);
  $36 = (_wcsnrtombs($$079,$4,$31,$33,$1)|0);
  $37 = ($35|0)==(0|0);
  if (!($37)) {
   (___uselocale($35)|0);
  }
  switch ($36|0) {
  case -1:  {
   label = 10;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 32;
   break L6;
   break;
  }
  default: {
  }
  }
  $50 = HEAP32[$7>>2]|0;
  $51 = (($50) + ($36)|0);
  HEAP32[$7>>2] = $51;
  $52 = ($51|0)==($6|0);
  if ($52) {
   label = 33;
   break;
  }
  $53 = ($$171|0)==($3|0);
  if ($53) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph85 = $3;$77 = $51;$78 = $$pre;
  } else {
   $54 = HEAP32[$15>>2]|0;
   $55 = (___uselocale($54)|0);
   $56 = (_wcrtomb($9,0,$1)|0);
   $57 = ($55|0)==(0|0);
   if (!($57)) {
    (___uselocale($55)|0);
   }
   $58 = ($56|0)==(-1);
   if ($58) {
    $$173 = 2;
    label = 31;
    break;
   }
   $59 = HEAP32[$7>>2]|0;
   $60 = (($14) - ($59))|0;
   $61 = ($56>>>0)>($60>>>0);
   if ($61) {
    $$173 = 1;
    label = 31;
    break;
   } else {
    $$0 = $9;$$069 = $56;
   }
   while(1) {
    $62 = ($$069|0)==(0);
    if ($62) {
     break;
    }
    $65 = ((($$0)) + 1|0);
    $66 = HEAP8[$$0>>0]|0;
    $67 = HEAP32[$7>>2]|0;
    $68 = ((($67)) + 1|0);
    HEAP32[$7>>2] = $68;
    HEAP8[$67>>0] = $66;
    $69 = (($$069) + -1)|0;
    $$0 = $65;$$069 = $69;
   }
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 4|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $70 = ($$2|0)==($3|0);
    if ($70) {
     $$2$lcssa = $3;
     break;
    }
    $71 = HEAP32[$$2>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $$2$lcssa = $$2;
     break;
    }
    $73 = ((($$2)) + 4|0);
    $$2 = $73;
   }
   $$pre113 = HEAP32[$7>>2]|0;
   $$5$ph85 = $$2$lcssa;$77 = $$pre113;$78 = $64;
  }
  $$077 = $78;$$079 = $77;$$171 = $$5$ph85;
 }
 if ((label|0) == 10) {
  HEAP32[$7>>2] = $$079;
  $$178 = $$077;$43 = $$079;
  while(1) {
   $38 = HEAP32[$4>>2]|0;
   $39 = ($$178|0)==($38|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$178>>2]|0;
   $41 = HEAP32[$15>>2]|0;
   $42 = (___uselocale($41)|0);
   $44 = (_wcrtomb($43,$40,$8)|0);
   $45 = ($42|0)==(0|0);
   if (!($45)) {
    (___uselocale($42)|0);
   }
   $46 = ($44|0)==(-1);
   if ($46) {
    break;
   }
   $47 = HEAP32[$7>>2]|0;
   $48 = (($47) + ($44)|0);
   HEAP32[$7>>2] = $48;
   $49 = ((($$178)) + 4|0);
   $$178 = $49;$43 = $48;
  }
  HEAP32[$4>>2] = $$178;
  $$375$ph = 2;
  label = 32;
 }
 else if ((label|0) == 31) {
  $$375$ph = $$173;
  label = 32;
 }
 else if ((label|0) == 33) {
  $$pre114 = HEAP32[$4>>2]|0;
  $74 = $$pre114;
  label = 35;
 }
 if ((label|0) == 32) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 35) {
  $75 = ($74|0)!=($3|0);
  $76 = $75&1;
  $$476 = $76;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$pre109 = 0, $$pre110 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $68 = $$074;
   label = 32;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (___uselocale($33)|0);
  $35 = (_mbsnrtowcs($$077,$4,$29,$32,$1)|0);
  $36 = ($34|0)==(0|0);
  if (!($36)) {
   (___uselocale($34)|0);
  }
  $37 = ($35|0)==(-1);
  if ($37) {
   $$175 = $$074;$storemerge = $$077;
   label = 10;
   break;
  }
  $51 = HEAP32[$7>>2]|0;
  $52 = (($51) + ($35<<2)|0);
  HEAP32[$7>>2] = $52;
  $53 = ($52|0)==($6|0);
  if ($53) {
   label = 29;
   break;
  }
  $54 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($54) {
   $$4$ph = $3;$71 = $52;$72 = $$pre;
  } else {
   $55 = HEAP32[$14>>2]|0;
   $56 = (___uselocale($55)|0);
   $57 = (_mbrtowc($52,$$pre,1,$1)|0);
   $58 = ($56|0)==(0|0);
   if (!($58)) {
    (___uselocale($56)|0);
   }
   $59 = ($57|0)==(0);
   if (!($59)) {
    $$172$ph = 2;
    label = 28;
    break;
   }
   $60 = HEAP32[$7>>2]|0;
   $61 = ((($60)) + 4|0);
   HEAP32[$7>>2] = $61;
   $62 = HEAP32[$4>>2]|0;
   $63 = ((($62)) + 1|0);
   HEAP32[$4>>2] = $63;
   $$2 = $63;
   while(1) {
    $64 = ($$2|0)==($3|0);
    if ($64) {
     $$2$lcssa = $3;
     break;
    }
    $65 = HEAP8[$$2>>0]|0;
    $66 = ($65<<24>>24)==(0);
    if ($66) {
     $$2$lcssa = $$2;
     break;
    }
    $67 = ((($$2)) + 1|0);
    $$2 = $67;
   }
   $$pre109 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$71 = $$pre109;$72 = $63;
  }
  $$074 = $72;$$077 = $71;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   L28: while(1) {
    label = 0;
    HEAP32[$7>>2] = $storemerge;
    $38 = HEAP32[$4>>2]|0;
    $39 = ($$175|0)==($38|0);
    if ($39) {
     label = 18;
     break;
    }
    $40 = $$175;
    $41 = (($27) - ($40))|0;
    $42 = HEAP32[$14>>2]|0;
    $43 = (___uselocale($42)|0);
    $44 = (_mbrtowc($storemerge,$$175,$41,$8)|0);
    $45 = ($43|0)==(0|0);
    if (!($45)) {
     (___uselocale($43)|0);
    }
    switch ($44|0) {
    case -1:  {
     label = 15;
     break L28;
     break;
    }
    case -2:  {
     label = 16;
     break L28;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $44;
    }
    }
    $46 = (($$175) + ($$sink)|0);
    $47 = HEAP32[$7>>2]|0;
    $48 = ((($47)) + 4|0);
    $$175 = $46;$storemerge = $48;
    label = 10;
   }
   if ((label|0) == 15) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 28;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 28;
    break;
   }
   else if ((label|0) == 18) {
    HEAP32[$4>>2] = $$175;
    $49 = ($$175|0)!=($3|0);
    $50 = $49&1;
    $$172$ph = $50;
    label = 28;
    break;
   }
  }
  else if ((label|0) == 29) {
   $$pre110 = HEAP32[$4>>2]|0;
   $68 = $$pre110;
   label = 32;
  }
 } while(0);
 if ((label|0) == 28) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 32) {
  $69 = ($68|0)!=($3|0);
  $70 = $69&1;
  $$273 = $70;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (___uselocale($7)|0);
 $9 = (_wcrtomb($5,0,$1)|0);
 $10 = ($8|0)==(0|0);
 if (!($10)) {
  (___uselocale($8)|0);
 }
 $11 = (($9) + 1)|0;
 $12 = ($11>>>0)<(2);
 L4: do {
  if ($12) {
   $$019 = 2;
  } else {
   $13 = (($9) + -1)|0;
   $14 = HEAP32[$4>>2]|0;
   $15 = $3;
   $16 = (($15) - ($14))|0;
   $17 = ($13>>>0)>($16>>>0);
   if ($17) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $13;
    while(1) {
     $18 = ($$018|0)==(0);
     if ($18) {
      $$019 = 0;
      break L4;
     }
     $19 = ((($$0)) + 1|0);
     $20 = HEAP8[$$0>>0]|0;
     $21 = HEAP32[$4>>2]|0;
     $22 = ((($21)) + 1|0);
     HEAP32[$4>>2] = $22;
     HEAP8[$21>>0] = $20;
     $23 = (($$018) + -1)|0;
     $$0 = $19;$$018 = $23;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___uselocale($2)|0);
 $4 = (_mbtowc(0,0,4)|0);
 $5 = ($3|0)==(0|0);
 if (!($5)) {
  (___uselocale($3)|0);
 }
 $6 = ($4|0)==(0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 1;
  } else {
   $9 = (___uselocale($7)|0);
   $10 = (___ctype_get_mb_cur_max()|0);
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    (___uselocale($9)|0);
   }
   $12 = ($10|0)==(1);
   $$ = $12&1;
   return ($$|0);
  }
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (___uselocale($11)|0);
  $13 = (_mbrlen($$034,$10,$1)|0);
  $14 = ($12|0)==(0|0);
  if (!($14)) {
   (___uselocale($12)|0);
  }
  switch ($13|0) {
  case -2: case -1:  {
   break L1;
   break;
  }
  case 0:  {
   $$sink = 1;
   break;
  }
  default: {
   $$sink = $13;
  }
  }
  $15 = (($$034) + ($$sink)|0);
  $$131 = (($$sink) + ($$030))|0;
  $16 = (($$029) + 1)|0;
  $$029 = $16;$$030 = $$131;$$034 = $15;
 }
 return ($$030|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = 1;
 } else {
  $4 = (___uselocale($2)|0);
  $5 = (___ctype_get_mb_cur_max()|0);
  $6 = ($4|0)==(0|0);
  if ($6) {
   $7 = $5;
  } else {
   (___uselocale($4)|0);
   $7 = $5;
  }
 }
 return ($7|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8664);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNSt3__26__clocEv()|0);
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  _freelocale($5);
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0100 = 0, $$194 = 0, $$2102 = 0, $$598 = 0, $$lcssa148$sink = 0, $$off = 0, $$pre142 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre142 = $1;
 if ($6) {
  $$0100 = 0;$$194 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre142) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$0100 = 0;$$194 = $$;
    } else {
     $$0100 = 0;$$194 = $0;
    }
   } else {
    $$0100 = 0;$$194 = $0;
   }
  } else {
   $$0100 = 0;$$194 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$194>>>0)<($1>>>0);
  $20 = ($$0100>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 33;
   break;
  }
  $21 = HEAP8[$$194>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($3>>>0);
  if ($23) {
   label = 33;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = ((($$194)) + 1|0);
    $$2102 = $$0100;$$598 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 33;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$194;
     $29 = (($$pre142) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 33;
      break L6;
     }
     $31 = ((($$194)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 33;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     $41 = ((($$194)) + 2|0);
     if ($40) {
      label = 33;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $41;
      break;
     }
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$194;
     $44 = (($$pre142) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 33;
      break L6;
     }
     $46 = ((($$194)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$194)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       $$lcssa148$sink = $43;
       break L6;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       $$lcssa148$sink = $43;
       break L6;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$lcssa148$sink = $43;
       break L6;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      label = 33;
      break L6;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$194)) + 3|0);
     if ($67) {
      label = 33;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     label = 33;
     break L6;
    }
    $70 = $$194;
    $71 = (($$pre142) - ($70))|0;
    $72 = ($71|0)<(4);
    $73 = (($2) - ($$0100))|0;
    $74 = ($73>>>0)<(2);
    $or$cond110 = $74 | $72;
    if ($or$cond110) {
     label = 33;
     break L6;
    }
    $75 = ((($$194)) + 1|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$194)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($$194)) + 3|0);
    $80 = HEAP8[$79>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($76) + 112)<<24>>24;
     $81 = ($$off&255)<(48);
     if (!($81)) {
      $$lcssa148$sink = $70;
      break L6;
     }
     break;
    }
    case -12:  {
     $82 = $76 & -16;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      $$lcssa148$sink = $70;
      break L6;
     }
     break;
    }
    default: {
     $84 = $76 & -64;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      $$lcssa148$sink = $70;
      break L6;
     }
    }
    }
    $86 = $78&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     label = 33;
     break L6;
    }
    $89 = $80&255;
    $90 = $89 & 192;
    $91 = ($90|0)==(128);
    if (!($91)) {
     label = 33;
     break L6;
    }
    $92 = $22 << 18;
    $93 = $92 & 1835008;
    $94 = $76 & 63;
    $95 = $94&255;
    $96 = $95 << 12;
    $97 = $96 | $93;
    $98 = $86 << 6;
    $99 = $98 & 4032;
    $100 = $97 | $99;
    $101 = $89 & 63;
    $102 = $100 | $101;
    $103 = ($102>>>0)>($3>>>0);
    $104 = (($$0100) + 1)|0;
    $105 = ((($$194)) + 4|0);
    if ($103) {
     label = 33;
     break L6;
    } else {
     $$2102 = $104;$$598 = $105;
    }
   }
  } while(0);
  $106 = (($$2102) + 1)|0;
  $$0100 = $106;$$194 = $$598;
 }
 if ((label|0) == 33) {
  $107 = $$194;
  $$lcssa148$sink = $107;
 }
 $$sink = $0;
 $108 = (($$lcssa148$sink) - ($$sink))|0;
 return ($108|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre111 = 0, $$sink110 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre111 = $1;
  $$pre$phiZ2D = $$pre111;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 $24 = $4;
 L9: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   label = 41;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   label = 41;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  do {
   if ($32) {
    $33 = $29&255;
    HEAP16[$27>>1] = $33;
    $$sink110 = 1;$133 = $25;
   } else {
    $34 = ($29&255)<(194);
    if ($34) {
     $$8 = 2;
     break L9;
    }
    $35 = ($29&255)<(224);
    if ($35) {
     $36 = $25;
     $37 = (($$pre$phiZ2D) - ($36))|0;
     $38 = ($37|0)<(2);
     if ($38) {
      $$8 = 1;
      break L9;
     }
     $39 = ((($25)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = $41 & 192;
     $43 = ($42|0)==(128);
     if (!($43)) {
      $$8 = 2;
      break L9;
     }
     $44 = $30 << 6;
     $45 = $44 & 1984;
     $46 = $41 & 63;
     $47 = $46 | $45;
     $48 = ($47>>>0)>($6>>>0);
     if ($48) {
      $$8 = 2;
      break L9;
     }
     $49 = $47&65535;
     HEAP16[$27>>1] = $49;
     $$sink110 = 2;$133 = $25;
     break;
    }
    $50 = ($29&255)<(240);
    if ($50) {
     $51 = $25;
     $52 = (($$pre$phiZ2D) - ($51))|0;
     $53 = ($52|0)<(3);
     if ($53) {
      $$8 = 1;
      break L9;
     }
     $54 = ((($25)) + 1|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ((($25)) + 2|0);
     $57 = HEAP8[$56>>0]|0;
     switch ($29<<24>>24) {
     case -32:  {
      $58 = $55 & -32;
      $59 = ($58<<24>>24)==(-96);
      if (!($59)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $60 = $55 & -32;
      $61 = ($60<<24>>24)==(-128);
      if (!($61)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $62 = $55 & -64;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $64 = $57&255;
     $65 = $64 & 192;
     $66 = ($65|0)==(128);
     if (!($66)) {
      $$8 = 2;
      break L9;
     }
     $67 = $30 << 12;
     $68 = $55 & 63;
     $69 = $68&255;
     $70 = $69 << 6;
     $71 = $70 | $67;
     $72 = $64 & 63;
     $73 = $71 | $72;
     $74 = $73 & 65535;
     $75 = ($74>>>0)>($6>>>0);
     if ($75) {
      $$8 = 2;
      break L9;
     }
     $76 = $73&65535;
     HEAP16[$27>>1] = $76;
     $$sink110 = 3;$133 = $25;
     break;
    }
    $77 = ($29&255)<(245);
    if (!($77)) {
     $$8 = 2;
     break L9;
    }
    $78 = $25;
    $79 = (($$pre$phiZ2D) - ($78))|0;
    $80 = ($79|0)<(4);
    if ($80) {
     $$8 = 1;
     break L9;
    }
    $81 = ((($25)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($25)) + 2|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ((($25)) + 3|0);
    $86 = HEAP8[$85>>0]|0;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($82) + 112)<<24>>24;
     $87 = ($$off&255)<(48);
     if (!($87)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $88 = $82 & -16;
     $89 = ($88<<24>>24)==(-128);
     if (!($89)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $90 = $82 & -64;
     $91 = ($90<<24>>24)==(-128);
     if (!($91)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $92 = $84&255;
    $93 = $92 & 192;
    $94 = ($93|0)==(128);
    if (!($94)) {
     $$8 = 2;
     break L9;
    }
    $95 = $86&255;
    $96 = $95 & 192;
    $97 = ($96|0)==(128);
    if (!($97)) {
     $$8 = 2;
     break L9;
    }
    $98 = $27;
    $99 = (($24) - ($98))|0;
    $100 = ($99|0)<(4);
    if ($100) {
     $$8 = 1;
     break L9;
    }
    $101 = $30 & 7;
    $102 = $101 << 18;
    $103 = $82&255;
    $104 = $103 << 12;
    $105 = $104 & 258048;
    $106 = $105 | $102;
    $107 = $92 << 6;
    $108 = $107 & 4032;
    $109 = $106 | $108;
    $110 = $95 & 63;
    $111 = $109 | $110;
    $112 = ($111>>>0)>($6>>>0);
    if ($112) {
     $$8 = 2;
     break L9;
    }
    $113 = $101 << 2;
    $114 = $103 >>> 4;
    $115 = $114 & 3;
    $116 = $115 | $113;
    $117 = $116 << 6;
    $118 = (($117) + 16320)|0;
    $119 = $103 << 2;
    $120 = $119 & 60;
    $121 = $92 >>> 4;
    $122 = $121 & 3;
    $123 = $120 | $122;
    $124 = $123 | $118;
    $125 = $124 | 55296;
    $126 = $125&65535;
    HEAP16[$27>>1] = $126;
    $127 = $107 & 960;
    $128 = $110 | $127;
    $129 = $128 | 56320;
    $130 = $129&65535;
    $131 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $131;
    HEAP16[$131>>1] = $130;
    $$pre = HEAP32[$2>>2]|0;
    $$sink110 = 4;$133 = $$pre;
   }
  } while(0);
  $132 = (($133) + ($$sink110)|0);
  HEAP32[$2>>2] = $132;
  $134 = HEAP32[$5>>2]|0;
  $135 = ((($134)) + 2|0);
  HEAP32[$5>>2] = $135;
 }
 if ((label|0) == 41) {
  $136 = $26&1;
  $$8 = $136;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $$pre80 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre80 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre80) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$4 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $18 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $19 = $$pre;
   while(1) {
    $20 = ($19>>>0)<($1>>>0);
    if (!($20)) {
     $$4 = 0;
     break L4;
    }
    $21 = HEAP16[$19>>1]|0;
    $22 = $21&65535;
    $23 = ($22>>>0)>($6>>>0);
    if ($23) {
     $$4 = 2;
     break L4;
    }
    $24 = ($21&65535)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre80) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$4 = 1;
       break L4;
      }
      $29 = $21&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($21&65535)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre80) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$4 = 1;
        break L4;
       }
       $36 = $22 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $22 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($21&65535)<(55296);
      if ($45) {
       $46 = HEAP32[$5>>2]|0;
       $47 = $46;
       $48 = (($$pre80) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$4 = 1;
        break L4;
       }
       $50 = $22 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $22 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $22 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      }
      $65 = ($21&65535)<(56320);
      if (!($65)) {
       $116 = ($21&65535)<(57344);
       if ($116) {
        $$4 = 2;
        break L4;
       }
       $117 = HEAP32[$5>>2]|0;
       $118 = $117;
       $119 = (($$pre80) - ($118))|0;
       $120 = ($119|0)<(3);
       if ($120) {
        $$4 = 1;
        break L4;
       }
       $121 = $22 >>> 12;
       $122 = $121 | 224;
       $123 = $122&255;
       $124 = ((($117)) + 1|0);
       HEAP32[$5>>2] = $124;
       HEAP8[$117>>0] = $123;
       $125 = $22 >>> 6;
       $126 = $125 & 63;
       $127 = $126 | 128;
       $128 = $127&255;
       $129 = HEAP32[$5>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$5>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = $22 & 63;
       $132 = $131 | 128;
       $133 = $132&255;
       $134 = HEAP32[$5>>2]|0;
       $135 = ((($134)) + 1|0);
       HEAP32[$5>>2] = $135;
       HEAP8[$134>>0] = $133;
       break;
      }
      $66 = $19;
      $67 = (($18) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = ((($19)) + 2|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 & 64512;
      $73 = ($72|0)==(56320);
      if (!($73)) {
       $$4 = 2;
       break L4;
      }
      $74 = HEAP32[$5>>2]|0;
      $75 = (($$pre80) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$4 = 1;
       break L4;
      }
      $77 = $22 & 960;
      $78 = $77 << 10;
      $79 = (($78) + 65536)|0;
      $80 = $22 << 10;
      $81 = $80 & 64512;
      $82 = $79 | $81;
      $83 = $71 & 1023;
      $84 = $82 | $83;
      $85 = ($84>>>0)>($6>>>0);
      if ($85) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $69;
      $86 = $77 >>> 6;
      $87 = (($86) + 1)|0;
      $88 = $87 >>> 2;
      $89 = $88 | 240;
      $90 = $89&255;
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$5>>2] = $92;
      HEAP8[$91>>0] = $90;
      $93 = $87 << 4;
      $94 = $93 & 48;
      $95 = $22 >>> 2;
      $96 = $95 & 15;
      $97 = $96 | $94;
      $98 = $97 | 128;
      $99 = $98&255;
      $100 = HEAP32[$5>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$5>>2] = $101;
      HEAP8[$100>>0] = $99;
      $102 = $22 << 4;
      $103 = $102 & 48;
      $104 = $71 >>> 6;
      $105 = $104 & 15;
      $106 = $103 | $105;
      $107 = $106 | 128;
      $108 = $107&255;
      $109 = HEAP32[$5>>2]|0;
      $110 = ((($109)) + 1|0);
      HEAP32[$5>>2] = $110;
      HEAP8[$109>>0] = $108;
      $111 = $71 & 63;
      $112 = $111 | 128;
      $113 = $112&255;
      $114 = HEAP32[$5>>2]|0;
      $115 = ((($114)) + 1|0);
      HEAP32[$5>>2] = $115;
      HEAP8[$114>>0] = $113;
     }
    } while(0);
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 2|0);
    HEAP32[$2>>2] = $137;
    $19 = $137;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8712);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  }
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = ((($0)) + 4|0);
   $$pre$i$i = HEAP32[$3>>2]|0;
   $4 = $$pre$i$i;
   while(1) {
    $5 = ($4|0)==($1|0);
    if ($5) {
     break;
    }
    $6 = ((($4)) + -4|0);
    HEAP32[$3>>2] = $6;
    $4 = $6;
   }
   $7 = ((($0)) + 16|0);
   $8 = ($1|0)==($7|0);
   if ($8) {
    $9 = ((($0)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8732);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1&255;
  $4 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1 << 24 >> 24;
  $4 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1<<24>>24)>(-1);
 $$ = $3 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $7 = ($6<<24>>24)>(-1);
  $$ = $7 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $8 = ((($$09)) + 1|0);
  $9 = ((($$0)) + 1|0);
  $$0 = $9;$$09 = $8;
 }
 return ($2|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_tolower_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_toupper_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_b_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8784);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc(17269)|0);
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $3&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0$i$i = $0;
 } else {
  $8 = (($3) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $3;
  $$0$i$i = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,17269,$3)|0);
 $14 = (($$0$i$i) + ($3)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc(17263)|0);
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $3&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0$i$i = $0;
 } else {
  $8 = (($3) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $3;
  $$0$i$i = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,17263,$3)|0);
 $14 = (($$0$i$i) + ($3)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8824);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZNSt3__211char_traitsIwE6lengthEPKw(8880)|0);
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 do {
  if ($5) {
   $6 = $3&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0$i$i = $0;
  } else {
   $9 = (($3) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    _abort();
    // unreachable;
   } else {
    $12 = $10 << 2;
    $13 = (__Znwj($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $10 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $3;
    $$0$i$i = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,8880,$3)|0);
 $17 = (($$0$i$i) + ($3<<2)|0);
 HEAP32[$2>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($17,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (__ZNSt3__211char_traitsIwE6lengthEPKw(8856)|0);
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 do {
  if ($5) {
   $6 = $3&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0$i$i = $0;
  } else {
   $9 = (($3) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    _abort();
    // unreachable;
   } else {
    $12 = $10 << 2;
    $13 = (__Znwj($12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $10 | -2147483648;
    $15 = ((($0)) + 8|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $3;
    $$0$i$i = $13;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i,8856,$3)|0);
 $17 = (($$0$i$i) + ($3<<2)|0);
 HEAP32[$2>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($17,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(128);
 if ($3) {
  $4 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $5 = (($4) + ($2<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & $1;
  $8 = ($7<<16>>16)!=(0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 return ($9|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$08>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $13 = $11;
  } else {
   $13 = 0;
  }
  $12 = $13&65535;
  HEAP16[$$0>>1] = $12;
  $14 = ((($$08)) + 4|0);
  $15 = ((($$0)) + 2|0);
  $$0 = $15;$$08 = $14;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$0>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & $1;
   $12 = ($11<<16>>16)==(0);
   if (!($12)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if (!($6)) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & $1;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $$0$lcssa = $$0;
   break;
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $$pre = HEAP32[$8>>2]|0;
   $9 = $$pre;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $$pre = HEAP32[$8>>2]|0;
   $9 = $$pre;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<(128);
 $4 = $1&255;
 $$0 = $3 ? $4 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $11 = ($10>>>0)<(128);
  $12 = $10&255;
  $storemerge = $11 ? $12 : $3;
  HEAP8[$$0>>0] = $storemerge;
  $13 = ((($$09)) + 4|0);
  $14 = ((($$0)) + 1|0);
  $$0 = $14;$$09 = $13;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9140);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9176);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2&1;
 $5 = (($3) + -1)|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = (8732);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 12|0);
 HEAP8[$8>>0] = $4;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$7>>2] = $10;
 }
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__26locale5__impC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (($1) + -1)|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$0>>2] = (8712);
 $5 = ((($0)) + 8|0);
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($5,28);
 $6 = ((($0)) + 144|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $7 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15208)|0);
 $8 = ($7>>>0)>(4294967279);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($6);
  // unreachable;
 }
 $9 = ($7>>>0)<(11);
 if ($9) {
  $10 = $7&255;
  $11 = ((($6)) + 11|0);
  HEAP8[$11>>0] = $10;
  $$0$i$i = $6;
 } else {
  $12 = (($7) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  HEAP32[$6>>2] = $14;
  $15 = $13 | -2147483648;
  $16 = ((($0)) + 152|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($0)) + 148|0);
  HEAP32[$17>>2] = $7;
  $$0$i$i = $14;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i,15208,$7)|0);
 $18 = (($$0$i$i) + ($7)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($18,$2);
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($0)) + 12|0);
 $$pre$i$i$i = HEAP32[$20>>2]|0;
 $21 = $$pre$i$i$i;
 while(1) {
  $22 = ($21|0)==($19|0);
  if ($22) {
   break;
  }
  $23 = ((($21)) + -4|0);
  HEAP32[$20>>2] = $23;
  $21 = $23;
 }
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,18336);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,18344);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,18352);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,18368);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,18376);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,18384);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,18400);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,18408);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,18416);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,18440);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18472);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18480);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18488);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18496);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,18504);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,18512);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,18520);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,18528);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18536);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18544);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18552);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18560);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18568);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18584);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,18600);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,18616);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,18632);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,18640);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 if (!($5)) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18340)>>2] = 0;
 HEAP32[4584] = (6376);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20540)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18348)>>2] = 0;
 HEAP32[4586] = (6408);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20548)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbj(18352,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20556)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18372)>>2] = 0;
 HEAP32[4592] = (8928);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20588)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18380)>>2] = 0;
 HEAP32[4594] = (8996);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22348)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(18384,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22356)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18404)>>2] = 0;
 HEAP32[4600] = (9044);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22364)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18412)>>2] = 0;
 HEAP32[4602] = (9092);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22372)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Ej(18416,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20572)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Ej(18440,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20596)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18476)>>2] = 0;
 HEAP32[4618] = (6440);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20580)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18484)>>2] = 0;
 HEAP32[4620] = (6504);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20604)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18492)>>2] = 0;
 HEAP32[4622] = (6568);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20612)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18500)>>2] = 0;
 HEAP32[4624] = (6620);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20620)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18508)>>2] = 0;
 HEAP32[4626] = (8168);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22268)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18516)>>2] = 0;
 HEAP32[4628] = (8224);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22276)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18524)>>2] = 0;
 HEAP32[4630] = (8280);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22284)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18532)>>2] = 0;
 HEAP32[4632] = (8336);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22292)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18540)>>2] = 0;
 HEAP32[4634] = (8392);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22300)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18548)>>2] = 0;
 HEAP32[4636] = (8420);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22308)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18556)>>2] = 0;
 HEAP32[4638] = (8448);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22316)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18564)>>2] = 0;
 HEAP32[4640] = (8476);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22324)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18572)>>2] = 0;
 HEAP32[4642] = (8908);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((18576));
 HEAP32[4642] = (6672);
 HEAP32[(18576)>>2] = (6720);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21432)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18588)>>2] = 0;
 HEAP32[4646] = (8908);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((18592));
 HEAP32[4646] = (6756);
 HEAP32[(18592)>>2] = (6804);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22244)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18604)>>2] = 0;
 HEAP32[4650] = (8908);
 $0 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(18608)>>2] = $0;
 HEAP32[4650] = (8120);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22252)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18620)>>2] = 0;
 HEAP32[4654] = (8908);
 $0 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(18624)>>2] = $0;
 HEAP32[4654] = (8144);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22260)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18636)>>2] = 0;
 HEAP32[4658] = (8504);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22332)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18644)>>2] = 0;
 HEAP32[4660] = (8536);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(22340)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($2>>>0);
 if ($9) {
  $10 = $6;
  $$pre$phiZ2D = $3;$13 = $10;
 } else {
  $11 = (($2) + 1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($3,$11);
  $$pre = HEAP32[$3>>2]|0;
  $$pre$phiZ2D = $3;$13 = $$pre;
 }
 $12 = (($13) + ($2<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
 }
 $16 = HEAP32[$$pre$phiZ2D>>2]|0;
 $17 = (($16) + ($2<<2)|0);
 HEAP32[$17>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 $9 = $3;
 L1: do {
  if ($7) {
   $10 = (($1) - ($6))|0;
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$10);
  } else {
   $11 = ($6>>>0)>($1>>>0);
   if ($11) {
    $12 = (($8) + ($1<<2)|0);
    $13 = $9;
    while(1) {
     $14 = ($13|0)==($12|0);
     if ($14) {
      break L1;
     }
     $15 = ((($13)) + -4|0);
     HEAP32[$2>>2] = $15;
     $13 = $15;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = (($6) - ($10))|0;
   $12 = $11 >> 2;
   $13 = (($12) + ($1))|0;
   $14 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0)|0);
   $15 = ($14>>>0)<($13>>>0);
   if ($15) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
    // unreachable;
   } else {
    $16 = ((($0)) + 16|0);
    $17 = HEAP32[$3>>2]|0;
    $18 = HEAP32[$0>>2]|0;
    $19 = (($17) - ($18))|0;
    $20 = $19 >> 2;
    $21 = $14 >>> 1;
    $22 = ($20>>>0)<($21>>>0);
    $23 = $19 >> 1;
    $24 = ($23>>>0)<($13>>>0);
    $$sroa$speculated$i = $24 ? $13 : $23;
    $$sroa$speculated$$i = $22 ? $$sroa$speculated$i : $14;
    $25 = HEAP32[$5>>2]|0;
    $26 = (($25) - ($18))|0;
    $27 = $26 >> 2;
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($2,$$sroa$speculated$$i,$27,$16);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($2,$1);
    __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
    break;
   }
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $13 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   $10 = ($1>>>0)<(29);
   $or$cond$i$i = $10 & $9;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $13 = $3;
    break;
   } else {
    $11 = $1 << 2;
    $12 = (__Znwj($11)|0);
    $13 = $12;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $13;
 $14 = (($13) + ($2<<2)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = (($13) + ($1<<2)|0);
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = $17;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $4 = $$pre$i$i$i;
 while(1) {
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -4|0);
  HEAP32[$3>>2] = $6;
  $4 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7|0)==($10|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (8824);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (8784);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (8664);
 $4 = ((($0)) + 8|0);
 $5 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$4>>2] = $5;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ((($0)) + 128|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = ($1>>>0)<(29);
 $or$cond$i$i = $7 & $6;
 if ($or$cond$i$i) {
  $8 = ((($0)) + 16|0);
  HEAP8[$4>>0] = 1;
  $$0$i$i = $8;
 } else {
  $9 = $1 << 2;
  $10 = (__Znwj($9)|0);
  $$0$i$i = $10;
 }
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $$0$i$i;
 HEAP32[$0>>2] = $$0$i$i;
 $12 = (($$0$i$i) + ($1<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18648]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18648)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp12make_classicEv()|0);
   HEAP32[5596] = 22380;
  }
 }
 $4 = HEAP32[5596]|0;
 return ($4|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[5595] = 18656;
 return (22380|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Ej(18656,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(22388,$0);
 return (22388|0);
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18816]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18816)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp11make_globalEv()|0);
   HEAP32[5598] = 22388;
  }
 }
 $4 = HEAP32[5598]|0;
 return ($4|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__26locale8__globalEv()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($1);
 return;
}
function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($1)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 511]($0);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $$0$i = (($1) + -1)|0;
 return ($$0$i|0);
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((22396|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((22424|0),(22396|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$0>>2] = 1;
  (_pthread_mutex_unlock((22396|0))|0);
  FUNCTION_TABLE_vi[$2 & 511]($1);
  (_pthread_mutex_lock((22396|0))|0);
  HEAP32[$0>>2] = -1;
  (_pthread_mutex_unlock((22396|0))|0);
  (_pthread_cond_broadcast((22424|0))|0);
 } else {
  (_pthread_mutex_unlock((22396|0))|0);
 }
 return;
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 511]();
 }
 return ($$lcssa|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9296);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(4294967279);
  if ($9) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $10 = ($8>>>0)<(11);
  if ($10) {
   $11 = $8&255;
   $12 = ((($0)) + 11|0);
   HEAP8[$12>>0] = $11;
   $$0$i = $0;
  } else {
   $13 = (($8) + 16)|0;
   $14 = $13 & -16;
   $15 = (__Znwj($14)|0);
   HEAP32[$0>>2] = $15;
   $16 = $14 | -2147483648;
   $17 = ((($0)) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($0)) + 4|0);
   HEAP32[$18>>2] = $8;
   $$0$i = $15;
  }
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$6,$8)|0);
  $19 = (($$0$i) + ($8)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($19,$2);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $6 = ((($1)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = ($12>>>0)<($2>>>0);
 if ($13) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = $8 ? $14 : $1;
 $16 = (($15) + ($2)|0);
 $17 = (($12) - ($2))|0;
 $18 = ($17>>>0)<($3>>>0);
 $$sroa$speculated = $18 ? $17 : $3;
 $19 = ($$sroa$speculated>>>0)>(4294967279);
 if ($19) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $20 = ($$sroa$speculated>>>0)<(11);
 if ($20) {
  $21 = $$sroa$speculated&255;
  $22 = ((($0)) + 11|0);
  HEAP8[$22>>0] = $21;
  $$0$i = $0;
 } else {
  $23 = (($$sroa$speculated) + 16)|0;
  $24 = $23 & -16;
  $25 = (__Znwj($24)|0);
  HEAP32[$0>>2] = $25;
  $26 = $24 | -2147483648;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $$sroa$speculated;
  $$0$i = $25;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$16,$$sroa$speculated)|0);
 $29 = (($$0$i) + ($$sroa$speculated)|0);
 HEAP8[$5>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($29,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 10;
 }
 $11 = ($10>>>0)<($2>>>0);
 do {
  if ($11) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off043 = 0, $$01939 = 0, $$020365255 = 0, $$02037 = 0, $$phitmp$i = 0, $$pre = 0, $$pre$phi58Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $12 = $11;$18 = 10;
 }
 $13 = ($12>>>0)>($1>>>0);
 $$sroa$speculated = $13 ? $12 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 10 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $22 = HEAP32[$0>>2]|0;
     if ($5) {
      $$017$off043 = 0;$$01939 = $22;$$02037 = $0;
      label = 13;
     } else {
      $23 = $4&255;
      $24 = (($23) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$22,$24)|0);
      __ZdlPv($22);
      label = 16;
     }
    } else {
     $19 = (($$phitmp$i) + 1)|0;
     $20 = (__Znwj($19)|0);
     if ($5) {
      $21 = HEAP32[$0>>2]|0;
      $$017$off043 = 1;$$01939 = $21;$$02037 = $20;
      label = 13;
      break;
     } else {
      $25 = $4&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$0,$26)|0);
      $$pre = ((($0)) + 4|0);
      $$020365255 = $20;$$pre$phi58Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $27 = ((($0)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$02037,$$01939,$29)|0);
    __ZdlPv($$01939);
    if ($$017$off043) {
     $$pre57 = (($$phitmp$i) + 1)|0;
     $$020365255 = $$02037;$$pre$phi58Z2D = $$pre57;$$pre$phiZ2D = $27;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $30 = $$pre$phi58Z2D | -2147483648;
    $31 = ((($0)) + 8|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$$pre$phiZ2D>>2] = $12;
    HEAP32[$0>>2] = $$020365255;
    break;
   }
   else if ((label|0) == 16) {
    $32 = $12&255;
    HEAP8[$3>>0] = $32;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 do {
  if ($12) {
   $13 = (($1) - ($11))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$13,$2)|0);
  } else {
   if ($7) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($15,$3);
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    break;
   } else {
    $17 = (($0) + ($1)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($17,$4);
    $18 = $1&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;$16 = $phitmp$i;
  } else {
   $13 = $6&255;
   $15 = $13;$16 = 10;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($1>>>0);
  if ($17) {
   $18 = (($1) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $20 = $$pre;
  } else {
   $20 = $6;
  }
  $21 = ($20<<24>>24)<(0);
  if ($21) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($15)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcjc($23,$1,$2)|0);
  $25 = (($15) + ($1))|0;
  $26 = HEAP8[$5>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $25;
  } else {
   $29 = $25&255;
   HEAP8[$5>>0] = $29;
  }
  $30 = (($24) + ($25)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($30,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($2) - ($15))|0;
  $28 = (($27) + ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 if ($12) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($7) {
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 2147483647;
  $phitmp$i = (($15) + -1)|0;
  $17 = $phitmp$i;
 } else {
  $17 = 10;
 }
 $16 = (($17) - ($11))|0;
 $18 = ($16>>>0)<($3>>>0);
 if ($18) {
  $36 = (($11) + ($3))|0;
  $37 = (($36) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$17,$37,$11,$1,0,$3,$2);
 } else {
  $19 = ($3|0)==(0);
  if (!($19)) {
   if ($7) {
    $20 = HEAP32[$0>>2]|0;
    $24 = $20;
   } else {
    $24 = $0;
   }
   $21 = (($11) - ($1))|0;
   $22 = ($21|0)==(0);
   $23 = (($24) + ($1)|0);
   if ($22) {
    $$1 = $2;
   } else {
    $25 = (($23) + ($3)|0);
    $26 = ($23>>>0)<=($2>>>0);
    $27 = (($24) + ($11)|0);
    $28 = ($27>>>0)>($2>>>0);
    $or$cond = $26 & $28;
    $29 = (($2) + ($3)|0);
    $$0 = $or$cond ? $29 : $2;
    (__ZNSt3__211char_traitsIcE4moveEPcPKcj($25,$23,$21)|0);
    $$1 = $$0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($23,$$1,$3)|0);
   $30 = (($11) + ($3))|0;
   $31 = HEAP8[$5>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = ((($0)) + 4|0);
    HEAP32[$33>>2] = $30;
   } else {
    $34 = $30&255;
    HEAP8[$5>>0] = $34;
   }
   $35 = (($24) + ($30)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $4 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($0,$1,$2,$3)|0);
 return ($4|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 1;
 }
 $11 = ($10>>>0)<($2>>>0);
 do {
  if ($11) {
   if ($7) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $6&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($7) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwj($13,$1,$2)|0);
   $14 = (($13) + ($2<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($14,$3);
   $15 = HEAP8[$5>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (1073741806 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($11)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $29 = $15;
 } else {
  $29 = $0;
 }
 $16 = ($1>>>0)<(536870887);
 if ($16) {
  $17 = (($2) + ($1))|0;
  $18 = $1 << 1;
  $19 = ($17>>>0)<($18>>>0);
  $$sroa$speculated = $19 ? $18 : $17;
  $20 = ($$sroa$speculated>>>0)<(2);
  $21 = (($$sroa$speculated) + 4)|0;
  $22 = $21 & -4;
  $23 = $20 ? 2 : $22;
  $24 = ($23>>>0)>(1073741823);
  if ($24) {
   _abort();
   // unreachable;
  } else {
   $26 = $23;
  }
 } else {
  $26 = 1073741807;
 }
 $25 = $26 << 2;
 $27 = (__Znwj($25)|0);
 $28 = ($4|0)==(0);
 if (!($28)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($27,$29,$4)|0);
 }
 $30 = ($6|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($31,$7,$6)|0);
 }
 $32 = (($3) - ($5))|0;
 $33 = (($32) - ($4))|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (($29) + ($4<<2)|0);
  $36 = (($35) + ($5<<2)|0);
  $37 = (($27) + ($4<<2)|0);
  $38 = (($37) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($38,$36,$33)|0);
 }
 $39 = ($1|0)==(1);
 if (!($39)) {
  __ZdlPv($29);
 }
 HEAP32[$0>>2] = $27;
 $40 = $26 | -2147483648;
 HEAP32[$11>>2] = $40;
 $41 = (($32) + ($6))|0;
 $42 = ((($0)) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = (($27) + ($41<<2)|0);
 HEAP32[$8>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($43,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off043 = 0, $$01939 = 0, $$020365255 = 0, $$02037 = 0, $$phitmp$i = 0, $$pre = 0, $$pre$phi58Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $12 = $11;$18 = 1;
 }
 $13 = ($12>>>0)>($1>>>0);
 $$sroa$speculated = $13 ? $12 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 1 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $24 = HEAP32[$0>>2]|0;
     if ($6) {
      $$017$off043 = 0;$$01939 = $24;$$02037 = $0;
      label = 15;
     } else {
      $25 = $5&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$24,$26)|0);
      __ZdlPv($24);
      label = 18;
     }
    } else {
     $19 = (($$phitmp$i) + 1)|0;
     $20 = ($19>>>0)>(1073741823);
     if ($20) {
      _abort();
      // unreachable;
     }
     $21 = $19 << 2;
     $22 = (__Znwj($21)|0);
     if ($6) {
      $23 = HEAP32[$0>>2]|0;
      $$017$off043 = 1;$$01939 = $23;$$02037 = $22;
      label = 15;
      break;
     } else {
      $27 = $5&255;
      $28 = (($27) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($22,$0,$28)|0);
      $$pre = ((($0)) + 4|0);
      $$020365255 = $22;$$pre$phi58Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $29 = ((($0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$02037,$$01939,$31)|0);
    __ZdlPv($$01939);
    if ($$017$off043) {
     $$pre57 = (($$phitmp$i) + 1)|0;
     $$020365255 = $$02037;$$pre$phi58Z2D = $$pre57;$$pre$phiZ2D = $29;
     label = 17;
    } else {
     label = 18;
    }
   }
   if ((label|0) == 17) {
    $32 = $$pre$phi58Z2D | -2147483648;
    HEAP32[$3>>2] = $32;
    HEAP32[$$pre$phiZ2D>>2] = $12;
    HEAP32[$0>>2] = $$020365255;
    break;
   }
   else if ((label|0) == 18) {
    $33 = $12&255;
    HEAP8[$4>>0] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $27 = $13;
 } else {
  $27 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   _abort();
   // unreachable;
  } else {
   $24 = $21;
  }
 } else {
  $24 = 1073741807;
 }
 $23 = $24 << 2;
 $25 = (__Znwj($23)|0);
 $26 = ($4|0)==(0);
 if (!($26)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($25,$27,$4)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  $32 = (($31) + ($5<<2)|0);
  $33 = (($25) + ($4<<2)|0);
  $34 = (($33) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($34,$32,$29)|0);
 }
 $35 = ($1|0)==(1);
 if (!($35)) {
  __ZdlPv($27);
 }
 HEAP32[$0>>2] = $25;
 $36 = $24 | -2147483648;
 HEAP32[$9>>2] = $36;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $6&255;
  $14 = $12;$15 = 1;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($2) - ($15))|0;
  $28 = (($27) + ($14))|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($7) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14<<2)|0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$5>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$5>>0] = $25;
   }
   $26 = (($20) + ($21<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $8 = $6&255;
  $$018 = $8;$$019 = 1;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$5>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($7) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$5>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$2);
 $22 = ((($$0)) + 4|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__29to_stringEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($2);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0,$2,$1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = $phitmp$i;
 } else {
  $9 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$9,0);
 return;
}
function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEiEET_T0_SD_PKNSD_10value_typeET1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$017 = 0, $$017$ph = 0, $$2 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $$017$ph = $7;
 } else {
  $8 = $4&255;
  $$017$ph = $8;
 }
 $$017 = $$017$ph;$9 = $4;
 while(1) {
  $10 = ($9<<24>>24)<(0);
  if ($10) {
   $11 = HEAP32[$1>>2]|0;
   $13 = $11;
  } else {
   $13 = $1;
  }
  $12 = (($$017) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $14 = (_snprintf($13,$12,17341,$vararg_buffer)|0);
  $15 = ($14|0)>(-1);
  if ($15) {
   $16 = ($14>>>0)>($$017>>>0);
   if ($16) {
    $$2 = $14;
   } else {
    break;
   }
  } else {
   $17 = $$017 << 1;
   $18 = $17 | 1;
   $$2 = $18;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($1,$$2,0);
  $$pr = HEAP8[$3>>0]|0;
  $$017 = $$2;$9 = $$pr;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($1,$14,0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $19 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (($$0$i$i) + 1)|0;
  $$0$i$i = $20;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__29to_stringEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdLb1EEclEv($2);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_($0,$2,$1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdLb1EEclEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = $phitmp$i;
 } else {
  $9 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$9,0);
 return;
}
function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcjPKczEdEET_T0_SD_PKNSD_10value_typeET1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0$i$i = 0, $$017 = 0, $$017$ph = 0, $$2 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $$017$ph = $7;
 } else {
  $8 = $4&255;
  $$017$ph = $8;
 }
 $$017 = $$017$ph;$9 = $4;
 while(1) {
  $10 = ($9<<24>>24)<(0);
  if ($10) {
   $11 = HEAP32[$1>>2]|0;
   $13 = $11;
  } else {
   $13 = $1;
  }
  $12 = (($$017) + 1)|0;
  HEAPF64[$vararg_buffer>>3] = $2;
  $14 = (_snprintf($13,$12,17344,$vararg_buffer)|0);
  $15 = ($14|0)>(-1);
  if ($15) {
   $16 = ($14>>>0)>($$017>>>0);
   if ($16) {
    $$2 = $14;
   } else {
    break;
   }
  } else {
   $17 = $$017 << 1;
   $18 = $17 | 1;
   $$2 = $18;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($1,$$2,0);
  $$pr = HEAP8[$3>>0]|0;
  $$017 = $$2;$9 = $$pr;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($1,$14,0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $19 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (($$0$i$i) + 1)|0;
  $$0$i$i = $20;
 }
 STACKTOP = sp;return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 17483;
    _abort_message(17433,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[360]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 511](1440,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 511]($30)|0);
    HEAP32[$vararg_buffer>>2] = 17483;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(17347,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 17483;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(17392,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(17471,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((22472|0),(349|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[5619]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(17622,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[539]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,1464,1448,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 511]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 511]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 511]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 511]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 511]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$13>>2] = $2;
      $33 = ((($1)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($1)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($1)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($1)) + 54|0);
        HEAP8[$42>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 511]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((22476|0),(350|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17671,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[5619]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17721,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 511]();
 _abort_message(17774,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2301]|0;
 $1 = (($0) + 0)|0;
 HEAP32[2301] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9296);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_436($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_436($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $85 = ((($$1)) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 511]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 511]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 511]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5620]|0;
 $1 = (($0) + 0)|0;
 HEAP32[5620] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,1464,1552,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_round_f64(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&0](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(4);return 0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(5);return 0;
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(9);return 0;
}
function b10() {
 ; nullFunc_v(10);
}
function b11(p0) {
 p0 = p0|0; nullFunc_vi(11);
}
function b12(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(12);
}
function b13(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(13);
}
function b14(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(14);
}
function b15(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15);
}
function b16(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(16);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,b0,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b0,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b0,b0,b0,b0,b0
,b0,b0,b0,b0,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b0,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZNSt3__211__stdoutbufIwE4syncEv,b0,b0,b0,b0,b0,__ZNSt3__211__stdoutbufIcE4syncEv,b0,b0,b0,b0,b0,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,b0,b0,b0,b0,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b0,b0,b0,b0,b0,b0,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv
,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,b0,b0,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b0,b0,b0,b0,b0,b0,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv
,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b0,b0
,b0,b0,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b0,b0,b0,b0,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,b0,b0,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b0,b0,b0,b0,b0,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,b0,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt11logic_error4whatEv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b1,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b1,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZNSt3__211__stdoutbufIwE8overflowEj,b1,b1,b1,b1,b1,__ZNSt3__211__stdoutbufIcE8overflowEi,b1,b1,b1,b1,b1,__ZNSt3__210__stdinbufIwE9pbackfailEj,b1,b1,b1,b1,b1,__ZNSt3__210__stdinbufIcE9pbackfailEi,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,__ZNKSt3__25ctypeIcE10do_toupperEc,b1,__ZNKSt3__25ctypeIcE10do_tolowerEc,b1,__ZNKSt3__25ctypeIcE8do_widenEc,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__25ctypeIwE10do_toupperEw,b1
,__ZNKSt3__25ctypeIwE10do_tolowerEw,b1,__ZNKSt3__25ctypeIwE8do_widenEc,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,b2,b2,b2,b2,___stdout_write,___stdio_seek,___stdio_read,___stdio_write,_sn_write,b2,b2,b2,b2,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b2,b2,b2,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b2,b2,b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b2,b2,b2
,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b2,b2,b2,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b2,b2,b2,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,b2,b2,b2,b2,b2,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b2,b2
,b2,b2,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE
,b2,b2,b2,b2,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b2,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b2,b2,__ZNKSt3__25ctypeIcE9do_narrowEcc,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__25ctypeIwE5do_isEtw,b2,b2,b2,b2,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw
,b2,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b2,b2,__ZNKSt3__25ctypeIwE9do_narrowEwc,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_do_read_568,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b3,b3
,b3,b3,b3,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiiiid = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b5,b5,b5,b5
,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b5,b5,b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b5,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b5,b5,b5,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b5,b5,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b5,b5,b5,b5,b5,b5,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b5,b5,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b5,b5,b5,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b5,b5,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b5,b5,b5,b5,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b5,b5,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiid = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b6,b6,b6,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b7,b7,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b7
,b7,b7,b7,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b7,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b7,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b7,b7,b7,b7,b7,b7,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b7,b7,b7,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b8,b8,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b8,b8,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b9,b9,b9,b9,b9,b9,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZL25default_terminate_handlerv,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z8gameLoopv,b10,b10,b10,b10,b10,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_vi = [b11,__ZN13TouchControls6updateEv,__ZN13TouchControls4drawEv,__ZN14DebugVariables6updateEv,__ZN14DebugVariables4drawEv,b11,b11,b11,b11,b11,b11,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED2Ev,__ZNSt3__211__stdoutbufIwED0Ev
,b11,b11,b11,b11,__ZNSt3__211__stdoutbufIcED2Ev,__ZNSt3__211__stdoutbufIcED0Ev,b11,b11,b11,b11,__ZNSt3__210__stdinbufIwED2Ev,__ZNSt3__210__stdinbufIwED0Ev,b11,b11,b11,b11,__ZNSt3__210__stdinbufIcED2Ev,__ZNSt3__210__stdinbufIcED0Ev,b11,b11,b11,b11,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b11,b11,b11,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev
,b11,b11,b11,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11
,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,b11,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,b11,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b11,b11,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b11,b11,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b11
,b11,b11,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b11,b11,b11,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev
,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b11,b11,b11,b11,b11,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b11,b11,b11,b11,b11,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,b11,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b11,b11
,b11,b11,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b11,b11,b11,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b11,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b11,b11,b11,b11,b11,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,b11,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,b12,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,b12,b12,b12,b12,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b12,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,b12,b12,b12,b12,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b12,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv
,b12,b12,b12,b12,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,b12,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNKSt3__28messagesIcE8do_closeEi,b12,b12,b12,b12,__ZNKSt3__28messagesIwE8do_closeEi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,b12,b12,b12,b12,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viii = [b13];
var FUNCTION_TABLE_viiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b14,b14,b14
,b14,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_viiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b16,b16,b16,b16,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,b16,b16,b16,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b16,b16,b16,b16,b16,b16,b16,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_Controls_cpp: __GLOBAL__sub_I_Controls_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_round_f64: _llvm_round_f64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _onblur: _onblur, _onfocus: _onfocus, _onkeydown: _onkeydown, _onkeyup: _onkeyup, _onmousedown: _onmousedown, _onmousemove: _onmousemove, _onmouseup: _onmouseup, _onresize: _onresize, _onwheel: _onwheel, _orientationchange: _orientationchange, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, _touchend: _touchend, _touchmove: _touchmove, _touchstart: _touchstart, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_Controls_cpp = asm["__GLOBAL__sub_I_Controls_cpp"]; asm["__GLOBAL__sub_I_Controls_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_Controls_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_round_f64 = asm["_llvm_round_f64"]; asm["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_round_f64.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__onblur = asm["_onblur"]; asm["_onblur"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onblur.apply(null, arguments);
};

var real__onfocus = asm["_onfocus"]; asm["_onfocus"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onfocus.apply(null, arguments);
};

var real__onkeydown = asm["_onkeydown"]; asm["_onkeydown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onkeydown.apply(null, arguments);
};

var real__onkeyup = asm["_onkeyup"]; asm["_onkeyup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onkeyup.apply(null, arguments);
};

var real__onmousedown = asm["_onmousedown"]; asm["_onmousedown"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onmousedown.apply(null, arguments);
};

var real__onmousemove = asm["_onmousemove"]; asm["_onmousemove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onmousemove.apply(null, arguments);
};

var real__onmouseup = asm["_onmouseup"]; asm["_onmouseup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onmouseup.apply(null, arguments);
};

var real__onresize = asm["_onresize"]; asm["_onresize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onresize.apply(null, arguments);
};

var real__onwheel = asm["_onwheel"]; asm["_onwheel"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__onwheel.apply(null, arguments);
};

var real__orientationchange = asm["_orientationchange"]; asm["_orientationchange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__orientationchange.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__touchend = asm["_touchend"]; asm["_touchend"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__touchend.apply(null, arguments);
};

var real__touchmove = asm["_touchmove"]; asm["_touchmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__touchmove.apply(null, arguments);
};

var real__touchstart = asm["_touchstart"]; asm["_touchstart"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__touchstart.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_Controls_cpp = Module["__GLOBAL__sub_I_Controls_cpp"] = asm["__GLOBAL__sub_I_Controls_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _onblur = Module["_onblur"] = asm["_onblur"];
var _onfocus = Module["_onfocus"] = asm["_onfocus"];
var _onkeydown = Module["_onkeydown"] = asm["_onkeydown"];
var _onkeyup = Module["_onkeyup"] = asm["_onkeyup"];
var _onmousedown = Module["_onmousedown"] = asm["_onmousedown"];
var _onmousemove = Module["_onmousemove"] = asm["_onmousemove"];
var _onmouseup = Module["_onmouseup"] = asm["_onmouseup"];
var _onresize = Module["_onresize"] = asm["_onresize"];
var _onwheel = Module["_onwheel"] = asm["_onwheel"];
var _orientationchange = Module["_orientationchange"] = asm["_orientationchange"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _touchend = Module["_touchend"] = asm["_touchend"];
var _touchmove = Module["_touchmove"] = asm["_touchmove"];
var _touchstart = Module["_touchstart"] = asm["_touchstart"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



